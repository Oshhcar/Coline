
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package reporte;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ReporteSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ReporteSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ReporteSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ReporteSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ReporteSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\004\000\002\002\004\000\002\005" +
    "\010\000\002\005\012\000\002\003\002\000\002\003\003" +
    "\000\002\004\006\000\002\004\005\000\002\010\002\000" +
    "\002\010\003\000\002\006\004\000\002\006\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\012\002" +
    "\000\002\012\003\000\002\013\004\000\002\013\003\000" +
    "\002\014\003\000\002\014\006\000\002\014\013\000\002" +
    "\014\014\000\002\014\012\000\002\011\005\000\002\011" +
    "\004\000\002\015\005\000\002\015\003\000\002\016\005" +
    "\000\002\016\003\000\002\017\005\000\002\017\003\000" +
    "\002\025\002\000\002\025\003\000\002\026\005\000\002" +
    "\026\003\000\002\027\005\000\002\027\004\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\022\002\000\002\022\003\000\002\023\004\000\002\023" +
    "\003\000\002\024\007\000\002\024\007\000\002\024\006" +
    "\000\002\024\007\000\002\024\011\000\002\024\011\000" +
    "\002\024\004\000\002\024\005\000\002\024\004\000\002" +
    "\024\004\000\002\024\005\000\002\024\006\000\002\024" +
    "\007\000\002\024\007\000\002\024\007\000\002\024\003" +
    "\000\002\024\004\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\004\000\002\024\006\000\002\024\004\000\002\030" +
    "\004\000\002\030\004\000\002\030\004\000\002\030\004" +
    "\000\002\031\002\000\002\031\003\000\002\032\005\000" +
    "\002\032\003\000\002\033\007\000\002\033\003\000\002" +
    "\034\013\000\002\034\011\000\002\035\011\000\002\036" +
    "\013\000\002\037\015\000\002\040\004\000\002\040\005" +
    "\000\002\041\005\000\002\041\003\000\002\042\011\000" +
    "\002\043\002\000\002\043\003\000\002\044\004\000\002" +
    "\044\003\000\002\045\006\000\002\045\005\000\002\046" +
    "\005\000\002\046\003\000\002\047\006\000\002\047\005" +
    "\000\002\047\005\000\002\050\002\000\002\050\003\000" +
    "\002\051\004\000\002\051\006\000\002\054\006\000\002" +
    "\021\003\000\002\021\007\000\002\021\005\000\002\021" +
    "\005\000\002\052\006\000\002\052\005\000\002\053\005" +
    "\000\002\053\003\000\002\056\005\000\002\056\005\000" +
    "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
    "\056\010\000\002\056\004\000\002\056\004\000\002\056" +
    "\004\000\002\056\004\000\002\056\004\000\002\056\004" +
    "\000\002\056\005\000\002\056\005\000\002\056\005\000" +
    "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
    "\056\005\000\002\056\005\000\002\056\005\000\002\056" +
    "\004\000\002\056\005\000\002\056\007\000\002\056\005" +
    "\000\002\056\006\000\002\056\004\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\006" +
    "\000\002\056\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0173\000\022\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061" +
    "\ufffd\062\ufffd\064\ufffd\110\007\001\002\000\022\055\ufffc" +
    "\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\064\ufffc\110" +
    "\u0173\001\002\000\004\002\u0172\001\002\000\020\055\207" +
    "\056\214\057\213\060\210\061\216\062\217\064\ufff9\001" +
    "\002\000\046\004\025\005\021\006\033\007\012\010\027" +
    "\011\032\012\030\013\020\016\010\027\034\030\022\036" +
    "\014\037\011\052\013\112\023\115\015\116\031\120\026" +
    "\001\002\000\056\004\025\005\021\006\033\007\012\010" +
    "\027\011\032\012\030\013\020\016\010\027\034\030\022" +
    "\036\014\037\011\052\013\065\203\066\201\067\176\070" +
    "\202\112\023\115\015\116\031\120\026\001\002\000\046" +
    "\004\025\005\021\006\033\007\012\010\027\011\032\012" +
    "\030\013\020\016\010\027\034\030\022\036\014\037\011" +
    "\052\013\112\023\115\015\116\031\120\026\001\002\000" +
    "\062\015\uff66\017\uff66\021\uff66\022\uff66\023\uff66\025\uff66" +
    "\026\uff66\027\uff66\030\uff66\031\uff66\032\uff66\033\uff66\036" +
    "\uff66\037\uff66\042\uff66\043\uff66\044\uff66\045\uff66\046\uff66" +
    "\047\uff66\050\uff66\051\uff66\053\uff66\117\uff66\001\002\000" +
    "\046\004\025\005\021\006\033\007\012\010\027\011\032" +
    "\012\030\013\020\016\010\027\034\030\022\036\014\037" +
    "\011\052\013\112\023\115\015\116\031\120\026\001\002" +
    "\000\046\004\025\005\021\006\033\007\012\010\027\011" +
    "\032\012\030\013\020\016\010\027\034\030\022\036\014" +
    "\037\011\052\013\112\023\115\015\116\031\120\026\001" +
    "\002\000\064\015\uff69\017\uff69\021\uff69\022\uff69\023\uff69" +
    "\024\171\025\uff69\026\uff69\027\uff69\030\uff69\031\uff69\032" +
    "\uff69\033\uff69\036\uff69\037\uff69\042\uff69\043\uff69\044\uff69" +
    "\045\uff69\046\uff69\047\uff69\050\uff69\051\uff69\053\uff69\117" +
    "\uff69\001\002\000\064\015\uff6a\017\uff6a\021\uff6a\022\uff6a" +
    "\023\uff6a\024\167\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031" +
    "\uff6a\032\uff6a\033\uff6a\036\uff6a\037\uff6a\042\uff6a\043\uff6a" +
    "\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a\053" +
    "\uff6a\117\uff6a\001\002\000\066\015\uff96\017\uff96\021\uff96" +
    "\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030" +
    "\uff96\031\uff96\032\uff96\033\uff96\036\uff96\037\uff96\042\uff96" +
    "\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051" +
    "\uff96\053\uff96\054\uff96\117\uff96\001\002\000\062\015\uff62" +
    "\017\uff62\021\uff62\022\uff62\023\uff62\025\uff62\026\uff62\027" +
    "\uff62\030\uff62\031\uff62\032\uff62\033\uff62\036\uff62\037\uff62" +
    "\042\uff62\043\uff62\044\uff62\045\uff62\046\uff62\047\uff62\050" +
    "\uff62\051\uff62\053\uff62\117\uff62\001\002\000\062\015\uff64" +
    "\017\uff64\021\uff64\022\uff64\023\uff64\025\uff64\026\uff64\027" +
    "\uff64\030\uff64\031\uff64\032\uff64\033\uff64\036\uff64\037\uff64" +
    "\042\uff64\043\uff64\044\uff64\045\uff64\046\uff64\047\uff64\050" +
    "\uff64\051\uff64\053\uff64\117\uff64\001\002\000\046\004\025" +
    "\005\021\006\033\007\012\010\027\011\032\012\030\013" +
    "\020\016\010\027\034\030\022\036\014\037\011\052\013" +
    "\112\023\115\015\116\031\120\026\001\002\000\004\016" +
    "\163\001\002\000\050\022\162\026\052\027\051\030\042" +
    "\031\050\032\045\033\053\036\040\037\037\042\046\043" +
    "\044\044\043\045\036\046\056\047\055\050\057\051\041" +
    "\053\047\117\054\001\002\000\062\015\uff65\017\uff65\021" +
    "\uff65\022\uff65\023\uff65\025\uff65\026\uff65\027\uff65\030\uff65" +
    "\031\uff65\032\uff65\033\uff65\036\uff65\037\uff65\042\uff65\043" +
    "\uff65\044\uff65\045\uff65\046\uff65\047\uff65\050\uff65\051\uff65" +
    "\053\uff65\117\uff65\001\002\000\004\016\155\001\002\000" +
    "\070\015\uff61\016\146\017\uff61\020\107\021\uff61\022\uff61" +
    "\023\uff61\024\uff92\025\uff61\026\uff61\027\uff61\030\uff61\031" +
    "\uff61\032\uff61\033\uff61\036\uff61\037\uff61\042\uff61\043\uff61" +
    "\044\uff61\045\uff61\046\uff61\047\uff61\050\uff61\051\uff61\053" +
    "\uff61\117\uff61\001\002\000\062\015\uff63\017\uff63\021\uff63" +
    "\022\uff63\023\uff63\025\uff63\026\uff63\027\uff63\030\uff63\031" +
    "\uff63\032\uff63\033\uff63\036\uff63\037\uff63\042\uff63\043\uff63" +
    "\044\uff63\045\uff63\046\uff63\047\uff63\050\uff63\051\uff63\053" +
    "\uff63\117\uff63\001\002\000\004\024\102\001\002\000\062" +
    "\015\uff68\017\uff68\021\uff68\022\uff68\023\uff68\025\uff68\026" +
    "\uff68\027\uff68\030\uff68\031\uff68\032\uff68\033\uff68\036\uff68" +
    "\037\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046\uff68\047" +
    "\uff68\050\uff68\051\uff68\053\uff68\117\uff68\001\002\000\062" +
    "\015\uff67\017\uff67\021\uff67\022\uff67\023\uff67\025\uff67\026" +
    "\uff67\027\uff67\030\uff67\031\uff67\032\uff67\033\uff67\036\uff67" +
    "\037\uff67\042\uff67\043\uff67\044\uff67\045\uff67\046\uff67\047" +
    "\uff67\050\uff67\051\uff67\053\uff67\117\uff67\001\002\000\046" +
    "\004\025\005\021\006\033\007\012\010\027\011\032\012" +
    "\030\013\020\016\010\027\034\030\022\036\014\037\011" +
    "\052\013\112\023\115\015\116\031\120\026\001\002\000" +
    "\062\015\uff7e\017\uff7e\021\uff7e\022\uff7e\023\uff7e\025\uff7e" +
    "\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\036" +
    "\uff7e\037\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e" +
    "\047\uff7e\050\uff7e\051\uff7e\053\uff7e\117\uff7e\001\002\000" +
    "\046\004\025\005\021\006\033\007\012\010\027\011\032" +
    "\012\030\013\020\016\010\027\034\030\022\036\014\037" +
    "\011\052\013\112\023\115\015\116\031\120\026\001\002" +
    "\000\062\015\uff7c\017\uff7c\021\uff7c\022\uff7c\023\uff7c\025" +
    "\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c" +
    "\036\uff7c\037\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046" +
    "\uff7c\047\uff7c\050\uff7c\051\uff7c\053\uff7c\117\uff7c\001\002" +
    "\000\062\015\uff7d\017\uff7d\021\uff7d\022\uff7d\023\uff7d\025" +
    "\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d" +
    "\036\uff7d\037\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046" +
    "\uff7d\047\uff7d\050\uff7d\051\uff7d\053\uff7d\117\uff7d\001\002" +
    "\000\046\004\025\005\021\006\033\007\012\010\027\011" +
    "\032\012\030\013\020\016\010\027\034\030\022\036\014" +
    "\037\011\052\013\112\023\115\015\116\031\120\026\001" +
    "\002\000\046\004\025\005\021\006\033\007\012\010\027" +
    "\011\032\012\030\013\020\016\010\027\034\030\022\036" +
    "\014\037\011\052\013\112\023\115\015\116\031\120\026" +
    "\001\002\000\046\004\025\005\021\006\033\007\012\010" +
    "\027\011\032\012\030\013\020\016\010\027\034\030\022" +
    "\036\014\037\011\052\013\112\023\115\015\116\031\120" +
    "\026\001\002\000\046\004\025\005\021\006\033\007\012" +
    "\010\027\011\032\012\030\013\020\016\010\027\034\030" +
    "\022\036\014\037\011\052\013\112\023\115\015\116\031" +
    "\120\026\001\002\000\046\004\025\005\021\006\033\007" +
    "\012\010\027\011\032\012\030\013\020\016\010\027\034" +
    "\030\022\036\014\037\011\052\013\112\023\115\015\116" +
    "\031\120\026\001\002\000\046\004\025\005\021\006\033" +
    "\007\012\010\027\011\032\012\030\013\020\016\010\027" +
    "\034\030\022\036\014\037\011\052\013\112\023\115\015" +
    "\116\031\120\026\001\002\000\046\004\025\005\021\006" +
    "\033\007\012\010\027\011\032\012\030\013\020\016\010" +
    "\027\034\030\022\036\014\037\011\052\013\112\023\115" +
    "\015\116\031\120\026\001\002\000\046\004\025\005\021" +
    "\006\033\007\012\010\027\011\032\012\030\013\020\016" +
    "\010\027\034\030\022\036\014\037\011\052\013\112\023" +
    "\115\015\116\031\120\026\001\002\000\046\004\025\005" +
    "\021\006\033\007\012\010\027\011\032\012\030\013\020" +
    "\016\010\027\034\030\022\036\014\037\011\052\013\112" +
    "\023\115\015\116\031\120\026\001\002\000\046\004\025" +
    "\005\021\006\033\007\012\010\027\011\032\012\030\013" +
    "\020\016\010\027\034\030\022\036\014\037\011\052\013" +
    "\112\023\115\015\116\031\120\026\001\002\000\046\004" +
    "\025\005\021\006\033\007\012\010\027\011\032\012\030" +
    "\013\020\016\010\027\034\030\022\036\014\037\011\052" +
    "\013\112\023\115\015\116\031\120\026\001\002\000\046" +
    "\004\025\005\021\006\033\007\012\010\027\011\032\012" +
    "\030\013\020\016\010\027\034\030\022\036\014\037\011" +
    "\052\013\112\023\115\015\116\031\120\026\001\002\000" +
    "\046\004\025\005\021\006\033\007\012\010\027\011\032" +
    "\012\030\013\020\016\010\027\034\030\022\036\014\037" +
    "\011\052\013\112\023\115\015\116\031\120\026\001\002" +
    "\000\046\004\025\005\021\006\033\007\012\010\027\011" +
    "\032\012\030\013\020\016\010\027\034\030\022\036\014" +
    "\037\011\052\013\112\023\115\015\116\031\120\026\001" +
    "\002\000\046\004\025\005\021\006\033\007\012\010\027" +
    "\011\032\012\030\013\020\016\010\027\034\030\022\036" +
    "\014\037\011\052\013\112\023\115\015\116\031\120\026" +
    "\001\002\000\062\015\uff72\017\uff72\021\uff72\022\uff72\023" +
    "\uff72\025\uff72\026\uff72\027\051\030\042\031\050\032\045" +
    "\033\053\036\040\037\037\042\046\043\044\044\043\045" +
    "\036\046\056\047\055\050\uff72\051\uff72\053\047\117\054" +
    "\001\002\000\062\015\uff75\017\uff75\021\uff75\022\uff75\023" +
    "\uff75\025\uff75\026\uff75\027\051\030\042\031\050\032\045" +
    "\033\053\036\040\037\037\042\046\043\044\044\043\045" +
    "\036\046\uff75\047\055\050\uff75\051\uff75\053\uff75\117\uff75" +
    "\001\002\000\062\015\uff74\017\uff74\021\uff74\022\uff74\023" +
    "\uff74\025\uff74\026\uff74\027\051\030\042\031\050\032\045" +
    "\033\053\036\040\037\037\042\046\043\044\044\043\045" +
    "\036\046\uff74\047\uff74\050\uff74\051\uff74\053\uff74\117\uff74" +
    "\001\002\000\062\015\uff73\017\uff73\021\uff73\022\uff73\023" +
    "\uff73\025\uff73\026\uff73\027\051\030\042\031\050\032\045" +
    "\033\053\036\040\037\037\042\046\043\044\044\043\045" +
    "\036\046\056\047\055\050\uff73\051\uff73\053\uff73\117\uff73" +
    "\001\002\000\062\015\uff81\017\uff81\021\uff81\022\uff81\023" +
    "\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81" +
    "\033\uff81\036\040\037\037\042\uff81\043\uff81\044\uff81\045" +
    "\uff81\046\uff81\047\uff81\050\uff81\051\uff81\053\uff81\117\uff81" +
    "\001\002\000\050\025\066\026\052\027\051\030\042\031" +
    "\050\032\045\033\053\036\040\037\037\042\046\043\044" +
    "\044\043\045\036\046\056\047\055\050\057\051\041\053" +
    "\047\117\054\001\002\000\046\004\025\005\021\006\033" +
    "\007\012\010\027\011\032\012\030\013\020\016\010\027" +
    "\034\030\022\036\014\037\011\052\013\112\023\115\015" +
    "\116\031\120\026\001\002\000\062\015\uff6e\017\uff6e\021" +
    "\uff6e\022\uff6e\023\uff6e\025\uff6e\026\052\027\051\030\042" +
    "\031\050\032\045\033\053\036\040\037\037\042\046\043" +
    "\044\044\043\045\036\046\056\047\055\050\057\051\041" +
    "\053\047\117\054\001\002\000\062\015\uff85\017\uff85\021" +
    "\uff85\022\uff85\023\uff85\025\uff85\026\uff85\027\uff85\030\uff85" +
    "\031\050\032\045\033\053\036\040\037\037\042\uff85\043" +
    "\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051\uff85" +
    "\053\uff85\117\uff85\001\002\000\062\015\uff83\017\uff83\021" +
    "\uff83\022\uff83\023\uff83\025\uff83\026\uff83\027\uff83\030\uff83" +
    "\031\uff83\032\uff83\033\uff83\036\040\037\037\042\uff83\043" +
    "\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83" +
    "\053\uff83\117\uff83\001\002\000\062\015\uff6f\017\uff6f\021" +
    "\uff6f\022\uff6f\023\uff6f\025\uff6f\026\uff6f\027\051\030\042" +
    "\031\050\032\045\033\053\036\040\037\037\042\046\043" +
    "\044\044\043\045\036\046\056\047\055\050\uff6f\051\uff6f" +
    "\053\uff6f\117\054\001\002\000\062\015\uff79\017\uff79\021" +
    "\uff79\022\uff79\023\uff79\025\uff79\026\uff79\027\051\030\042" +
    "\031\050\032\045\033\053\036\040\037\037\042\uff79\043" +
    "\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050\uff79\051\uff79" +
    "\053\uff79\117\uff79\001\002\000\062\015\uff82\017\uff82\021" +
    "\uff82\022\uff82\023\uff82\025\uff82\026\uff82\027\uff82\030\uff82" +
    "\031\uff82\032\uff82\033\uff82\036\040\037\037\042\uff82\043" +
    "\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82" +
    "\053\uff82\117\uff82\001\002\000\062\015\uff78\017\uff78\021" +
    "\uff78\022\uff78\023\uff78\025\uff78\026\uff78\027\051\030\042" +
    "\031\050\032\045\033\053\036\040\037\037\042\uff78\043" +
    "\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78\051\uff78" +
    "\053\uff78\117\uff78\001\002\000\062\015\uff77\017\uff77\021" +
    "\uff77\022\uff77\023\uff77\025\uff77\026\uff77\027\051\030\042" +
    "\031\050\032\045\033\053\036\040\037\037\042\uff77\043" +
    "\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\051\uff77" +
    "\053\uff77\117\uff77\001\002\000\062\015\uff84\017\uff84\021" +
    "\uff84\022\uff84\023\uff84\025\uff84\026\uff84\027\uff84\030\uff84" +
    "\031\050\032\045\033\053\036\040\037\037\042\uff84\043" +
    "\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84" +
    "\053\uff84\117\uff84\001\002\000\062\015\uff71\017\uff71\021" +
    "\uff71\022\uff71\023\uff71\025\uff71\026\uff71\027\051\030\042" +
    "\031\050\032\045\033\053\036\040\037\037\042\046\043" +
    "\044\044\043\045\036\046\056\047\055\050\057\051\uff71" +
    "\053\047\117\054\001\002\000\062\015\uff76\017\uff76\021" +
    "\uff76\022\uff76\023\uff76\025\uff76\026\uff76\027\051\030\042" +
    "\031\050\032\045\033\053\036\040\037\037\042\uff76\043" +
    "\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\051\uff76" +
    "\053\uff76\117\uff76\001\002\000\004\010\104\001\002\000" +
    "\066\015\uff93\017\uff93\021\uff93\022\uff93\023\uff93\024\uff93" +
    "\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033" +
    "\uff93\036\uff93\037\uff93\042\uff93\043\uff93\044\uff93\045\uff93" +
    "\046\uff93\047\uff93\050\uff93\051\uff93\053\uff93\054\uff93\117" +
    "\uff93\001\002\000\006\016\105\020\107\001\002\000\054" +
    "\004\025\005\021\006\033\007\012\010\027\011\032\012" +
    "\030\013\020\014\122\016\010\017\uffad\027\034\030\022" +
    "\036\014\037\011\052\013\111\117\112\023\115\015\116" +
    "\031\120\026\001\002\000\070\015\uff90\017\uff90\020\112" +
    "\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027" +
    "\uff90\030\uff90\031\uff90\032\uff90\033\uff90\036\uff90\037\uff90" +
    "\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050" +
    "\uff90\051\uff90\053\uff90\054\uff90\117\uff90\001\002\000\046" +
    "\004\025\005\021\006\033\007\012\010\027\011\032\012" +
    "\030\013\020\016\010\027\034\030\022\036\014\037\011" +
    "\052\013\112\023\115\015\116\031\120\026\001\002\000" +
    "\050\021\111\026\052\027\051\030\042\031\050\032\045" +
    "\033\053\036\040\037\037\042\046\043\044\044\043\045" +
    "\036\046\056\047\055\050\057\051\041\053\047\117\054" +
    "\001\002\000\070\015\uff88\017\uff88\020\uff88\021\uff88\022" +
    "\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88" +
    "\031\uff88\032\uff88\033\uff88\036\uff88\037\uff88\042\uff88\043" +
    "\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88" +
    "\053\uff88\054\uff88\117\uff88\001\002\000\046\004\025\005" +
    "\021\006\033\007\012\010\027\011\032\012\030\013\020" +
    "\016\010\027\034\030\022\036\014\037\011\052\013\112" +
    "\023\115\015\116\031\120\026\001\002\000\050\021\114" +
    "\026\052\027\051\030\042\031\050\032\045\033\053\036" +
    "\040\037\037\042\046\043\044\044\043\045\036\046\056" +
    "\047\055\050\057\051\041\053\047\117\054\001\002\000" +
    "\070\015\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89" +
    "\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032" +
    "\uff89\033\uff89\036\uff89\037\uff89\042\uff89\043\uff89\044\uff89" +
    "\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89\053\uff89\054" +
    "\uff89\117\uff89\001\002\000\056\015\uff8d\017\uff8d\022\uff8d" +
    "\023\uff8d\026\052\027\051\030\042\031\050\032\045\033" +
    "\053\036\040\037\037\042\046\043\044\044\043\045\036" +
    "\046\056\047\055\050\057\051\041\053\047\117\054\001" +
    "\002\000\004\017\145\001\002\000\016\010\140\065\136" +
    "\066\132\067\134\070\135\074\133\001\002\000\006\017" +
    "\uffac\023\130\001\002\000\006\017\uffaa\023\uffaa\001\002" +
    "\000\052\004\025\005\021\006\033\007\012\010\027\011" +
    "\032\012\030\013\020\014\122\016\010\027\034\030\022" +
    "\036\014\037\011\052\013\111\117\112\023\115\015\116" +
    "\031\120\026\001\002\000\006\015\126\023\125\001\002" +
    "\000\006\015\uff86\023\uff86\001\002\000\052\004\025\005" +
    "\021\006\033\007\012\010\027\011\032\012\030\013\020" +
    "\014\122\016\010\027\034\030\022\036\014\037\011\052" +
    "\013\111\117\112\023\115\015\116\031\120\026\001\002" +
    "\000\012\015\uff8a\017\uff8a\022\uff8a\023\uff8a\001\002\000" +
    "\006\015\uff87\023\uff87\001\002\000\052\004\025\005\021" +
    "\006\033\007\012\010\027\011\032\012\030\013\020\014" +
    "\122\016\010\027\034\030\022\036\014\037\011\052\013" +
    "\111\117\112\023\115\015\116\031\120\026\001\002\000" +
    "\006\017\uffab\023\uffab\001\002\000\006\010\uffd7\020\uffd7" +
    "\001\002\000\006\010\uffd4\020\uffd4\001\002\000\006\010" +
    "\uffd6\020\uffd6\001\002\000\006\010\uffd5\020\uffd5\001\002" +
    "\000\006\010\uffd8\020\uffd8\001\002\000\004\020\107\001" +
    "\002\000\006\016\141\020\uffd3\001\002\000\054\004\025" +
    "\005\021\006\033\007\012\010\027\011\032\012\030\013" +
    "\020\014\122\016\010\017\uffad\027\034\030\022\036\014" +
    "\037\011\052\013\111\117\112\023\115\015\116\031\120" +
    "\026\001\002\000\004\017\143\001\002\000\012\015\uff8c" +
    "\017\uff8c\022\uff8c\023\uff8c\001\002\000\014\015\uff8b\017" +
    "\uff8b\020\112\022\uff8b\023\uff8b\001\002\000\066\015\uff8f" +
    "\017\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026" +
    "\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\036\uff8f" +
    "\037\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047" +
    "\uff8f\050\uff8f\051\uff8f\053\uff8f\054\uff8f\117\uff8f\001\002" +
    "\000\054\004\025\005\021\006\033\007\012\010\027\011" +
    "\032\012\030\013\020\014\122\016\010\017\uffad\027\034" +
    "\030\022\036\014\037\011\052\013\111\117\112\023\115" +
    "\015\116\031\120\026\001\002\000\066\015\uff6b\017\uff6b" +
    "\020\112\021\uff6b\022\uff6b\023\uff6b\024\uff91\025\uff6b\026" +
    "\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b\036\uff6b" +
    "\037\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b\047" +
    "\uff6b\050\uff6b\051\uff6b\053\uff6b\117\uff6b\001\002\000\004" +
    "\024\151\001\002\000\004\010\104\001\002\000\066\015" +
    "\uff95\017\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95" +
    "\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\036" +
    "\uff95\037\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\047\uff95\050\uff95\051\uff95\053\uff95\054\uff95\117\uff95\001" +
    "\002\000\004\017\154\001\002\000\062\015\uff60\017\uff60" +
    "\021\uff60\022\uff60\023\uff60\025\uff60\026\uff60\027\uff60\030" +
    "\uff60\031\uff60\032\uff60\033\uff60\036\uff60\037\uff60\042\uff60" +
    "\043\uff60\044\uff60\045\uff60\046\uff60\047\uff60\050\uff60\051" +
    "\uff60\053\uff60\117\uff60\001\002\000\046\004\025\005\021" +
    "\006\033\007\012\010\027\011\032\012\030\013\020\016" +
    "\010\027\034\030\022\036\014\037\011\052\013\112\023" +
    "\115\015\116\031\120\026\001\002\000\050\023\157\026" +
    "\052\027\051\030\042\031\050\032\045\033\053\036\040" +
    "\037\037\042\046\043\044\044\043\045\036\046\056\047" +
    "\055\050\057\051\041\053\047\117\054\001\002\000\046" +
    "\004\025\005\021\006\033\007\012\010\027\011\032\012" +
    "\030\013\020\016\010\027\034\030\022\036\014\037\011" +
    "\052\013\112\023\115\015\116\031\120\026\001\002\000" +
    "\050\017\161\026\052\027\051\030\042\031\050\032\045" +
    "\033\053\036\040\037\037\042\046\043\044\044\043\045" +
    "\036\046\056\047\055\050\057\051\041\053\047\117\054" +
    "\001\002\000\062\015\uff80\017\uff80\021\uff80\022\uff80\023" +
    "\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80" +
    "\033\uff80\036\uff80\037\uff80\042\uff80\043\uff80\044\uff80\045" +
    "\uff80\046\uff80\047\uff80\050\uff80\051\uff80\053\uff80\117\uff80" +
    "\001\002\000\022\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061" +
    "\ufffa\062\ufffa\064\ufffa\110\ufffa\001\002\000\046\004\025" +
    "\005\021\006\033\007\012\010\027\011\032\012\030\013" +
    "\020\016\010\027\034\030\022\036\014\037\011\052\013" +
    "\112\023\115\015\116\031\120\026\001\002\000\050\017" +
    "\165\026\052\027\051\030\042\031\050\032\045\033\053" +
    "\036\040\037\037\042\046\043\044\044\043\045\036\046" +
    "\056\047\055\050\057\051\041\053\047\117\054\001\002" +
    "\000\062\015\uff5f\017\uff5f\021\uff5f\022\uff5f\023\uff5f\025" +
    "\uff5f\026\uff5f\027\uff5f\030\uff5f\031\uff5f\032\uff5f\033\uff5f" +
    "\036\uff5f\037\uff5f\042\uff5f\043\uff5f\044\uff5f\045\uff5f\046" +
    "\uff5f\047\uff5f\050\uff5f\051\uff5f\053\uff5f\117\uff5f\001\002" +
    "\000\062\015\uff7f\017\uff7f\021\uff7f\022\uff7f\023\uff7f\025" +
    "\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f" +
    "\036\uff7f\037\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046" +
    "\uff7f\047\uff7f\050\uff7f\051\uff7f\053\uff7f\117\uff7f\001\002" +
    "\000\004\010\104\001\002\000\066\015\uff97\017\uff97\021" +
    "\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\032\uff97\033\uff97\036\uff97\037\uff97\042" +
    "\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97" +
    "\051\uff97\053\uff97\054\uff97\117\uff97\001\002\000\004\010" +
    "\104\001\002\000\066\015\uff94\017\uff94\021\uff94\022\uff94" +
    "\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031" +
    "\uff94\032\uff94\033\uff94\036\uff94\037\uff94\042\uff94\043\uff94" +
    "\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\053" +
    "\uff94\054\uff94\117\uff94\001\002\000\062\015\uff7b\017\uff7b" +
    "\021\uff7b\022\uff7b\023\uff7b\025\uff7b\026\uff7b\027\uff7b\030" +
    "\uff7b\031\uff7b\032\uff7b\033\uff7b\036\uff7b\037\uff7b\042\uff7b" +
    "\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\051" +
    "\uff7b\053\uff7b\117\uff7b\001\002\000\062\015\uff70\017\uff70" +
    "\021\uff70\022\uff70\023\uff70\025\uff70\026\uff70\027\051\030" +
    "\042\031\050\032\045\033\053\036\040\037\037\042\046" +
    "\043\044\044\043\045\036\046\056\047\055\050\uff70\051" +
    "\uff70\053\uff70\117\054\001\002\000\062\015\uff7a\017\uff7a" +
    "\021\uff7a\022\uff7a\023\uff7a\025\uff7a\026\uff7a\027\uff7a\030" +
    "\uff7a\031\uff7a\032\uff7a\033\uff7a\036\uff7a\037\uff7a\042\uff7a" +
    "\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051" +
    "\uff7a\053\uff7a\117\uff7a\001\002\000\004\017\uffd0\001\002" +
    "\000\004\017\205\001\002\000\050\017\204\026\052\027" +
    "\051\030\042\031\050\032\045\033\053\036\040\037\037" +
    "\042\046\043\044\044\043\045\036\046\056\047\055\050" +
    "\057\051\041\053\047\117\054\001\002\000\004\017\uffd1" +
    "\001\002\000\004\017\uffcf\001\002\000\004\017\uffd2\001" +
    "\002\000\062\015\uff6d\017\uff6d\021\uff6d\022\uff6d\023\uff6d" +
    "\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\033" +
    "\uff6d\036\uff6d\037\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6d" +
    "\046\uff6d\047\uff6d\050\uff6d\051\uff6d\053\uff6d\117\uff6d\001" +
    "\002\000\046\004\025\005\021\006\033\007\012\010\027" +
    "\011\032\012\030\013\020\016\010\027\034\030\022\036" +
    "\014\037\011\052\013\112\023\115\015\116\031\120\026" +
    "\001\002\000\062\015\uff6c\017\uff6c\021\uff6c\022\uff6c\023" +
    "\uff6c\025\uff6c\026\052\027\051\030\042\031\050\032\045" +
    "\033\053\036\040\037\037\042\046\043\044\044\043\045" +
    "\036\046\056\047\055\050\057\051\041\053\047\117\054" +
    "\001\002\000\034\010\ufff5\055\ufff5\056\ufff5\057\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5" +
    "\070\ufff5\074\ufff5\001\002\000\034\010\ufff2\055\ufff2\056" +
    "\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\067\ufff2\070\ufff2\074\ufff2\001\002\000\034\010" +
    "\ufff8\055\207\056\214\057\213\060\210\061\216\062\217" +
    "\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\074\ufff8\001" +
    "\002\000\004\064\221\001\002\000\034\010\ufff3\055\ufff3" +
    "\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\074\ufff3\001\002\000\034" +
    "\010\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062" +
    "\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\074\ufff4" +
    "\001\002\000\004\002\000\001\002\000\034\010\ufff1\055" +
    "\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\064\ufff1" +
    "\065\ufff1\066\ufff1\067\ufff1\070\ufff1\074\ufff1\001\002\000" +
    "\034\010\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0" +
    "\062\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\074" +
    "\ufff0\001\002\000\034\010\ufff6\055\ufff6\056\ufff6\057\ufff6" +
    "\060\ufff6\061\ufff6\062\ufff6\064\ufff6\065\ufff6\066\ufff6\067" +
    "\ufff6\070\ufff6\074\ufff6\001\002\000\004\010\222\001\002" +
    "\000\006\014\224\063\223\001\002\000\004\010\u016d\001" +
    "\002\000\036\010\ufff9\015\uffef\055\207\056\214\057\213" +
    "\060\210\061\216\062\217\064\ufff9\065\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\074\ufff9\001\002\000\036\010\ufff9\015\uffee" +
    "\055\207\056\214\057\213\060\210\061\216\062\217\064" +
    "\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\074\ufff9\001\002" +
    "\000\004\015\u016b\001\002\000\036\010\uffec\015\uffec\055" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\064\uffec" +
    "\065\uffec\066\uffec\067\uffec\070\uffec\074\uffec\001\002\000" +
    "\020\010\233\064\221\065\136\066\132\067\134\070\135" +
    "\074\133\001\002\000\036\010\uffeb\015\uffeb\055\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\064\uffeb\065\uffeb" +
    "\066\uffeb\067\uffeb\070\uffeb\074\uffeb\001\002\000\006\010" +
    "\u0159\020\u0156\001\002\000\010\010\uffd3\016\234\020\uffd3" +
    "\001\002\000\024\010\236\017\uffde\023\uffde\062\241\065" +
    "\136\066\132\067\134\070\135\074\133\001\002\000\006" +
    "\017\uffdb\023\uffdb\001\002\000\004\010\uffd3\001\002\000" +
    "\006\017\uffdd\023\uffdd\001\002\000\004\010\332\001\002" +
    "\000\016\010\236\065\136\066\132\067\134\070\135\074" +
    "\133\001\002\000\006\017\244\023\243\001\002\000\020" +
    "\010\236\062\241\065\136\066\132\067\134\070\135\074" +
    "\133\001\002\000\004\014\245\001\002\000\102\010\274" +
    "\015\uffce\036\264\037\261\055\207\056\214\057\213\060" +
    "\210\061\216\062\217\064\ufff9\065\136\066\132\067\134" +
    "\070\135\071\251\072\260\073\247\074\133\075\272\076" +
    "\270\100\275\101\306\102\271\103\253\104\302\105\252" +
    "\112\256\113\266\114\304\115\255\116\263\001\002\000" +
    "\004\022\u0151\001\002\000\004\016\u014e\001\002\000\004" +
    "\010\332\001\002\000\004\016\u0148\001\002\000\004\016" +
    "\u0138\001\002\000\004\014\u0130\001\002\000\106\010\uffb6" +
    "\015\uffb6\036\uffb6\037\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\061\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6" +
    "\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076" +
    "\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6" +
    "\106\uffb6\107\uffb6\112\uffb6\113\uffb6\114\uffb6\115\uffb6\116" +
    "\uffb6\001\002\000\006\016\u012c\024\171\001\002\000\004" +
    "\016\u0128\001\002\000\106\010\uffb7\015\uffb7\036\uffb7\037" +
    "\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7" +
    "\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072" +
    "\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\100\uffb7\101\uffb7" +
    "\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\112" +
    "\uffb7\113\uffb7\114\uffb7\115\uffb7\116\uffb7\001\002\000\004" +
    "\016\u0124\001\002\000\004\010\u0123\001\002\000\110\010" +
    "\uffa8\015\uffa8\036\uffa8\037\uffa8\055\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\062\uffa8\064\uffa8\065\uffa8\066\uffa8\067" +
    "\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8" +
    "\076\uffa8\077\u0118\100\uffa8\101\uffa8\102\uffa8\103\uffa8\104" +
    "\uffa8\105\uffa8\106\uffa8\107\uffa8\112\uffa8\113\uffa8\114\uffa8" +
    "\115\uffa8\116\uffa8\001\002\000\006\016\u0114\024\102\001" +
    "\002\000\004\010\u0113\001\002\000\106\010\uffb9\015\uffb9" +
    "\036\uffb9\037\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9" +
    "\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\100" +
    "\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9" +
    "\107\uffb9\112\uffb9\113\uffb9\114\uffb9\115\uffb9\116\uffb9\001" +
    "\002\000\004\016\u010d\001\002\000\106\010\uffbb\015\uffbb" +
    "\036\uffbb\037\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb" +
    "\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\100" +
    "\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb" +
    "\107\uffbb\112\uffbb\113\uffbb\114\uffbb\115\uffbb\116\uffbb\001" +
    "\002\000\004\016\u0107\001\002\000\004\016\u0101\001\002" +
    "\000\054\004\025\005\021\006\033\007\012\010\027\011" +
    "\032\012\030\013\020\014\122\016\010\022\377\027\034" +
    "\030\022\036\014\037\011\052\013\111\117\112\023\115" +
    "\015\116\031\120\026\001\002\000\106\010\uffb5\015\uffb5" +
    "\036\uffb5\037\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5" +
    "\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\100" +
    "\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\106\uffb5" +
    "\107\uffb5\112\uffb5\113\uffb5\114\uffb5\115\uffb5\116\uffb5\001" +
    "\002\000\020\010\uffd3\016\364\020\107\024\uff92\036\350" +
    "\037\352\054\365\001\002\000\004\022\363\001\002\000" +
    "\106\010\274\015\uffcd\036\264\037\261\055\207\056\214" +
    "\057\213\060\210\061\216\062\217\064\ufff9\065\136\066" +
    "\132\067\134\070\135\071\251\072\260\073\247\074\133" +
    "\075\272\076\270\100\275\101\306\102\271\103\253\104" +
    "\302\105\252\106\uffcd\107\uffcd\112\256\113\266\114\304" +
    "\115\255\116\263\001\002\000\004\022\361\001\002\000" +
    "\106\010\uffb8\015\uffb8\036\uffb8\037\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\062\uffb8\064\uffb8\065\uffb8\066" +
    "\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8" +
    "\075\uffb8\076\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104" +
    "\uffb8\105\uffb8\106\uffb8\107\uffb8\112\uffb8\113\uffb8\114\uffb8" +
    "\115\uffb8\116\uffb8\001\002\000\004\015\360\001\002\000" +
    "\004\016\322\001\002\000\106\010\uffcb\015\uffcb\036\uffcb" +
    "\037\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062" +
    "\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb" +
    "\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\100\uffcb\101" +
    "\uffcb\102\uffcb\103\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb" +
    "\112\uffcb\113\uffcb\114\uffcb\115\uffcb\116\uffcb\001\002\000" +
    "\004\016\314\001\002\000\010\022\311\024\167\054\310" +
    "\001\002\000\004\022\307\001\002\000\106\010\uffc1\015" +
    "\uffc1\036\uffc1\037\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1" +
    "\061\uffc1\062\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070" +
    "\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1" +
    "\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106" +
    "\uffc1\107\uffc1\112\uffc1\113\uffc1\114\uffc1\115\uffc1\116\uffc1" +
    "\001\002\000\052\004\025\005\021\006\033\007\012\010" +
    "\027\011\032\012\030\013\020\014\122\016\010\027\034" +
    "\030\022\036\014\037\011\052\013\111\117\112\023\115" +
    "\015\116\031\120\026\001\002\000\106\010\uffb4\015\uffb4" +
    "\036\uffb4\037\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061" +
    "\uffb4\062\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4" +
    "\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\100" +
    "\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4\106\uffb4" +
    "\107\uffb4\112\uffb4\113\uffb4\114\uffb4\115\uffb4\116\uffb4\001" +
    "\002\000\004\022\313\001\002\000\106\010\uffb3\015\uffb3" +
    "\036\uffb3\037\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3" +
    "\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\100" +
    "\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3" +
    "\107\uffb3\112\uffb3\113\uffb3\114\uffb3\115\uffb3\116\uffb3\001" +
    "\002\000\046\004\025\005\021\006\033\007\012\010\027" +
    "\011\032\012\030\013\020\016\010\027\034\030\022\036" +
    "\014\037\011\052\013\112\023\115\015\116\031\120\026" +
    "\001\002\000\050\023\316\026\052\027\051\030\042\031" +
    "\050\032\045\033\053\036\040\037\037\042\046\043\044" +
    "\044\043\045\036\046\056\047\055\050\057\051\041\053" +
    "\047\117\054\001\002\000\046\004\025\005\021\006\033" +
    "\007\012\010\027\011\032\012\030\013\020\016\010\027" +
    "\034\030\022\036\014\037\011\052\013\112\023\115\015" +
    "\116\031\120\026\001\002\000\050\017\320\026\052\027" +
    "\051\030\042\031\050\032\045\033\053\036\040\037\037" +
    "\042\046\043\044\044\043\045\036\046\056\047\055\050" +
    "\057\051\041\053\047\117\054\001\002\000\004\022\321" +
    "\001\002\000\106\010\uffc5\015\uffc5\036\uffc5\037\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\064\uffc5" +
    "\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073" +
    "\uffc5\074\uffc5\075\uffc5\076\uffc5\100\uffc5\101\uffc5\102\uffc5" +
    "\103\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\112\uffc5\113" +
    "\uffc5\114\uffc5\115\uffc5\116\uffc5\001\002\000\016\010\325" +
    "\065\136\066\132\067\134\070\135\074\133\001\002\000" +
    "\004\022\342\001\002\000\004\010\332\001\002\000\006" +
    "\010\uffd3\054\326\001\002\000\052\004\025\005\021\006" +
    "\033\007\012\010\027\011\032\012\030\013\020\014\122" +
    "\016\010\027\034\030\022\036\014\037\011\052\013\111" +
    "\117\112\023\115\015\116\031\120\026\001\002\000\004" +
    "\022\uffa1\001\002\000\006\022\uffe3\023\uffe3\001\002\000" +
    "\012\020\337\022\uffe1\023\uffe1\054\336\001\002\000\014" +
    "\017\uffdf\020\uffdf\022\uffdf\023\uffdf\054\uffdf\001\002\000" +
    "\006\022\uffa2\023\334\001\002\000\004\010\332\001\002" +
    "\000\006\022\uffe4\023\uffe4\001\002\000\052\004\025\005" +
    "\021\006\033\007\012\010\027\011\032\012\030\013\020" +
    "\014\122\016\010\027\034\030\022\036\014\037\011\052" +
    "\013\111\117\112\023\115\015\116\031\120\026\001\002" +
    "\000\004\021\340\001\002\000\014\017\uffe0\020\uffe0\022" +
    "\uffe0\023\uffe0\054\uffe0\001\002\000\006\022\uffe2\023\uffe2" +
    "\001\002\000\046\004\025\005\021\006\033\007\012\010" +
    "\027\011\032\012\030\013\020\016\010\027\034\030\022" +
    "\036\014\037\011\052\013\112\023\115\015\116\031\120" +
    "\026\001\002\000\050\022\344\026\052\027\051\030\042" +
    "\031\050\032\045\033\053\036\040\037\037\042\046\043" +
    "\044\044\043\045\036\046\056\047\055\050\057\051\041" +
    "\053\047\117\054\001\002\000\010\010\347\036\264\037" +
    "\261\001\002\000\004\017\uff9f\001\002\000\004\017\354" +
    "\001\002\000\010\036\350\037\352\054\351\001\002\000" +
    "\006\017\uffb1\022\uffb1\001\002\000\052\004\025\005\021" +
    "\006\033\007\012\010\027\011\032\012\030\013\020\014" +
    "\122\016\010\027\034\030\022\036\014\037\011\052\013" +
    "\111\117\112\023\115\015\116\031\120\026\001\002\000" +
    "\006\017\uffb0\022\uffb0\001\002\000\004\017\uffa0\001\002" +
    "\000\004\014\355\001\002\000\102\010\274\015\uffce\036" +
    "\264\037\261\055\207\056\214\057\213\060\210\061\216" +
    "\062\217\064\ufff9\065\136\066\132\067\134\070\135\071" +
    "\251\072\260\073\247\074\133\075\272\076\270\100\275" +
    "\101\306\102\271\103\253\104\302\105\252\112\256\113" +
    "\266\114\304\115\255\116\263\001\002\000\004\015\357" +
    "\001\002\000\106\010\uffa3\015\uffa3\036\uffa3\037\uffa3\055" +
    "\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\064\uffa3" +
    "\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073" +
    "\uffa3\074\uffa3\075\uffa3\076\uffa3\100\uffa3\101\uffa3\102\uffa3" +
    "\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3\112\uffa3\113" +
    "\uffa3\114\uffa3\115\uffa3\116\uffa3\001\002\000\036\010\uffe7" +
    "\015\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062" +
    "\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\074\uffe7" +
    "\001\002\000\106\010\uffb2\015\uffb2\036\uffb2\037\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\064\uffb2" +
    "\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\076\uffb2\100\uffb2\101\uffb2\102\uffb2" +
    "\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\112\uffb2\113" +
    "\uffb2\114\uffb2\115\uffb2\116\uffb2\001\002\000\106\010\uffcc" +
    "\015\uffcc\036\uffcc\037\uffcc\055\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc" +
    "\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076" +
    "\uffcc\100\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc\105\uffcc" +
    "\106\uffcc\107\uffcc\112\uffcc\113\uffcc\114\uffcc\115\uffcc\116" +
    "\uffcc\001\002\000\106\010\uffc2\015\uffc2\036\uffc2\037\uffc2" +
    "\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\064" +
    "\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2" +
    "\073\uffc2\074\uffc2\075\uffc2\076\uffc2\100\uffc2\101\uffc2\102" +
    "\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\112\uffc2" +
    "\113\uffc2\114\uffc2\115\uffc2\116\uffc2\001\002\000\054\004" +
    "\025\005\021\006\033\007\012\010\027\011\032\012\030" +
    "\013\020\014\122\016\010\017\uffad\027\034\030\022\036" +
    "\014\037\011\052\013\111\117\112\023\115\015\116\031" +
    "\120\026\001\002\000\052\004\025\005\021\006\033\007" +
    "\012\010\027\011\032\012\030\013\020\014\122\016\010" +
    "\027\034\030\022\036\014\037\011\052\013\111\117\112" +
    "\023\115\015\116\031\120\026\001\002\000\010\020\112" +
    "\024\uff91\054\367\001\002\000\052\004\025\005\021\006" +
    "\033\007\012\010\027\011\032\012\030\013\020\014\122" +
    "\016\010\027\034\030\022\036\014\037\011\052\013\111" +
    "\117\112\023\115\015\116\031\120\026\001\002\000\004" +
    "\022\uff8e\001\002\000\004\022\372\001\002\000\106\010" +
    "\uffbf\015\uffbf\036\uffbf\037\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf\067" +
    "\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf" +
    "\076\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105" +
    "\uffbf\106\uffbf\107\uffbf\112\uffbf\113\uffbf\114\uffbf\115\uffbf" +
    "\116\uffbf\001\002\000\004\017\374\001\002\000\004\022" +
    "\375\001\002\000\106\010\uffbe\015\uffbe\036\uffbe\037\uffbe" +
    "\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\064" +
    "\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe" +
    "\073\uffbe\074\uffbe\075\uffbe\076\uffbe\100\uffbe\101\uffbe\102" +
    "\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\112\uffbe" +
    "\113\uffbe\114\uffbe\115\uffbe\116\uffbe\001\002\000\004\022" +
    "\u0100\001\002\000\106\010\uffc4\015\uffc4\036\uffc4\037\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\064" +
    "\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4" +
    "\073\uffc4\074\uffc4\075\uffc4\076\uffc4\100\uffc4\101\uffc4\102" +
    "\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\112\uffc4" +
    "\113\uffc4\114\uffc4\115\uffc4\116\uffc4\001\002\000\106\010" +
    "\uffc3\015\uffc3\036\uffc3\037\uffc3\055\uffc3\056\uffc3\057\uffc3" +
    "\060\uffc3\061\uffc3\062\uffc3\064\uffc3\065\uffc3\066\uffc3\067" +
    "\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3" +
    "\076\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105" +
    "\uffc3\106\uffc3\107\uffc3\112\uffc3\113\uffc3\114\uffc3\115\uffc3" +
    "\116\uffc3\001\002\000\046\004\025\005\021\006\033\007" +
    "\012\010\027\011\032\012\030\013\020\016\010\027\034" +
    "\030\022\036\014\037\011\052\013\112\023\115\015\116" +
    "\031\120\026\001\002\000\050\017\u0103\026\052\027\051" +
    "\030\042\031\050\032\045\033\053\036\040\037\037\042" +
    "\046\043\044\044\043\045\036\046\056\047\055\050\057" +
    "\051\041\053\047\117\054\001\002\000\004\014\u0104\001" +
    "\002\000\102\010\274\015\uffce\036\264\037\261\055\207" +
    "\056\214\057\213\060\210\061\216\062\217\064\ufff9\065" +
    "\136\066\132\067\134\070\135\071\251\072\260\073\247" +
    "\074\133\075\272\076\270\100\275\101\306\102\271\103" +
    "\253\104\302\105\252\112\256\113\266\114\304\115\255" +
    "\116\263\001\002\000\004\015\u0106\001\002\000\106\010" +
    "\uffa5\015\uffa5\036\uffa5\037\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\062\uffa5\064\uffa5\065\uffa5\066\uffa5\067" +
    "\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5" +
    "\076\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105" +
    "\uffa5\106\uffa5\107\uffa5\112\uffa5\113\uffa5\114\uffa5\115\uffa5" +
    "\116\uffa5\001\002\000\046\004\025\005\021\006\033\007" +
    "\012\010\027\011\032\012\030\013\020\016\010\027\034" +
    "\030\022\036\014\037\011\052\013\112\023\115\015\116" +
    "\031\120\026\001\002\000\050\017\u0109\026\052\027\051" +
    "\030\042\031\050\032\045\033\053\036\040\037\037\042" +
    "\046\043\044\044\043\045\036\046\056\047\055\050\057" +
    "\051\041\053\047\117\054\001\002\000\004\014\u010a\001" +
    "\002\000\102\010\274\015\uffce\036\264\037\261\055\207" +
    "\056\214\057\213\060\210\061\216\062\217\064\ufff9\065" +
    "\136\066\132\067\134\070\135\071\251\072\260\073\247" +
    "\074\133\075\272\076\270\100\275\101\306\102\271\103" +
    "\253\104\302\105\252\112\256\113\266\114\304\115\255" +
    "\116\263\001\002\000\004\015\u010c\001\002\000\110\010" +
    "\uffa6\015\uffa6\036\uffa6\037\uffa6\055\uffa6\056\uffa6\057\uffa6" +
    "\060\uffa6\061\uffa6\062\uffa6\064\uffa6\065\uffa6\066\uffa6\067" +
    "\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6" +
    "\076\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6\103\uffa6\104" +
    "\uffa6\105\uffa6\106\uffa6\107\uffa6\112\uffa6\113\uffa6\114\uffa6" +
    "\115\uffa6\116\uffa6\001\002\000\046\004\025\005\021\006" +
    "\033\007\012\010\027\011\032\012\030\013\020\016\010" +
    "\027\034\030\022\036\014\037\011\052\013\112\023\115" +
    "\015\116\031\120\026\001\002\000\050\023\u010f\026\052" +
    "\027\051\030\042\031\050\032\045\033\053\036\040\037" +
    "\037\042\046\043\044\044\043\045\036\046\056\047\055" +
    "\050\057\051\041\053\047\117\054\001\002\000\046\004" +
    "\025\005\021\006\033\007\012\010\027\011\032\012\030" +
    "\013\020\016\010\027\034\030\022\036\014\037\011\052" +
    "\013\112\023\115\015\116\031\120\026\001\002\000\050" +
    "\017\u0111\026\052\027\051\030\042\031\050\032\045\033" +
    "\053\036\040\037\037\042\046\043\044\044\043\045\036" +
    "\046\056\047\055\050\057\051\041\053\047\117\054\001" +
    "\002\000\004\022\u0112\001\002\000\106\010\uffc6\015\uffc6" +
    "\036\uffc6\037\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6" +
    "\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\100" +
    "\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6" +
    "\107\uffc6\112\uffc6\113\uffc6\114\uffc6\115\uffc6\116\uffc6\001" +
    "\002\000\006\017\uffaf\022\uffaf\001\002\000\054\004\025" +
    "\005\021\006\033\007\012\010\027\011\032\012\030\013" +
    "\020\014\122\016\010\017\uffad\027\034\030\022\036\014" +
    "\037\011\052\013\111\117\112\023\115\015\116\031\120" +
    "\026\001\002\000\004\017\u0116\001\002\000\004\022\u0117" +
    "\001\002\000\106\010\uffbc\015\uffbc\036\uffbc\037\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\064\uffbc" +
    "\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073" +
    "\uffbc\074\uffbc\075\uffbc\076\uffbc\100\uffbc\101\uffbc\102\uffbc" +
    "\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\112\uffbc\113" +
    "\uffbc\114\uffbc\115\uffbc\116\uffbc\001\002\000\006\014\u0119" +
    "\076\u011a\001\002\000\102\010\274\015\uffce\036\264\037" +
    "\261\055\207\056\214\057\213\060\210\061\216\062\217" +
    "\064\ufff9\065\136\066\132\067\134\070\135\071\251\072" +
    "\260\073\247\074\133\075\272\076\270\100\275\101\306" +
    "\102\271\103\253\104\302\105\252\112\256\113\266\114" +
    "\304\115\255\116\263\001\002\000\004\016\u011b\001\002" +
    "\000\046\004\025\005\021\006\033\007\012\010\027\011" +
    "\032\012\030\013\020\016\010\027\034\030\022\036\014" +
    "\037\011\052\013\112\023\115\015\116\031\120\026\001" +
    "\002\000\050\017\u011d\026\052\027\051\030\042\031\050" +
    "\032\045\033\053\036\040\037\037\042\046\043\044\044" +
    "\043\045\036\046\056\047\055\050\057\051\041\053\047" +
    "\117\054\001\002\000\004\014\u011e\001\002\000\102\010" +
    "\274\015\uffce\036\264\037\261\055\207\056\214\057\213" +
    "\060\210\061\216\062\217\064\ufff9\065\136\066\132\067" +
    "\134\070\135\071\251\072\260\073\247\074\133\075\272" +
    "\076\270\100\275\101\306\102\271\103\253\104\302\105" +
    "\252\112\256\113\266\114\304\115\255\116\263\001\002" +
    "\000\004\015\u0120\001\002\000\110\010\uffa7\015\uffa7\036" +
    "\uffa7\037\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\062\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071" +
    "\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7" +
    "\100\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\106" +
    "\uffa7\107\uffa7\112\uffa7\113\uffa7\114\uffa7\115\uffa7\116\uffa7" +
    "\001\002\000\004\015\u0122\001\002\000\106\010\uffa9\015" +
    "\uffa9\036\uffa9\037\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070" +
    "\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9" +
    "\100\uffa9\101\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\106" +
    "\uffa9\107\uffa9\112\uffa9\113\uffa9\114\uffa9\115\uffa9\116\uffa9" +
    "\001\002\000\006\017\uffae\022\uffae\001\002\000\046\004" +
    "\025\005\021\006\033\007\012\010\027\011\032\012\030" +
    "\013\020\016\010\027\034\030\022\036\014\037\011\052" +
    "\013\112\023\115\015\116\031\120\026\001\002\000\050" +
    "\017\u0126\026\052\027\051\030\042\031\050\032\045\033" +
    "\053\036\040\037\037\042\046\043\044\044\043\045\036" +
    "\046\056\047\055\050\057\051\041\053\047\117\054\001" +
    "\002\000\004\022\u0127\001\002\000\106\010\uffc9\015\uffc9" +
    "\036\uffc9\037\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061" +
    "\uffc9\062\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9" +
    "\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\100" +
    "\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9" +
    "\107\uffc9\112\uffc9\113\uffc9\114\uffc9\115\uffc9\116\uffc9\001" +
    "\002\000\046\004\025\005\021\006\033\007\012\010\027" +
    "\011\032\012\030\013\020\016\010\027\034\030\022\036" +
    "\014\037\011\052\013\112\023\115\015\116\031\120\026" +
    "\001\002\000\050\017\u012a\026\052\027\051\030\042\031" +
    "\050\032\045\033\053\036\040\037\037\042\046\043\044" +
    "\044\043\045\036\046\056\047\055\050\057\051\041\053" +
    "\047\117\054\001\002\000\004\022\u012b\001\002\000\106" +
    "\010\uffc7\015\uffc7\036\uffc7\037\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\064\uffc7\065\uffc7\066\uffc7" +
    "\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075" +
    "\uffc7\076\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7" +
    "\105\uffc7\106\uffc7\107\uffc7\112\uffc7\113\uffc7\114\uffc7\115" +
    "\uffc7\116\uffc7\001\002\000\054\004\025\005\021\006\033" +
    "\007\012\010\027\011\032\012\030\013\020\014\122\016" +
    "\010\017\uffad\027\034\030\022\036\014\037\011\052\013" +
    "\111\117\112\023\115\015\116\031\120\026\001\002\000" +
    "\004\017\u012e\001\002\000\004\022\u012f\001\002\000\106" +
    "\010\uffbd\015\uffbd\036\uffbd\037\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075" +
    "\uffbd\076\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd" +
    "\105\uffbd\106\uffbd\107\uffbd\112\uffbd\113\uffbd\114\uffbd\115" +
    "\uffbd\116\uffbd\001\002\000\102\010\274\015\uffce\036\264" +
    "\037\261\055\207\056\214\057\213\060\210\061\216\062" +
    "\217\064\ufff9\065\136\066\132\067\134\070\135\071\251" +
    "\072\260\073\247\074\133\075\272\076\270\100\275\101" +
    "\306\102\271\103\253\104\302\105\252\112\256\113\266" +
    "\114\304\115\255\116\263\001\002\000\004\015\u0132\001" +
    "\002\000\004\102\u0133\001\002\000\004\016\u0134\001\002" +
    "\000\046\004\025\005\021\006\033\007\012\010\027\011" +
    "\032\012\030\013\020\016\010\027\034\030\022\036\014" +
    "\037\011\052\013\112\023\115\015\116\031\120\026\001" +
    "\002\000\050\017\u0136\026\052\027\051\030\042\031\050" +
    "\032\045\033\053\036\040\037\037\042\046\043\044\044" +
    "\043\045\036\046\056\047\055\050\057\051\041\053\047" +
    "\117\054\001\002\000\004\022\u0137\001\002\000\106\010" +
    "\uffa4\015\uffa4\036\uffa4\037\uffa4\055\uffa4\056\uffa4\057\uffa4" +
    "\060\uffa4\061\uffa4\062\uffa4\064\uffa4\065\uffa4\066\uffa4\067" +
    "\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4" +
    "\076\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105" +
    "\uffa4\106\uffa4\107\uffa4\112\uffa4\113\uffa4\114\uffa4\115\uffa4" +
    "\116\uffa4\001\002\000\046\004\025\005\021\006\033\007" +
    "\012\010\027\011\032\012\030\013\020\016\010\027\034" +
    "\030\022\036\014\037\011\052\013\112\023\115\015\116" +
    "\031\120\026\001\002\000\050\017\u013a\026\052\027\051" +
    "\030\042\031\050\032\045\033\053\036\040\037\037\042" +
    "\046\043\044\044\043\045\036\046\056\047\055\050\057" +
    "\051\041\053\047\117\054\001\002\000\004\014\u013b\001" +
    "\002\000\010\015\uff9d\106\u013c\107\u013d\001\002\000\046" +
    "\004\025\005\021\006\033\007\012\010\027\011\032\012" +
    "\030\013\020\016\010\027\034\030\022\036\014\037\011" +
    "\052\013\112\023\115\015\116\031\120\026\001\002\000" +
    "\004\025\u0143\001\002\000\004\015\u0142\001\002\000\010" +
    "\015\uff9c\106\u013c\107\u013d\001\002\000\010\015\uff9a\106" +
    "\uff9a\107\uff9a\001\002\000\010\015\uff9b\106\uff9b\107\uff9b" +
    "\001\002\000\106\010\uff9e\015\uff9e\036\uff9e\037\uff9e\055" +
    "\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\064\uff9e" +
    "\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073" +
    "\uff9e\074\uff9e\075\uff9e\076\uff9e\100\uff9e\101\uff9e\102\uff9e" +
    "\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\112\uff9e\113" +
    "\uff9e\114\uff9e\115\uff9e\116\uff9e\001\002\000\106\010\274" +
    "\015\uffce\036\264\037\261\055\207\056\214\057\213\060" +
    "\210\061\216\062\217\064\ufff9\065\136\066\132\067\134" +
    "\070\135\071\251\072\260\073\247\074\133\075\272\076" +
    "\270\100\275\101\306\102\271\103\253\104\302\105\252" +
    "\106\uffce\107\uffce\112\256\113\266\114\304\115\255\116" +
    "\263\001\002\000\010\015\uff98\106\uff98\107\uff98\001\002" +
    "\000\050\025\u0146\026\052\027\051\030\042\031\050\032" +
    "\045\033\053\036\040\037\037\042\046\043\044\044\043" +
    "\045\036\046\056\047\055\050\057\051\041\053\047\117" +
    "\054\001\002\000\106\010\274\015\uffce\036\264\037\261" +
    "\055\207\056\214\057\213\060\210\061\216\062\217\064" +
    "\ufff9\065\136\066\132\067\134\070\135\071\251\072\260" +
    "\073\247\074\133\075\272\076\270\100\275\101\306\102" +
    "\271\103\253\104\302\105\252\106\uffce\107\uffce\112\256" +
    "\113\266\114\304\115\255\116\263\001\002\000\010\015" +
    "\uff99\106\uff99\107\uff99\001\002\000\046\004\025\005\021" +
    "\006\033\007\012\010\027\011\032\012\030\013\020\016" +
    "\010\027\034\030\022\036\014\037\011\052\013\112\023" +
    "\115\015\116\031\120\026\001\002\000\050\017\u014a\026" +
    "\052\027\051\030\042\031\050\032\045\033\053\036\040" +
    "\037\037\042\046\043\044\044\043\045\036\046\056\047" +
    "\055\050\057\051\041\053\047\117\054\001\002\000\004" +
    "\022\u014b\001\002\000\106\010\uffca\015\uffca\036\uffca\037" +
    "\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca" +
    "\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072" +
    "\uffca\073\uffca\074\uffca\075\uffca\076\uffca\100\uffca\101\uffca" +
    "\102\uffca\103\uffca\104\uffca\105\uffca\106\uffca\107\uffca\112" +
    "\uffca\113\uffca\114\uffca\115\uffca\116\uffca\001\002\000\006" +
    "\022\u014d\023\334\001\002\000\106\010\uffc0\015\uffc0\036" +
    "\uffc0\037\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071" +
    "\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\100\uffc0" +
    "\101\uffc0\102\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107" +
    "\uffc0\112\uffc0\113\uffc0\114\uffc0\115\uffc0\116\uffc0\001\002" +
    "\000\004\017\u014f\001\002\000\004\022\u0150\001\002\000" +
    "\106\010\uffc8\015\uffc8\036\uffc8\037\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8" +
    "\075\uffc8\076\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104" +
    "\uffc8\105\uffc8\106\uffc8\107\uffc8\112\uffc8\113\uffc8\114\uffc8" +
    "\115\uffc8\116\uffc8\001\002\000\106\010\uffba\015\uffba\036" +
    "\uffba\037\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba" +
    "\062\uffba\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071" +
    "\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\100\uffba" +
    "\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\107" +
    "\uffba\112\uffba\113\uffba\114\uffba\115\uffba\116\uffba\001\002" +
    "\000\006\017\uffdc\023\uffdc\001\002\000\004\010\332\001" +
    "\002\000\010\017\uffda\020\337\023\uffda\001\002\000\010" +
    "\017\uffd9\020\337\023\uffd9\001\002\000\004\021\u016a\001" +
    "\002\000\006\010\u0162\020\u0161\001\002\000\006\022\u0160" +
    "\023\334\001\002\000\014\016\u015a\020\uffdf\022\uffdf\023" +
    "\uffdf\054\uffdf\001\002\000\024\010\236\017\uffde\023\uffde" +
    "\062\241\065\136\066\132\067\134\070\135\074\133\001" +
    "\002\000\006\017\u015c\023\243\001\002\000\004\014\u015d" +
    "\001\002\000\102\010\274\015\uffce\036\264\037\261\055" +
    "\207\056\214\057\213\060\210\061\216\062\217\064\ufff9" +
    "\065\136\066\132\067\134\070\135\071\251\072\260\073" +
    "\247\074\133\075\272\076\270\100\275\101\306\102\271" +
    "\103\253\104\302\105\252\112\256\113\266\114\304\115" +
    "\255\116\263\001\002\000\004\015\u015f\001\002\000\036" +
    "\010\uffe9\015\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061" +
    "\uffe9\062\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9" +
    "\074\uffe9\001\002\000\036\010\uffea\015\uffea\055\uffea\056" +
    "\uffea\057\uffea\060\uffea\061\uffea\062\uffea\064\uffea\065\uffea" +
    "\066\uffea\067\uffea\070\uffea\074\uffea\001\002\000\004\021" +
    "\u0169\001\002\000\004\016\u0163\001\002\000\024\010\236" +
    "\017\uffde\023\uffde\062\241\065\136\066\132\067\134\070" +
    "\135\074\133\001\002\000\006\017\u0165\023\243\001\002" +
    "\000\004\014\u0166\001\002\000\102\010\274\015\uffce\036" +
    "\264\037\261\055\207\056\214\057\213\060\210\061\216" +
    "\062\217\064\ufff9\065\136\066\132\067\134\070\135\071" +
    "\251\072\260\073\247\074\133\075\272\076\270\100\275" +
    "\101\306\102\271\103\253\104\302\105\252\112\256\113" +
    "\266\114\304\115\255\116\263\001\002\000\004\015\u0168" +
    "\001\002\000\036\010\uffe8\015\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8" +
    "\067\uffe8\070\uffe8\074\uffe8\001\002\000\006\010\uffe6\020" +
    "\uffe6\001\002\000\006\010\uffe5\020\uffe5\001\002\000\110" +
    "\002\uffff\010\uffff\015\uffff\036\uffff\037\uffff\055\uffff\056" +
    "\uffff\057\uffff\060\uffff\061\uffff\062\uffff\064\uffff\065\uffff" +
    "\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff\074" +
    "\uffff\075\uffff\076\uffff\100\uffff\101\uffff\102\uffff\103\uffff" +
    "\104\uffff\105\uffff\106\uffff\107\uffff\112\uffff\113\uffff\114" +
    "\uffff\115\uffff\116\uffff\001\002\000\036\010\uffed\015\uffed" +
    "\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\070\uffed\074\uffed\001\002" +
    "\000\004\014\u016e\001\002\000\036\010\ufff9\015\uffef\055" +
    "\207\056\214\057\213\060\210\061\216\062\217\064\ufff9" +
    "\065\ufff9\066\ufff9\067\ufff9\070\ufff9\074\ufff9\001\002\000" +
    "\004\015\u0170\001\002\000\110\002\ufffe\010\ufffe\015\ufffe" +
    "\036\ufffe\037\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061" +
    "\ufffe\062\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe" +
    "\071\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe\100" +
    "\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe\106\ufffe" +
    "\107\ufffe\112\ufffe\113\ufffe\114\ufffe\115\ufffe\116\ufffe\001" +
    "\002\000\034\010\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\062\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070" +
    "\ufff7\074\ufff7\001\002\000\004\002\001\001\002\000\046" +
    "\004\025\005\021\006\033\007\012\010\027\011\032\012" +
    "\030\013\020\016\010\027\034\030\022\036\014\037\011" +
    "\052\013\112\023\115\015\116\031\120\026\001\002\000" +
    "\050\022\u0175\026\052\027\051\030\042\031\050\032\045" +
    "\033\053\036\040\037\037\042\046\043\044\044\043\045" +
    "\036\046\056\047\055\050\057\051\041\053\047\117\054" +
    "\001\002\000\022\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\064\ufffb\110\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0173\000\010\002\004\003\005\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\214\006\210" +
    "\007\217\010\211\001\001\000\010\046\015\047\016\056" +
    "\023\001\001\000\012\046\015\047\016\055\176\056\177" +
    "\001\001\000\010\046\015\047\016\056\174\001\001\000" +
    "\002\001\001\000\010\046\015\047\016\056\173\001\001" +
    "\000\010\046\015\047\016\056\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\046\015\047\016\056\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\050\147\052\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\046\015\047\016\056\034\001\001\000" +
    "\002\001\001\000\010\046\015\047\016\056\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\046\015\047" +
    "\016\056\077\001\001\000\010\046\015\047\016\056\076" +
    "\001\001\000\010\046\015\047\016\056\075\001\001\000" +
    "\010\046\015\047\016\056\074\001\001\000\010\046\015" +
    "\047\016\056\073\001\001\000\010\046\015\047\016\056" +
    "\072\001\001\000\010\046\015\047\016\056\071\001\001" +
    "\000\010\046\015\047\016\056\070\001\001\000\010\046" +
    "\015\047\016\056\067\001\001\000\010\046\015\047\016" +
    "\056\064\001\001\000\010\046\015\047\016\056\063\001" +
    "\001\000\010\046\015\047\016\056\062\001\001\000\010" +
    "\046\015\047\016\056\061\001\001\000\010\046\015\047" +
    "\016\056\060\001\001\000\010\046\015\047\016\056\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\046\015\047\016\056\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\102\001\001\000\002\001\001\000" +
    "\004\052\105\001\001\000\016\021\120\031\115\032\117" +
    "\046\015\047\016\056\114\001\001\000\002\001\001\000" +
    "\010\046\015\047\016\056\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\046\015\047\016\056\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\021\123\046\015\047\016" +
    "\053\122\056\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\021\126\046\015\047\016\056\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\130\046" +
    "\015\047\016\056\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\143\001\001\000\002" +
    "\001\001\000\016\021\120\031\141\032\117\046\015\047" +
    "\016\056\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\021\120\031" +
    "\152\032\117\046\015\047\016\056\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\046\015\047\016\056\155\001\001\000\002\001\001\000" +
    "\010\046\015\047\016\056\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\046\015\047" +
    "\016\056\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\167\001\001\000\002\001" +
    "\001\000\004\051\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\046\015\047\016\056\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u0170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\230\006\210\007\217\010\227\012" +
    "\225\013\224\014\226\001\001\000\014\005\230\006\210" +
    "\007\217\010\227\014\u016b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\231\001\001\000\002\001\001" +
    "\000\012\011\u0156\015\u0157\016\327\017\330\001\001\000" +
    "\002\001\001\000\012\020\237\025\241\026\236\027\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u0154\001\001\000\004\020\u0152\001\001" +
    "\000\002\001\001\000\006\020\237\027\u0151\001\001\000" +
    "\002\001\001\000\046\005\266\006\210\007\217\010\211" +
    "\020\247\022\300\023\275\024\302\030\245\033\264\034" +
    "\261\035\277\036\256\037\253\042\272\046\304\047\016" +
    "\054\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\u014b\016\327\017\330\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\375\046\015\047\016\056\114\001\001\000\002" +
    "\001\001\000\006\050\147\052\365\001\001\000\002\001" +
    "\001\000\042\005\266\006\210\007\217\010\211\020\247" +
    "\024\361\030\245\033\264\034\261\035\277\036\256\037" +
    "\253\042\272\046\304\047\016\054\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\311\046" +
    "\015\047\016\056\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\046\015\047\016\056" +
    "\314\001\001\000\002\001\001\000\010\046\015\047\016" +
    "\056\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\323\040\322\001\001\000\002" +
    "\001\001\000\010\015\332\016\327\017\330\001\001\000" +
    "\002\001\001\000\012\021\326\046\015\047\016\056\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\334" +
    "\017\330\001\001\000\002\001\001\000\012\021\340\046" +
    "\015\047\016\056\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\046\015\047\016\056" +
    "\342\001\001\000\002\001\001\000\006\030\344\041\345" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\352\046\015\047\016" +
    "\056\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\005\266\006\210\007\217\010\211" +
    "\020\247\022\355\023\275\024\302\030\245\033\264\034" +
    "\261\035\277\036\256\037\253\042\272\046\304\047\016" +
    "\054\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\021\120\031\372\032\117\046\015\047" +
    "\016\056\114\001\001\000\012\021\370\046\015\047\016" +
    "\056\114\001\001\000\002\001\001\000\012\021\367\046" +
    "\015\047\016\056\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\046\015\047\016\056\u0101\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\005\266" +
    "\006\210\007\217\010\211\020\247\022\u0104\023\275\024" +
    "\302\030\245\033\264\034\261\035\277\036\256\037\253" +
    "\042\272\046\304\047\016\054\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\015\047\016\056\u0107" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\005" +
    "\266\006\210\007\217\010\211\020\247\022\u010a\023\275" +
    "\024\302\030\245\033\264\034\261\035\277\036\256\037" +
    "\253\042\272\046\304\047\016\054\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\046\015\047\016\056" +
    "\u010d\001\001\000\002\001\001\000\010\046\015\047\016" +
    "\056\u010f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\021\120\031\u0114" +
    "\032\117\046\015\047\016\056\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\005\266\006\210\007\217\010\211\020\247\022" +
    "\u0120\023\275\024\302\030\245\033\264\034\261\035\277" +
    "\036\256\037\253\042\272\046\304\047\016\054\276\001" +
    "\001\000\002\001\001\000\010\046\015\047\016\056\u011b" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\005" +
    "\266\006\210\007\217\010\211\020\247\022\u011e\023\275" +
    "\024\302\030\245\033\264\034\261\035\277\036\256\037" +
    "\253\042\272\046\304\047\016\054\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\015\047\016\056\u0124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\046\015\047\016\056\u0128\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\021" +
    "\120\031\u012c\032\117\046\015\047\016\056\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\005\266\006\210\007\217\010\211\020\247\022\u0130" +
    "\023\275\024\302\030\245\033\264\034\261\035\277\036" +
    "\256\037\253\042\272\046\304\047\016\054\276\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\046\015\047\016\056\u0134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\046\015\047" +
    "\016\056\u0138\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\043\u013d\044\u013e\045\u013f\001\001\000\010\046" +
    "\015\047\016\056\u0144\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u0140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\005\266\006\210" +
    "\007\217\010\211\020\247\022\u0143\023\275\024\302\030" +
    "\245\033\264\034\261\035\277\036\256\037\253\042\272" +
    "\046\304\047\016\054\276\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\005\266\006\210\007\217\010\211" +
    "\020\247\022\u0146\023\275\024\302\030\245\033\264\034" +
    "\261\035\277\036\256\037\253\042\272\046\304\047\016" +
    "\054\276\001\001\000\002\001\001\000\010\046\015\047" +
    "\016\056\u0148\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\u0153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\237\025\u015a\026\236\027\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\005\266\006\210\007\217\010" +
    "\211\020\247\022\u015d\023\275\024\302\030\245\033\264" +
    "\034\261\035\277\036\256\037\253\042\272\046\304\047" +
    "\016\054\276\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\020\237\025\u0163\026\236\027\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\005\266\006\210\007" +
    "\217\010\211\020\247\022\u0166\023\275\024\302\030\245" +
    "\033\264\034\261\035\277\036\256\037\253\042\272\046" +
    "\304\047\016\054\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\230" +
    "\006\210\007\217\010\227\012\u016e\013\224\014\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\046\015\047\016\056\u0173\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ReporteSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ReporteSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ReporteSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public Nodo padre;
	public String resultado="";
	public int contador = 1;
	
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + s.left +" Columna "+ s.right + ". Identificador " +s.value + " no reconocido." );
		//AnalizadorError tmp = new AnalizadorError();
		//tmp.setColumna(s.right+1);
		//tmp.setLinea(s.left+1);
		//tmp.setValor(s.value+"");
		//tmp.setError("Sintáctico");
        
		//error.add(tmp);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico Fatal en la Linea " + s.left + " Columna "+ s.right +". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ReporteSintactico$actions {




  private final ReporteSintactico parser;

  /** Constructor */
  CUP$ReporteSintactico$actions(ReporteSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ReporteSintactico$do_action_part00000000(
    int                        CUP$ReporteSintactico$act_num,
    java_cup.runtime.lr_parser CUP$ReporteSintactico$parser,
    java.util.Stack            CUP$ReporteSintactico$stack,
    int                        CUP$ReporteSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ReporteSintactico$result;

      /* select the action based on the action number */
      switch (CUP$ReporteSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		RESULT = start_val;
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ReporteSintactico$parser.done_parsing();
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORTS CLASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("INICIO");
            tmp.setNumNodo(parser.contador++);
            if(a != null)
                tmp.addHijo((Nodo)a);
            tmp.addHijo((Nodo) b);
            parser.padre = (Nodo) tmp;
            System.out.println("COLINE OK"); 
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASE ::= MOD class_ id llaveIzquierda CUERPO_CLASE llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		
            Nodo tmp = new Nodo("CLASE");
            tmp.setValor(b);
            tmp.setNumNodo(parser.contador++);
            if(a != null)
                tmp.addHijo((Nodo) a);
            if(c != null)
                tmp.addHijo((Nodo) c);
            RESULT = tmp;

        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CLASE",3, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASE ::= MOD class_ id extends_ id llaveIzquierda CUERPO_CLASE llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		
            Nodo tmp = new Nodo("CLASE");
            tmp.setValor(b);
            Nodo c1 = new Nodo("EXTENDS");
            c1.setValor(c);
            c1.setNumNodo(parser.contador++);
            
            tmp.setNumNodo(parser.contador++);
            if(a != null)
                tmp.addHijo((Nodo) a);
            tmp.addHijo(c1);
            if(d != null)
                tmp.addHijo((Nodo) d);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CLASE",3, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= IMPORTSL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTSL ::= IMPORTSL import_ E puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("IMPORTS");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = a;
                ((Nodo) RESULT).addHijo(tmp);
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTSL",2, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTSL ::= import_ E puntoycoma 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("IMPORTS");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) a);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTSL",2, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MOD",6, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MOD ::= MODIFICADORES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MOD",6, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MODIFICADORES ::= MODIFICADORES MODIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo)RESULT).addHijo((Nodo) b);
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",4, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MODIFICADORES ::= MODIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",4, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MODIFICADOR ::= public_ 
            {
              Object RESULT =null;
		  
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("public");
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MODIFICADOR ::= protected_ 
            {
              Object RESULT =null;
		  
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("protected");
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MODIFICADOR ::= private_ 
            {
              Object RESULT =null;
		  
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("private");
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MODIFICADOR ::= abstract_ 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("abstract");
                    RESULT = tmp;
                 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MODIFICADOR ::= static_ 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("static");
                    RESULT = tmp;
                 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MODIFICADOR ::= final_ 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("final");
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_CLASE ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",8, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_CLASE ::= CUERPO_CLASE_LISTA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",8, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_CLASE_LISTA ::= CUERPO_CLASE_LISTA CUERPO_CLASE_DEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo)RESULT).addHijo((Nodo) b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_LISTA",9, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_CLASE_LISTA ::= CUERPO_CLASE_DEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_LISTA",9, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_CLASE_DEC ::= CLASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_DEC",10, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_CLASE_DEC ::= MOD TIPO DECLARACION_VARIABLES puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		
                            Nodo tmp = new Nodo("DECLARACION_VARIABLES");
                            tmp.setNumNodo(parser.contador++);
                            if(a != null)
                                tmp.addHijo((Nodo) a);
                            tmp.addHijo((Nodo) b);
                            tmp.addHijo((Nodo) c);
                            RESULT = tmp;
                     
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_DEC",10, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_CLASE_DEC ::= MOD TIPO id parIzquierda PARAMETROS_DEC parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                            Nodo tmp = new Nodo("DECLARACION_METODO");
                            tmp.setValor(c);
                            tmp.setNumNodo(parser.contador++);
                            if(a != null)
                                tmp.addHijo((Nodo) a);
                            tmp.addHijo((Nodo) b);
                            if(d != null)
                                tmp.addHijo((Nodo) d);
                            if(e != null)
                                tmp.addHijo((Nodo) e);
                            RESULT = tmp;
                         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_DEC",10, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_CLASE_DEC ::= MOD TIPO DIM_METODO id parIzquierda PARAMETROS_DEC parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                            Nodo tmp = new Nodo("DECLARACION_METODO");
                            tmp.setValor(d);

                            Nodo dim = new Nodo("Dimensiones");
                            dim.setNumNodo(parser.contador++);
                            dim.setValor(c+"");

                            tmp.setNumNodo(parser.contador++);
                            if(a != null)
                                tmp.addHijo((Nodo) a);
                            tmp.addHijo((Nodo) b);
                            tmp.addHijo((Nodo) dim);
                            if(e != null)
                                tmp.addHijo((Nodo) e);
                            if(f != null)
                                tmp.addHijo((Nodo) f);
                            RESULT = tmp;
                         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_DEC",10, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_CLASE_DEC ::= MOD id parIzquierda PARAMETROS_DEC parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                            Nodo tmp = new Nodo("CONSTRUCTOR");
                            tmp.setValor(b);
                            tmp.setNumNodo(parser.contador++);
                            if(a != null)
                                tmp.addHijo((Nodo) a);
                            if(c != null)
                                tmp.addHijo((Nodo) c);
                            if(d != null)
                                tmp.addHijo((Nodo) d);
                            RESULT = tmp;
                         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_DEC",10, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DIM_METODO ::= DIM_METODO corcheteIzquierda corcheteDerecha 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 RESULT = a+1; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DIM_METODO",7, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DIM_METODO ::= corcheteIzquierda corcheteDerecha 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DIM_METODO",7, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_VARIABLES ::= DECLARACION_VARIABLES coma DECLARACION_VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo)RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",11, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_VARIABLES ::= DECLARACION_VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a;  
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",11, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_VARIABLE ::= DECLARACION_VARIABLE_ID igual VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                            Nodo tmp = new Nodo("DECLARACION_VARIABLE");
                            tmp.setNumNodo(parser.contador++);
                            tmp.addHijo((Nodo)a);
                            tmp.addHijo((Nodo)b);
                            RESULT = tmp;
                        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",12, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION_VARIABLE ::= DECLARACION_VARIABLE_ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                            Nodo tmp = new Nodo("DECLARACION_VARIABLE");
                            tmp.setNumNodo(parser.contador++);
                            tmp.addHijo((Nodo)a);
                            RESULT = tmp;
                         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",12, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION_VARIABLE_ID ::= DECLARACION_VARIABLE_ID corcheteIzquierda corcheteDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		  
                                RESULT = a;
                                Nodo tmp = new Nodo("DECLARACION_VARIABLE_ID");
                                tmp.setNumNodo(parser.contador++);
                                ((Nodo)RESULT).addHijo(tmp);
                            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ID",13, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION_VARIABLE_ID ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                                Nodo tmp = new Nodo("DECLARACION_VARIABLE_ID");
                                tmp.setNumNodo(parser.contador++);
                                tmp.setValor(a);
                                RESULT = tmp;
                             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ID",13, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMETROS_DEC ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC",19, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETROS_DEC ::= PARAMETROS_DEC_LISTA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC",19, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETROS_DEC_LISTA ::= PARAMETROS_DEC coma PARAMETRO_DEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC_LISTA",20, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETROS_DEC_LISTA ::= PARAMETRO_DEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC_LISTA",20, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETRO_DEC ::= final_ TIPO DECLARACION_VARIABLE_ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("PARAMETRO_DEC");
                    Nodo a1 = new Nodo("FINAL");
                    a1.setNumNodo(parser.contador++);
                    
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo(a1);
                    tmp.addHijo((Nodo) b);
                    tmp.addHijo((Nodo) c);
                    RESULT = tmp;
                 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO_DEC",21, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETRO_DEC ::= TIPO DECLARACION_VARIABLE_ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("PARAMETRO_DEC");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) a);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO_DEC",21, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= int_ 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("int");
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= double_ 
            {
              Object RESULT =null;
		  
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("double");
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= char_ 
            {
              Object RESULT =null;
		  
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("char");
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= boolean_ 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("boolean");
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= void_ 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("void");
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor(a);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_PRIMITIVO ::= int_ 
            {
              Object RESULT =null;
		
                        Nodo tmp = new Nodo("TIPO");
                        tmp.setNumNodo(parser.contador++);
                        tmp.setValor("int");
                        RESULT = tmp;
                    
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_PRIMITIVO ::= double_ 
            {
              Object RESULT =null;
		  
                        Nodo tmp = new Nodo("TIPO");
                        tmp.setNumNodo(parser.contador++);
                        tmp.setValor("double");
                        RESULT = tmp;
                    
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_PRIMITIVO ::= char_ 
            {
              Object RESULT =null;
		  
                        Nodo tmp = new Nodo("TIPO");
                        tmp.setNumNodo(parser.contador++);
                        tmp.setValor("char");
                        RESULT = tmp;
                    
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_PRIMITIVO ::= boolean_ 
            {
              Object RESULT =null;
		 
                        Nodo tmp = new Nodo("TIPO");
                        tmp.setNumNodo(parser.contador++);
                        tmp.setValor("boolean");
                        RESULT = tmp;
                    
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_PRIMITIVO",43, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES",16, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOQUES ::= BLOQUES_L 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES",16, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUES_L ::= BLOQUES_L BLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES_L",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUES_L ::= BLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("BLOQUE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)a);
                RESULT = tmp; 
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES_L",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOQUE ::= print_ parIzquierda E parDerecha puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		  
                Nodo tmp = new Nodo("PRINT");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
           
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE ::= println_ parIzquierda E parDerecha puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 
                Nodo tmp = new Nodo("PRINTLN");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOQUE ::= printTabla_ parIzquierda parDerecha puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		 
                Nodo tmp = new Nodo("PRINT_TABLA");
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUE ::= read_file_ parIzquierda E parDerecha puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 
                Nodo tmp = new Nodo("READ_FILE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOQUE ::= write_file_ parIzquierda E coma E parDerecha puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 
                Nodo tmp = new Nodo("WRITE_FILE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                tmp.addHijo((Nodo) c);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUE ::= graph_ parIzquierda E coma E parDerecha puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 
                Nodo tmp = new Nodo("GRAPH");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                tmp.addHijo((Nodo) c);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOQUE ::= return_ puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("RETURN");
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOQUE ::= return_ VALOR puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		
                Nodo tmp = new Nodo("RETURN");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQUE ::= break_ puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		
                Nodo tmp = new Nodo("BREAK");
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BLOQUE ::= continue_ puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("CONTINUE");
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BLOQUE ::= TIPO DECLARACION_VARIABLES puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("DECLARACION_VARIABLES");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) a);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BLOQUE ::= id igual VALOR puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("ASIGNACION");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);

                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BLOQUE ::= id parIzquierda PARAMETROS parDerecha puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 
                Nodo tmp = new Nodo("LLAMADA_METODO");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);

                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                if(b != null)
                    tmp.addHijo((Nodo) b);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BLOQUE ::= this_ parIzquierda PARAMETROS parDerecha puntoycoma 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 
                Nodo tmp = new Nodo("LLAMADA_CONSTRUCTOR");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("this");
                if(b != null)
                    tmp.addHijo((Nodo) b);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BLOQUE ::= super_ parIzquierda PARAMETROS parDerecha puntoycoma 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 
                Nodo tmp = new Nodo("LLAMADA_CONSTRUCTOR");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("super");
                if(b != null)
                    tmp.addHijo((Nodo) b);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BLOQUE ::= CLASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BLOQUE ::= UNARIO puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BLOQUE ::= IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BLOQUE ::= WHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BLOQUE ::= DO_WHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		RESULT = a;
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BLOQUE ::= FOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BLOQUE ::= SWITCH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BLOQUE ::= ACCESO_OBJETO puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BLOQUE ::= ACCESO_OBJETO igual VALOR puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                    Nodo tmp = new Nodo("ASIGNACION_OBJETO");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo) a);
                    tmp.addHijo((Nodo) b);
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BLOQUE ::= ASIGNA_ARREGLO puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // UNARIO ::= id masmas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                Nodo tmp = new Nodo("UNARIO");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);
                Nodo x1 = new Nodo("OPERADOR");
                x1.setNumNodo(parser.contador++);
                x1.setValor("++");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                tmp.addHijo(x1);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",22, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // UNARIO ::= id menosmenos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("UNARIO");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);
                Nodo x1 = new Nodo("OPERADOR");
                x1.setNumNodo(parser.contador++);
                x1.setValor("--");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                tmp.addHijo(x1);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",22, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // UNARIO ::= masmas id 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("UNARIO");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);
                Nodo x1 = new Nodo("OPERADOR");
                x1.setNumNodo(parser.contador++);
                x1.setValor("++");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(x1);
                tmp.addHijo(a1);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",22, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // UNARIO ::= menosmenos id 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("UNARIO");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);
                Nodo x1 = new Nodo("OPERADOR");
                x1.setNumNodo(parser.contador++);
                x1.setValor("--");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(x1);
                tmp.addHijo(a1);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",22, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAMETROS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",23, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARAMETROS ::= PARAMETRO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",23, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMETRO ::= PARAMETRO coma VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",24, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAMETRO ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",24, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IF ::= IF_LISTA else_ llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
            Nodo tmp = new Nodo("IF");
            Nodo b1 = new Nodo("ELSE");
            b1.setNumNodo(parser.contador++);
            if(c != null)
                b1.addHijo((Nodo) c);
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo(b1);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IF",25, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IF ::= IF_LISTA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT = tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IF",25, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IF_LISTA ::= IF_LISTA else_ if_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                    RESULT = a;
                    Nodo tmp = new Nodo("ELSE-IF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo) c);
                    if(d != null){
                        tmp.addHijo((Nodo) d);
                    }
                    ((Nodo)RESULT).addHijo(tmp);
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",26, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IF_LISTA ::= if_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
                    Nodo tmp = new Nodo("IF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo) b);
                    if(c != null){
                        tmp.addHijo((Nodo) c);
                    }
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",26, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // WHILE ::= while_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
                Nodo tmp = new Nodo("WHILE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) a);
                if(b != null)
                    tmp.addHijo((Nodo)b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("WHILE",27, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DO_WHILE ::= do_ llaveIzquierda BLOQUES llaveDerecha while_ parIzquierda E parDerecha puntoycoma 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 
                Nodo tmp = new Nodo("DO_WHILE");
                tmp.setNumNodo(parser.contador++);
                if(a != null)
                    tmp.addHijo((Nodo)a);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",28, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FOR ::= for_ parIzquierda FOR_INIT puntoycoma E puntoycoma FOR_UPDATE parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-10)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
                Nodo tmp = new Nodo("FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)a);
                tmp.addHijo((Nodo) b);
                tmp.addHijo((Nodo) c);
                if(d!= null)
                    tmp.addHijo((Nodo) d);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("FOR",29, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FOR_INIT ::= TIPO DECLARACION_VARIABLES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                    Nodo tmp = new Nodo("FOR_INIT");
                    Nodo a1 = new Nodo("DECLARACION");
                    a1.setNumNodo(parser.contador++);
                    a1.addHijo((Nodo)a);
                    a1.addHijo((Nodo)b);
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo(a1);
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("FOR_INIT",30, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FOR_INIT ::= id igual VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("FOR_INIT");
                Nodo a1 = new Nodo("ASIGNACION");
                Nodo a2 = new Nodo("ID");
                a2.setNumNodo(parser.contador++);
                a2.setValor(a);
                a1.setNumNodo(parser.contador++);
                a1.addHijo(a2);
                a1.addHijo((Nodo)b);
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("FOR_INIT",30, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FOR_UPDATE ::= id igual VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("FOR_UPDATE");
                Nodo a1 = new Nodo("ASIGNACION");
                Nodo a2 = new Nodo("ID");
                a2.setNumNodo(parser.contador++);
                a2.setValor(a);
                a1.setNumNodo(parser.contador++);
                a1.addHijo(a2);
                a1.addHijo((Nodo)b);
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",31, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FOR_UPDATE ::= UNARIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("FOR_UPDATE");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)a);
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",31, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SWITCH ::= switch_ parIzquierda E parDerecha llaveIzquierda CASES llaveDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
            Nodo tmp = new Nodo("SWITCH");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            if(b != null)
                tmp.addHijo((Nodo)b);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",32, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CASES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASES",33, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CASES ::= CASESL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASES",33, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CASESL ::= CASESL CASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASESL",34, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CASESL ::= CASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASESL",34, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CASE ::= case_ E dospuntos BLOQUES 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("CASE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) a);
                if(b != null)
                    tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASE",35, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CASE ::= default_ dospuntos BLOQUES 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                Nodo tmp = new Nodo("DEFAULT");
                tmp.setNumNodo(parser.contador++);
                if(a != null)
                    tmp.addHijo((Nodo) a);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASE",35, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ACCESO_OBJETO ::= ACCESO_OBJETO punto ACCESO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_OBJETO",36, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ACCESO_OBJETO ::= OBJETO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_OBJETO",36, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OBJETO ::= id DIM punto ACCESO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("ACCESO_MIEMBRO");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor(a);
                    if(b != null)
                        tmp.addHijo((Nodo) b);
                    tmp.addHijo((Nodo) c);
                    RESULT = tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("OBJETO",37, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OBJETO ::= this_ punto ACCESO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("ACCESO_MIEMBRO");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("this");
                    tmp.addHijo((Nodo) c);
                    RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("OBJETO",37, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OBJETO ::= super_ punto ACCESO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("ACCESO_MIEMBRO");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("super");
                    tmp.addHijo((Nodo) c);
                    RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("OBJETO",37, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DIM ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DIM",38, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DIM ::= DIMENSION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DIM",38, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ACCESO ::= id DIMENSION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("ID");
            tmp.setNumNodo(parser.contador++);
            tmp.setValor(a);
            if(b != null){
                tmp.addHijo((Nodo) b);
            }
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",39, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ACCESO ::= id parIzquierda PARAMETROS parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
            Nodo tmp = new Nodo("METODO");
            Nodo a1 = new Nodo("ID");
            a1.setNumNodo(parser.contador++);
            a1.setValor(a);
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo(a1);
            if(b != null)
                tmp.addHijo((Nodo)b);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",39, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ASIGNA_ARREGLO ::= id DIMENSION igual VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("ASIGNA_ARREGLO");
            Nodo a1 = new Nodo("ID");
            a1.setNumNodo(parser.contador++);
            a1.setValor(a);
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo(a1);
            if(b!= null)
                tmp.addHijo((Nodo)b);
            tmp.addHijo((Nodo)c);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA_ARREGLO",42, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALOR ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("VALOR",15, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALOR ::= new_ id parIzquierda PARAMETROS parDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
            Nodo tmp = new Nodo("OBJETO");
            tmp.setValor(a);
            tmp.setNumNodo(parser.contador++);
            if(b != null)
                tmp.addHijo((Nodo)b);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("VALOR",15, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALOR ::= new_ TIPO DIMENSION 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("ARREGLO");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            tmp.addHijo((Nodo)b);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("VALOR",15, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALOR ::= llaveIzquierda ARREGLO llaveDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
            Nodo tmp = new Nodo("ARREGLO");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("VALOR",15, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DIMENSION ::= DIMENSION corcheteIzquierda E corcheteDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DIMENSION ::= corcheteIzquierda E corcheteDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                    Nodo tmp = new Nodo("DIMENSION");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo) a);
                    RESULT = tmp;
                 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ARREGLO ::= ARREGLO coma VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",41, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ARREGLO ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",41, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= E mas E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("+");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= E menos E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("-");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= E asterisco E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("*");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= E diagonal E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("/");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E ::= E modulo E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("%");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // E ::= pow_ parIzquierda E coma E parDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
            Nodo tmp = new Nodo("pow");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // E ::= menos E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("-");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);;
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // E ::= mas E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("+");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // E ::= E masmas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("++");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // E ::= E menosmenos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("--");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // E ::= masmas E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("++");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // E ::= menosmenos E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("--");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // E ::= E mayorque E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo(">");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // E ::= E menorque E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("<");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // E ::= E mayorigual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo(">=");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // E ::= E menorigual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("<=");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // E ::= E igualigual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("==");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // E ::= E diferente E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("!=");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // E ::= E instanceof_ E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("instanceof");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // E ::= E and E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("&&");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // E ::= E or E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("||");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // E ::= not E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("!");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // E ::= E xor E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("^");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // E ::= E interrogacion E dospuntos E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("?");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            tmp.addHijo((Nodo) c);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // E ::= parIzquierda E parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // E ::= parIzquierda TIPO_PRIMITIVO parDerecha E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("CASTEO");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // E ::= id DIMENSION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("ACCESO_ARREGLO");
            tmp.setNumNodo(parser.contador++);
            tmp.setValor(a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // E ::= ACCESO_OBJETO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // E ::= this_ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("THIS");
            tmp.setNumNodo(parser.contador++);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // E ::= null_ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("E");
            Nodo r1 = new Nodo("null");
            r1.setNumNodo(parser.contador++);
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) r1);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // E ::= entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("entero");
		r1.setNumNodo(parser.contador++);
		r1.setValor(a);
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // E ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("decimal");
		r1.setNumNodo(parser.contador++);
		r1.setValor(a);
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // E ::= tstring 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("tstring");
		r1.setNumNodo(parser.contador++);
		r1.setValor(a);
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // E ::= tchar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("tchar");
		r1.setNumNodo(parser.contador++);
		r1.setValor(a);
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // E ::= true_ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("boolean");
		r1.setNumNodo(parser.contador++);
		r1.setValor("true");
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // E ::= false_ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("boolean");
		r1.setNumNodo(parser.contador++);
		r1.setValor("false");
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // E ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("id");
		r1.setNumNodo(parser.contador++);
		r1.setValor(a);
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // E ::= id parIzquierda PARAMETROS parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
            Nodo tmp = new Nodo("LLAMADA_METODO");
            tmp.setNumNodo(parser.contador++);
            tmp.setValor(a);
            if(b!= null)
                tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // E ::= read_file_ parIzquierda E parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("READ_FILE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
    
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ReporteSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ReporteSintactico$do_action(
    int                        CUP$ReporteSintactico$act_num,
    java_cup.runtime.lr_parser CUP$ReporteSintactico$parser,
    java.util.Stack            CUP$ReporteSintactico$stack,
    int                        CUP$ReporteSintactico$top)
    throws java.lang.Exception
    {
              return CUP$ReporteSintactico$do_action_part00000000(
                               CUP$ReporteSintactico$act_num,
                               CUP$ReporteSintactico$parser,
                               CUP$ReporteSintactico$stack,
                               CUP$ReporteSintactico$top);
    }
}

}
