
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package reporte;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ReporteSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ReporteSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ReporteSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ReporteSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ReporteSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\004\000\002\005" +
    "\010\000\002\005\012\000\002\003\002\000\002\003\003" +
    "\000\002\004\006\000\002\004\005\000\002\010\002\000" +
    "\002\010\003\000\002\006\004\000\002\006\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\011\002" +
    "\000\002\011\003\000\002\012\004\000\002\012\003\000" +
    "\002\013\003\000\002\013\006\000\002\013\013\000\002" +
    "\014\005\000\002\014\003\000\002\015\005\000\002\015" +
    "\003\000\002\016\005\000\002\016\003\000\002\024\002" +
    "\000\002\024\003\000\002\025\005\000\002\025\003\000" +
    "\002\026\005\000\002\026\004\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\021\002\000\002\021\003" +
    "\000\002\022\004\000\002\022\003\000\002\023\007\000" +
    "\002\023\007\000\002\023\004\000\002\023\005\000\002" +
    "\023\004\000\002\023\004\000\002\023\005\000\002\023" +
    "\006\000\002\023\007\000\002\023\004\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\004\000\002\023\004\000\002" +
    "\027\004\000\002\027\004\000\002\027\004\000\002\027" +
    "\004\000\002\030\002\000\002\030\003\000\002\031\005" +
    "\000\002\031\003\000\002\032\007\000\002\032\003\000" +
    "\002\033\013\000\002\033\011\000\002\034\011\000\002" +
    "\035\013\000\002\036\015\000\002\037\004\000\002\037" +
    "\005\000\002\040\005\000\002\040\003\000\002\041\011" +
    "\000\002\042\002\000\002\042\003\000\002\043\004\000" +
    "\002\043\003\000\002\044\006\000\002\044\005\000\002" +
    "\045\005\000\002\045\005\000\002\046\003\000\002\046" +
    "\006\000\002\051\006\000\002\020\003\000\002\020\007" +
    "\000\002\020\005\000\002\020\005\000\002\047\006\000" +
    "\002\047\005\000\002\050\005\000\002\050\003\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\004\000\002\052\004" +
    "\000\002\052\004\000\002\052\004\000\002\052\004\000" +
    "\002\052\004\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\052\004" +
    "\000\002\052\005\000\002\052\007\000\002\052\005\000" +
    "\002\052\004\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\022\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065" +
    "\ufffd\066\ufffd\070\ufffd\113\007\001\002\000\022\061\ufffc" +
    "\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\070\ufffc\113" +
    "\u011d\001\002\000\004\002\u011c\001\002\000\020\061\141" +
    "\062\146\063\145\064\142\065\150\066\151\070\ufff9\001" +
    "\002\000\034\004\016\005\024\006\020\007\013\010\010" +
    "\012\012\013\014\016\021\027\022\030\015\036\023\037" +
    "\017\052\011\001\002\000\064\015\uff7c\016\100\017\uff7c" +
    "\020\102\021\uff7c\022\uff7c\023\uff7c\025\uff7c\026\uff7c\027" +
    "\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\036\uff7c\037\uff7c" +
    "\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050" +
    "\uff7c\051\uff7c\053\uff7c\001\002\000\034\004\016\005\024" +
    "\006\020\007\013\010\010\012\012\013\014\016\021\027" +
    "\022\030\015\036\023\037\017\052\011\001\002\000\060" +
    "\015\uff7e\017\uff7e\021\uff7e\022\uff7e\023\uff7e\025\uff7e\026" +
    "\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\036\uff7e" +
    "\037\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047" +
    "\uff7e\050\uff7e\051\uff7e\053\uff7e\001\002\000\060\015\uff81" +
    "\017\uff81\021\uff81\022\uff81\023\uff81\025\uff81\026\uff81\027" +
    "\uff81\030\uff81\031\uff81\032\uff81\033\uff81\036\uff81\037\uff81" +
    "\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050" +
    "\uff81\051\uff81\053\uff81\001\002\000\060\015\uff7d\017\uff7d" +
    "\021\uff7d\022\uff7d\023\uff7d\025\uff7d\026\uff7d\027\uff7d\030" +
    "\uff7d\031\uff7d\032\uff7d\033\uff7d\036\uff7d\037\uff7d\042\uff7d" +
    "\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051" +
    "\uff7d\053\uff7d\001\002\000\034\004\016\005\024\006\020" +
    "\007\013\010\010\012\012\013\014\016\021\027\022\030" +
    "\015\036\023\037\017\052\011\001\002\000\060\015\uff80" +
    "\017\uff80\021\uff80\022\uff80\023\uff80\025\uff80\026\uff80\027" +
    "\uff80\030\uff80\031\uff80\032\uff80\033\uff80\036\uff80\037\uff80" +
    "\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050" +
    "\uff80\051\uff80\053\uff80\001\002\000\034\004\016\005\024" +
    "\006\020\007\013\010\010\012\012\013\014\016\021\027" +
    "\022\030\015\036\023\037\017\052\011\001\002\000\060" +
    "\015\uff82\017\uff82\021\uff82\022\uff82\023\uff82\025\uff82\026" +
    "\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\036\uff82" +
    "\037\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047" +
    "\uff82\050\uff82\051\uff82\053\uff82\001\002\000\034\004\016" +
    "\005\024\006\020\007\013\010\010\012\012\013\014\016" +
    "\021\027\022\030\015\036\023\037\017\052\011\001\002" +
    "\000\034\004\016\005\024\006\020\007\013\010\010\012" +
    "\012\013\014\016\021\027\022\030\015\036\023\037\017" +
    "\052\011\001\002\000\034\004\016\005\024\006\020\007" +
    "\013\010\010\012\012\013\014\016\021\027\022\030\015" +
    "\036\023\037\017\052\011\001\002\000\060\015\uff7f\017" +
    "\uff7f\021\uff7f\022\uff7f\023\uff7f\025\uff7f\026\uff7f\027\uff7f" +
    "\030\uff7f\031\uff7f\032\uff7f\033\uff7f\036\uff7f\037\uff7f\042" +
    "\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f" +
    "\051\uff7f\053\uff7f\001\002\000\046\022\046\026\042\027" +
    "\041\030\032\031\040\032\035\033\043\036\030\037\027" +
    "\042\036\043\034\044\033\045\026\046\045\047\044\050" +
    "\047\051\031\053\037\001\002\000\034\004\016\005\024" +
    "\006\020\007\013\010\010\012\012\013\014\016\021\027" +
    "\022\030\015\036\023\037\017\052\011\001\002\000\060" +
    "\015\uff92\017\uff92\021\uff92\022\uff92\023\uff92\025\uff92\026" +
    "\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\036\uff92" +
    "\037\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047" +
    "\uff92\050\uff92\051\uff92\053\uff92\001\002\000\060\015\uff93" +
    "\017\uff93\021\uff93\022\uff93\023\uff93\025\uff93\026\uff93\027" +
    "\uff93\030\uff93\031\uff93\032\uff93\033\uff93\036\uff93\037\uff93" +
    "\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050" +
    "\uff93\051\uff93\053\uff93\001\002\000\034\004\016\005\024" +
    "\006\020\007\013\010\010\012\012\013\014\016\021\027" +
    "\022\030\015\036\023\037\017\052\011\001\002\000\034" +
    "\004\016\005\024\006\020\007\013\010\010\012\012\013" +
    "\014\016\021\027\022\030\015\036\023\037\017\052\011" +
    "\001\002\000\034\004\016\005\024\006\020\007\013\010" +
    "\010\012\012\013\014\016\021\027\022\030\015\036\023" +
    "\037\017\052\011\001\002\000\034\004\016\005\024\006" +
    "\020\007\013\010\010\012\012\013\014\016\021\027\022" +
    "\030\015\036\023\037\017\052\011\001\002\000\034\004" +
    "\016\005\024\006\020\007\013\010\010\012\012\013\014" +
    "\016\021\027\022\030\015\036\023\037\017\052\011\001" +
    "\002\000\034\004\016\005\024\006\020\007\013\010\010" +
    "\012\012\013\014\016\021\027\022\030\015\036\023\037" +
    "\017\052\011\001\002\000\034\004\016\005\024\006\020" +
    "\007\013\010\010\012\012\013\014\016\021\027\022\030" +
    "\015\036\023\037\017\052\011\001\002\000\034\004\016" +
    "\005\024\006\020\007\013\010\010\012\012\013\014\016" +
    "\021\027\022\030\015\036\023\037\017\052\011\001\002" +
    "\000\034\004\016\005\024\006\020\007\013\010\010\012" +
    "\012\013\014\016\021\027\022\030\015\036\023\037\017" +
    "\052\011\001\002\000\034\004\016\005\024\006\020\007" +
    "\013\010\010\012\012\013\014\016\021\027\022\030\015" +
    "\036\023\037\017\052\011\001\002\000\034\004\016\005" +
    "\024\006\020\007\013\010\010\012\012\013\014\016\021" +
    "\027\022\030\015\036\023\037\017\052\011\001\002\000" +
    "\034\004\016\005\024\006\020\007\013\010\010\012\012" +
    "\013\014\016\021\027\022\030\015\036\023\037\017\052" +
    "\011\001\002\000\034\004\016\005\024\006\020\007\013" +
    "\010\010\012\012\013\014\016\021\027\022\030\015\036" +
    "\023\037\017\052\011\001\002\000\022\061\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\065\ufffa\066\ufffa\070\ufffa\113\ufffa\001" +
    "\002\000\034\004\016\005\024\006\020\007\013\010\010" +
    "\012\012\013\014\016\021\027\022\030\015\036\023\037" +
    "\017\052\011\001\002\000\060\015\uff89\017\uff89\021\uff89" +
    "\022\uff89\023\uff89\025\uff89\026\uff89\027\041\030\032\031" +
    "\040\032\035\033\043\036\030\037\027\042\036\043\034" +
    "\044\033\045\026\046\045\047\044\050\uff89\051\uff89\053" +
    "\037\001\002\000\060\015\uff8b\017\uff8b\021\uff8b\022\uff8b" +
    "\023\uff8b\025\uff8b\026\uff8b\027\041\030\032\031\040\032" +
    "\035\033\043\036\030\037\027\042\036\043\034\044\033" +
    "\045\026\046\uff8b\047\044\050\uff8b\051\uff8b\053\uff8b\001" +
    "\002\000\060\015\uff8a\017\uff8a\021\uff8a\022\uff8a\023\uff8a" +
    "\025\uff8a\026\uff8a\027\041\030\032\031\040\032\035\033" +
    "\043\036\030\037\027\042\036\043\034\044\033\045\026" +
    "\046\uff8a\047\uff8a\050\uff8a\051\uff8a\053\uff8a\001\002\000" +
    "\060\015\uff96\017\uff96\021\uff96\022\uff96\023\uff96\025\uff96" +
    "\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\036" +
    "\030\037\027\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96" +
    "\047\uff96\050\uff96\051\uff96\053\uff96\001\002\000\046\025" +
    "\055\026\042\027\041\030\032\031\040\032\035\033\043" +
    "\036\030\037\027\042\036\043\034\044\033\045\026\046" +
    "\045\047\044\050\047\051\031\053\037\001\002\000\034" +
    "\004\016\005\024\006\020\007\013\010\010\012\012\013" +
    "\014\016\021\027\022\030\015\036\023\037\017\052\011" +
    "\001\002\000\060\015\uff85\017\uff85\021\uff85\022\uff85\023" +
    "\uff85\025\uff85\026\042\027\041\030\032\031\040\032\035" +
    "\033\043\036\030\037\027\042\036\043\034\044\033\045" +
    "\026\046\045\047\044\050\047\051\031\053\037\001\002" +
    "\000\060\015\uff9a\017\uff9a\021\uff9a\022\uff9a\023\uff9a\025" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\031\040\032\035\033\043" +
    "\036\030\037\027\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\053\uff9a\001\002\000\060" +
    "\015\uff98\017\uff98\021\uff98\022\uff98\023\uff98\025\uff98\026" +
    "\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\036\030" +
    "\037\027\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047" +
    "\uff98\050\uff98\051\uff98\053\uff98\001\002\000\060\015\uff86" +
    "\017\uff86\021\uff86\022\uff86\023\uff86\025\uff86\026\uff86\027" +
    "\041\030\032\031\040\032\035\033\043\036\030\037\027" +
    "\042\036\043\034\044\033\045\026\046\045\047\044\050" +
    "\uff86\051\uff86\053\uff86\001\002\000\060\015\uff8f\017\uff8f" +
    "\021\uff8f\022\uff8f\023\uff8f\025\uff8f\026\uff8f\027\041\030" +
    "\032\031\040\032\035\033\043\036\030\037\027\042\uff8f" +
    "\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051" +
    "\uff8f\053\uff8f\001\002\000\060\015\uff97\017\uff97\021\uff97" +
    "\022\uff97\023\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\032\uff97\033\uff97\036\030\037\027\042\uff97\043\uff97" +
    "\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\053" +
    "\uff97\001\002\000\060\015\uff8e\017\uff8e\021\uff8e\022\uff8e" +
    "\023\uff8e\025\uff8e\026\uff8e\027\041\030\032\031\040\032" +
    "\035\033\043\036\030\037\027\042\uff8e\043\uff8e\044\uff8e" +
    "\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\053\uff8e\001" +
    "\002\000\060\015\uff8d\017\uff8d\021\uff8d\022\uff8d\023\uff8d" +
    "\025\uff8d\026\uff8d\027\041\030\032\031\040\032\035\033" +
    "\043\036\030\037\027\042\uff8d\043\uff8d\044\uff8d\045\uff8d" +
    "\046\uff8d\047\uff8d\050\uff8d\051\uff8d\053\uff8d\001\002\000" +
    "\060\015\uff99\017\uff99\021\uff99\022\uff99\023\uff99\025\uff99" +
    "\026\uff99\027\uff99\030\uff99\031\040\032\035\033\043\036" +
    "\030\037\027\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99" +
    "\047\uff99\050\uff99\051\uff99\053\uff99\001\002\000\060\015" +
    "\uff88\017\uff88\021\uff88\022\uff88\023\uff88\025\uff88\026\uff88" +
    "\027\041\030\032\031\040\032\035\033\043\036\030\037" +
    "\027\042\036\043\034\044\033\045\026\046\045\047\044" +
    "\050\047\051\uff88\053\037\001\002\000\060\015\uff8c\017" +
    "\uff8c\021\uff8c\022\uff8c\023\uff8c\025\uff8c\026\uff8c\027\041" +
    "\030\032\031\040\032\035\033\043\036\030\037\027\042" +
    "\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c" +
    "\051\uff8c\053\uff8c\001\002\000\060\015\uff91\017\uff91\021" +
    "\uff91\022\uff91\023\uff91\025\uff91\026\uff91\027\uff91\030\uff91" +
    "\031\uff91\032\uff91\033\uff91\036\uff91\037\uff91\042\uff91\043" +
    "\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91" +
    "\053\uff91\001\002\000\060\015\uff94\017\uff94\021\uff94\022" +
    "\uff94\023\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94" +
    "\032\uff94\033\uff94\036\uff94\037\uff94\042\uff94\043\uff94\044" +
    "\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\053\uff94" +
    "\001\002\000\046\017\074\026\042\027\041\030\032\031" +
    "\040\032\035\033\043\036\030\037\027\042\036\043\034" +
    "\044\033\045\026\046\045\047\044\050\047\051\031\053" +
    "\037\001\002\000\060\015\uff84\017\uff84\021\uff84\022\uff84" +
    "\023\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032" +
    "\uff84\033\uff84\036\uff84\037\uff84\042\uff84\043\uff84\044\uff84" +
    "\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84\053\uff84\001" +
    "\002\000\060\015\uff90\017\uff90\021\uff90\022\uff90\023\uff90" +
    "\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033" +
    "\uff90\036\uff90\037\uff90\042\uff90\043\uff90\044\uff90\045\uff90" +
    "\046\uff90\047\uff90\050\uff90\051\uff90\053\uff90\001\002\000" +
    "\060\015\uff95\017\uff95\021\uff95\022\uff95\023\uff95\025\uff95" +
    "\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\036" +
    "\uff95\037\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\047\uff95\050\uff95\051\uff95\053\uff95\001\002\000\060\015" +
    "\uff87\017\uff87\021\uff87\022\uff87\023\uff87\025\uff87\026\uff87" +
    "\027\041\030\032\031\040\032\035\033\043\036\030\037" +
    "\027\042\036\043\034\044\033\045\026\046\045\047\044" +
    "\050\uff87\051\uff87\053\uff87\001\002\000\042\004\016\005" +
    "\024\006\020\007\013\010\010\012\012\013\014\014\115" +
    "\016\021\017\uffbd\027\022\030\015\036\023\037\017\052" +
    "\011\114\112\001\002\000\062\015\uff83\017\uff83\020\105" +
    "\021\uff83\022\uff83\023\uff83\025\uff83\026\uff83\027\uff83\030" +
    "\uff83\031\uff83\032\uff83\033\uff83\036\uff83\037\uff83\042\uff83" +
    "\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051" +
    "\uff83\053\uff83\001\002\000\034\004\016\005\024\006\020" +
    "\007\013\010\010\012\012\013\014\016\021\027\022\030" +
    "\015\036\023\037\017\052\011\001\002\000\046\021\104" +
    "\026\042\027\041\030\032\031\040\032\035\033\043\036" +
    "\030\037\027\042\036\043\034\044\033\045\026\046\045" +
    "\047\044\050\047\051\031\053\037\001\002\000\064\015" +
    "\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\036" +
    "\uff9d\037\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\053\uff9d\054\uff9d\001\002\000" +
    "\034\004\016\005\024\006\020\007\013\010\010\012\012" +
    "\013\014\016\021\027\022\030\015\036\023\037\017\052" +
    "\011\001\002\000\046\021\107\026\042\027\041\030\032" +
    "\031\040\032\035\033\043\036\030\037\027\042\036\043" +
    "\034\044\033\045\026\046\045\047\044\050\047\051\031" +
    "\053\037\001\002\000\064\015\uff9e\017\uff9e\020\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\033\uff9e\036\uff9e\037\uff9e\042\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e" +
    "\053\uff9e\054\uff9e\001\002\000\054\015\uffa2\017\uffa2\022" +
    "\uffa2\023\uffa2\026\042\027\041\030\032\031\040\032\035" +
    "\033\043\036\030\037\027\042\036\043\034\044\033\045" +
    "\026\046\045\047\044\050\047\051\031\053\037\001\002" +
    "\000\004\017\140\001\002\000\016\010\133\071\131\072" +
    "\125\073\126\074\130\077\127\001\002\000\006\017\uffbc" +
    "\023\123\001\002\000\006\017\uffba\023\uffba\001\002\000" +
    "\040\004\016\005\024\006\020\007\013\010\010\012\012" +
    "\013\014\014\115\016\021\027\022\030\015\036\023\037" +
    "\017\052\011\114\112\001\002\000\006\015\121\023\120" +
    "\001\002\000\006\015\uff9b\023\uff9b\001\002\000\040\004" +
    "\016\005\024\006\020\007\013\010\010\012\012\013\014" +
    "\014\115\016\021\027\022\030\015\036\023\037\017\052" +
    "\011\114\112\001\002\000\012\015\uff9f\017\uff9f\022\uff9f" +
    "\023\uff9f\001\002\000\006\015\uff9c\023\uff9c\001\002\000" +
    "\040\004\016\005\024\006\020\007\013\010\010\012\012" +
    "\013\014\014\115\016\021\027\022\030\015\036\023\037" +
    "\017\052\011\114\112\001\002\000\006\017\uffbb\023\uffbb" +
    "\001\002\000\006\010\uffdb\020\uffdb\001\002\000\006\010" +
    "\uffda\020\uffda\001\002\000\006\010\uffd8\020\uffd8\001\002" +
    "\000\006\010\uffd9\020\uffd9\001\002\000\006\010\uffdc\020" +
    "\uffdc\001\002\000\004\020\102\001\002\000\006\016\134" +
    "\020\uffd7\001\002\000\042\004\016\005\024\006\020\007" +
    "\013\010\010\012\012\013\014\014\115\016\021\017\uffbd" +
    "\027\022\030\015\036\023\037\017\052\011\114\112\001" +
    "\002\000\004\017\136\001\002\000\012\015\uffa1\017\uffa1" +
    "\022\uffa1\023\uffa1\001\002\000\014\015\uffa0\017\uffa0\020" +
    "\105\022\uffa0\023\uffa0\001\002\000\060\015\uff7b\017\uff7b" +
    "\021\uff7b\022\uff7b\023\uff7b\025\uff7b\026\uff7b\027\uff7b\030" +
    "\uff7b\031\uff7b\032\uff7b\033\uff7b\036\uff7b\037\uff7b\042\uff7b" +
    "\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\051" +
    "\uff7b\053\uff7b\001\002\000\034\010\ufff5\061\ufff5\062\ufff5" +
    "\063\ufff5\064\ufff5\065\ufff5\066\ufff5\070\ufff5\071\ufff5\072" +
    "\ufff5\073\ufff5\074\ufff5\077\ufff5\001\002\000\034\010\ufff2" +
    "\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\070" +
    "\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\077\ufff2\001\002" +
    "\000\034\010\ufff8\061\141\062\146\063\145\064\142\065" +
    "\150\066\151\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8" +
    "\077\ufff8\001\002\000\004\070\153\001\002\000\034\010" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3" +
    "\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\077\ufff3\001" +
    "\002\000\034\010\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074" +
    "\ufff4\077\ufff4\001\002\000\004\002\000\001\002\000\034" +
    "\010\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\077\ufff1" +
    "\001\002\000\034\010\ufff0\061\ufff0\062\ufff0\063\ufff0\064" +
    "\ufff0\065\ufff0\066\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0" +
    "\074\ufff0\077\ufff0\001\002\000\034\010\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\070\ufff6\071\ufff6" +
    "\072\ufff6\073\ufff6\074\ufff6\077\ufff6\001\002\000\004\010" +
    "\154\001\002\000\006\014\156\067\155\001\002\000\004" +
    "\010\u0117\001\002\000\036\010\ufff9\015\uffef\061\141\062" +
    "\146\063\145\064\142\065\150\066\151\070\ufff9\071\ufff9" +
    "\072\ufff9\073\ufff9\074\ufff9\077\ufff9\001\002\000\036\010" +
    "\ufff9\015\uffee\061\141\062\146\063\145\064\142\065\150" +
    "\066\151\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\077" +
    "\ufff9\001\002\000\004\015\u0115\001\002\000\036\010\uffec" +
    "\015\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066" +
    "\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\077\uffec" +
    "\001\002\000\020\010\165\070\153\071\131\072\125\073" +
    "\126\074\130\077\127\001\002\000\036\010\uffeb\015\uffeb" +
    "\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\070" +
    "\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\077\uffeb\001\002" +
    "\000\004\010\171\001\002\000\004\010\uffd7\001\002\000" +
    "\006\022\uffe7\023\uffe7\001\002\000\012\020\u010f\022\uffe5" +
    "\023\uffe5\054\u0113\001\002\000\006\022\u0112\023\324\001" +
    "\002\000\014\016\172\020\uffe3\022\uffe3\023\uffe3\054\uffe3" +
    "\001\002\000\024\010\165\017\uffe2\023\uffe2\066\176\071" +
    "\131\072\125\073\126\074\130\077\127\001\002\000\006" +
    "\017\uffdf\023\uffdf\001\002\000\006\017\uffe1\023\uffe1\001" +
    "\002\000\004\010\323\001\002\000\016\010\165\071\131" +
    "\072\125\073\126\074\130\077\127\001\002\000\006\017" +
    "\201\023\200\001\002\000\020\010\165\066\176\071\131" +
    "\072\125\073\126\074\130\077\127\001\002\000\004\014" +
    "\202\001\002\000\050\010\223\015\uffd6\036\207\037\204" +
    "\071\131\072\125\073\126\074\130\075\203\076\226\077" +
    "\127\100\234\101\230\103\216\104\220\105\221\106\205" +
    "\107\214\110\215\001\002\000\004\016\u0108\001\002\000" +
    "\004\010\u0107\001\002\000\004\014\377\001\002\000\054" +
    "\010\uffc7\015\uffc7\036\uffc7\037\uffc7\071\uffc7\072\uffc7\073" +
    "\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7" +
    "\103\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111" +
    "\uffc7\112\uffc7\001\002\000\004\010\376\001\002\000\006" +
    "\022\374\024\373\001\002\000\054\010\uffc4\015\uffc4\036" +
    "\uffc4\037\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4" +
    "\076\uffc4\077\uffc4\100\uffc4\101\uffc4\103\uffc4\104\uffc4\105" +
    "\uffc4\106\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\001\002" +
    "\000\054\010\uffc8\015\uffc8\036\uffc8\037\uffc8\071\uffc8\072" +
    "\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8" +
    "\101\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110" +
    "\uffc8\111\uffc8\112\uffc8\001\002\000\054\010\uffd3\015\uffd3" +
    "\036\uffd3\037\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075" +
    "\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3\103\uffd3\104\uffd3" +
    "\105\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3\112\uffd3\001" +
    "\002\000\004\016\350\001\002\000\004\016\330\001\002" +
    "\000\004\022\327\001\002\000\004\010\323\001\002\000" +
    "\004\022\321\001\002\000\004\016\313\001\002\000\054" +
    "\010\uffc6\015\uffc6\036\uffc6\037\uffc6\071\uffc6\072\uffc6\073" +
    "\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6" +
    "\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\111" +
    "\uffc6\112\uffc6\001\002\000\020\010\uffd7\016\272\020\102" +
    "\024\271\036\273\037\276\054\275\001\002\000\004\022" +
    "\270\001\002\000\004\022\267\001\002\000\004\016\263" +
    "\001\002\000\054\010\223\015\uffd5\036\207\037\204\071" +
    "\131\072\125\073\126\074\130\075\203\076\226\077\127" +
    "\100\234\101\230\103\216\104\220\105\221\106\205\107" +
    "\214\110\215\111\uffd5\112\uffd5\001\002\000\004\016\254" +
    "\001\002\000\054\010\uffc5\015\uffc5\036\uffc5\037\uffc5\071" +
    "\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5" +
    "\100\uffc5\101\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\107" +
    "\uffc5\110\uffc5\111\uffc5\112\uffc5\001\002\000\056\010\uffb8" +
    "\015\uffb8\036\uffb8\037\uffb8\071\uffb8\072\uffb8\073\uffb8\074" +
    "\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8\102\241" +
    "\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8\111" +
    "\uffb8\112\uffb8\001\002\000\004\015\240\001\002\000\042" +
    "\004\016\005\024\006\020\007\013\010\010\012\012\013" +
    "\014\014\115\016\021\022\236\027\022\030\015\036\023" +
    "\037\017\052\011\114\112\001\002\000\004\022\237\001" +
    "\002\000\054\010\uffd0\015\uffd0\036\uffd0\037\uffd0\071\uffd0" +
    "\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100" +
    "\uffd0\101\uffd0\103\uffd0\104\uffd0\105\uffd0\106\uffd0\107\uffd0" +
    "\110\uffd0\111\uffd0\112\uffd0\001\002\000\054\010\uffcf\015" +
    "\uffcf\036\uffcf\037\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf" +
    "\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\103\uffcf\104" +
    "\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf\112\uffcf" +
    "\001\002\000\036\010\uffe9\015\uffe9\061\uffe9\062\uffe9\063" +
    "\uffe9\064\uffe9\065\uffe9\066\uffe9\070\uffe9\071\uffe9\072\uffe9" +
    "\073\uffe9\074\uffe9\077\uffe9\001\002\000\006\014\242\101" +
    "\243\001\002\000\050\010\223\015\uffd6\036\207\037\204" +
    "\071\131\072\125\073\126\074\130\075\203\076\226\077" +
    "\127\100\234\101\230\103\216\104\220\105\221\106\205" +
    "\107\214\110\215\001\002\000\004\016\244\001\002\000" +
    "\034\004\016\005\024\006\020\007\013\010\010\012\012" +
    "\013\014\016\021\027\022\030\015\036\023\037\017\052" +
    "\011\001\002\000\046\017\246\026\042\027\041\030\032" +
    "\031\040\032\035\033\043\036\030\037\027\042\036\043" +
    "\034\044\033\045\026\046\045\047\044\050\047\051\031" +
    "\053\037\001\002\000\004\014\247\001\002\000\050\010" +
    "\223\015\uffd6\036\207\037\204\071\131\072\125\073\126" +
    "\074\130\075\203\076\226\077\127\100\234\101\230\103" +
    "\216\104\220\105\221\106\205\107\214\110\215\001\002" +
    "\000\004\015\251\001\002\000\056\010\uffb7\015\uffb7\036" +
    "\uffb7\037\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7" +
    "\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104" +
    "\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112\uffb7" +
    "\001\002\000\004\015\253\001\002\000\054\010\uffb9\015" +
    "\uffb9\036\uffb9\037\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\103\uffb9\104" +
    "\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\112\uffb9" +
    "\001\002\000\034\004\016\005\024\006\020\007\013\010" +
    "\010\012\012\013\014\016\021\027\022\030\015\036\023" +
    "\037\017\052\011\001\002\000\046\017\256\026\042\027" +
    "\041\030\032\031\040\032\035\033\043\036\030\037\027" +
    "\042\036\043\034\044\033\045\026\046\045\047\044\050" +
    "\047\051\031\053\037\001\002\000\004\014\257\001\002" +
    "\000\050\010\223\015\uffd6\036\207\037\204\071\131\072" +
    "\125\073\126\074\130\075\203\076\226\077\127\100\234" +
    "\101\230\103\216\104\220\105\221\106\205\107\214\110" +
    "\215\001\002\000\004\015\261\001\002\000\056\010\uffb6" +
    "\015\uffb6\036\uffb6\037\uffb6\071\uffb6\072\uffb6\073\uffb6\074" +
    "\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6" +
    "\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6\111" +
    "\uffb6\112\uffb6\001\002\000\054\010\uffd4\015\uffd4\036\uffd4" +
    "\037\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076" +
    "\uffd4\077\uffd4\100\uffd4\101\uffd4\103\uffd4\104\uffd4\105\uffd4" +
    "\106\uffd4\107\uffd4\110\uffd4\111\uffd4\112\uffd4\001\002\000" +
    "\034\004\016\005\024\006\020\007\013\010\010\012\012" +
    "\013\014\016\021\027\022\030\015\036\023\037\017\052" +
    "\011\001\002\000\046\017\265\026\042\027\041\030\032" +
    "\031\040\032\035\033\043\036\030\037\027\042\036\043" +
    "\034\044\033\045\026\046\045\047\044\050\047\051\031" +
    "\053\037\001\002\000\004\022\266\001\002\000\054\010" +
    "\uffd1\015\uffd1\036\uffd1\037\uffd1\071\uffd1\072\uffd1\073\uffd1" +
    "\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\103" +
    "\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1" +
    "\112\uffd1\001\002\000\054\010\uffc2\015\uffc2\036\uffc2\037" +
    "\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2" +
    "\077\uffc2\100\uffc2\101\uffc2\103\uffc2\104\uffc2\105\uffc2\106" +
    "\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\001\002\000\054" +
    "\010\uffc9\015\uffc9\036\uffc9\037\uffc9\071\uffc9\072\uffc9\073" +
    "\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9" +
    "\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9\110\uffc9\111" +
    "\uffc9\112\uffc9\001\002\000\004\010\307\001\002\000\042" +
    "\004\016\005\024\006\020\007\013\010\010\012\012\013" +
    "\014\014\115\016\021\017\uffbd\027\022\030\015\036\023" +
    "\037\017\052\011\114\112\001\002\000\006\017\uffc1\022" +
    "\uffc1\001\002\000\006\020\105\054\301\001\002\000\040" +
    "\004\016\005\024\006\020\007\013\010\010\012\012\013" +
    "\014\014\115\016\021\027\022\030\015\036\023\037\017" +
    "\052\011\114\112\001\002\000\006\017\uffc0\022\uffc0\001" +
    "\002\000\004\022\300\001\002\000\054\010\uffcb\015\uffcb" +
    "\036\uffcb\037\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075" +
    "\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\103\uffcb\104\uffcb" +
    "\105\uffcb\106\uffcb\107\uffcb\110\uffcb\111\uffcb\112\uffcb\001" +
    "\002\000\040\004\016\005\024\006\020\007\013\010\010" +
    "\012\012\013\014\014\115\016\021\027\022\030\015\036" +
    "\023\037\017\052\011\114\112\001\002\000\004\022\uffa3" +
    "\001\002\000\004\017\304\001\002\000\004\022\305\001" +
    "\002\000\054\010\uffca\015\uffca\036\uffca\037\uffca\071\uffca" +
    "\072\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100" +
    "\uffca\101\uffca\103\uffca\104\uffca\105\uffca\106\uffca\107\uffca" +
    "\110\uffca\111\uffca\112\uffca\001\002\000\006\022\uffa6\024" +
    "\uffa6\001\002\000\010\016\310\022\uffa5\024\uffa5\001\002" +
    "\000\042\004\016\005\024\006\020\007\013\010\010\012" +
    "\012\013\014\014\115\016\021\017\uffbd\027\022\030\015" +
    "\036\023\037\017\052\011\114\112\001\002\000\004\017" +
    "\312\001\002\000\006\022\uffa4\024\uffa4\001\002\000\034" +
    "\004\016\005\024\006\020\007\013\010\010\012\012\013" +
    "\014\016\021\027\022\030\015\036\023\037\017\052\011" +
    "\001\002\000\046\017\315\026\042\027\041\030\032\031" +
    "\040\032\035\033\043\036\030\037\027\042\036\043\034" +
    "\044\033\045\026\046\045\047\044\050\047\051\031\053" +
    "\037\001\002\000\004\014\316\001\002\000\050\010\223" +
    "\015\uffd6\036\207\037\204\071\131\072\125\073\126\074" +
    "\130\075\203\076\226\077\127\100\234\101\230\103\216" +
    "\104\220\105\221\106\205\107\214\110\215\001\002\000" +
    "\004\015\320\001\002\000\054\010\uffb5\015\uffb5\036\uffb5" +
    "\037\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076" +
    "\uffb5\077\uffb5\100\uffb5\101\uffb5\103\uffb5\104\uffb5\105\uffb5" +
    "\106\uffb5\107\uffb5\110\uffb5\111\uffb5\112\uffb5\001\002\000" +
    "\054\010\uffcd\015\uffcd\036\uffcd\037\uffcd\071\uffcd\072\uffcd" +
    "\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101" +
    "\uffcd\103\uffcd\104\uffcd\105\uffcd\106\uffcd\107\uffcd\110\uffcd" +
    "\111\uffcd\112\uffcd\001\002\000\006\022\325\023\324\001" +
    "\002\000\014\017\uffe3\020\uffe3\022\uffe3\023\uffe3\054\uffe3" +
    "\001\002\000\004\010\323\001\002\000\054\010\uffcc\015" +
    "\uffcc\036\uffcc\037\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc" +
    "\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\103\uffcc\104" +
    "\uffcc\105\uffcc\106\uffcc\107\uffcc\110\uffcc\111\uffcc\112\uffcc" +
    "\001\002\000\006\022\uffe8\023\uffe8\001\002\000\054\010" +
    "\uffce\015\uffce\036\uffce\037\uffce\071\uffce\072\uffce\073\uffce" +
    "\074\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce\103" +
    "\uffce\104\uffce\105\uffce\106\uffce\107\uffce\110\uffce\111\uffce" +
    "\112\uffce\001\002\000\034\004\016\005\024\006\020\007" +
    "\013\010\010\012\012\013\014\016\021\027\022\030\015" +
    "\036\023\037\017\052\011\001\002\000\046\017\332\026" +
    "\042\027\041\030\032\031\040\032\035\033\043\036\030" +
    "\037\027\042\036\043\034\044\033\045\026\046\045\047" +
    "\044\050\047\051\031\053\037\001\002\000\004\014\333" +
    "\001\002\000\010\015\uffad\111\334\112\335\001\002\000" +
    "\034\004\016\005\024\006\020\007\013\010\010\012\012" +
    "\013\014\016\021\027\022\030\015\036\023\037\017\052" +
    "\011\001\002\000\004\025\343\001\002\000\004\015\342" +
    "\001\002\000\010\015\uffac\111\334\112\335\001\002\000" +
    "\010\015\uffaa\111\uffaa\112\uffaa\001\002\000\010\015\uffab" +
    "\111\uffab\112\uffab\001\002\000\054\010\uffae\015\uffae\036" +
    "\uffae\037\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae" +
    "\076\uffae\077\uffae\100\uffae\101\uffae\103\uffae\104\uffae\105" +
    "\uffae\106\uffae\107\uffae\110\uffae\111\uffae\112\uffae\001\002" +
    "\000\054\010\223\015\uffd6\036\207\037\204\071\131\072" +
    "\125\073\126\074\130\075\203\076\226\077\127\100\234" +
    "\101\230\103\216\104\220\105\221\106\205\107\214\110" +
    "\215\111\uffd6\112\uffd6\001\002\000\010\015\uffa8\111\uffa8" +
    "\112\uffa8\001\002\000\046\025\346\026\042\027\041\030" +
    "\032\031\040\032\035\033\043\036\030\037\027\042\036" +
    "\043\034\044\033\045\026\046\045\047\044\050\047\051" +
    "\031\053\037\001\002\000\054\010\223\015\uffd6\036\207" +
    "\037\204\071\131\072\125\073\126\074\130\075\203\076" +
    "\226\077\127\100\234\101\230\103\216\104\220\105\221" +
    "\106\205\107\214\110\215\111\uffd6\112\uffd6\001\002\000" +
    "\010\015\uffa9\111\uffa9\112\uffa9\001\002\000\016\010\353" +
    "\071\131\072\125\073\126\074\130\077\127\001\002\000" +
    "\004\022\357\001\002\000\004\010\323\001\002\000\006" +
    "\010\uffd7\054\354\001\002\000\040\004\016\005\024\006" +
    "\020\007\013\010\010\012\012\013\014\014\115\016\021" +
    "\027\022\030\015\036\023\037\017\052\011\114\112\001" +
    "\002\000\004\022\uffb1\001\002\000\006\022\uffb2\023\324" +
    "\001\002\000\034\004\016\005\024\006\020\007\013\010" +
    "\010\012\012\013\014\016\021\027\022\030\015\036\023" +
    "\037\017\052\011\001\002\000\046\022\361\026\042\027" +
    "\041\030\032\031\040\032\035\033\043\036\030\037\027" +
    "\042\036\043\034\044\033\045\026\046\045\047\044\050" +
    "\047\051\031\053\037\001\002\000\010\010\364\036\207" +
    "\037\204\001\002\000\004\017\uffaf\001\002\000\004\017" +
    "\367\001\002\000\010\036\273\037\276\054\365\001\002" +
    "\000\040\004\016\005\024\006\020\007\013\010\010\012" +
    "\012\013\014\014\115\016\021\027\022\030\015\036\023" +
    "\037\017\052\011\114\112\001\002\000\004\017\uffb0\001" +
    "\002\000\004\014\370\001\002\000\050\010\223\015\uffd6" +
    "\036\207\037\204\071\131\072\125\073\126\074\130\075" +
    "\203\076\226\077\127\100\234\101\230\103\216\104\220" +
    "\105\221\106\205\107\214\110\215\001\002\000\004\015" +
    "\372\001\002\000\054\010\uffb3\015\uffb3\036\uffb3\037\uffb3" +
    "\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077" +
    "\uffb3\100\uffb3\101\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3" +
    "\107\uffb3\110\uffb3\111\uffb3\112\uffb3\001\002\000\004\010" +
    "\307\001\002\000\054\010\uffc3\015\uffc3\036\uffc3\037\uffc3" +
    "\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077" +
    "\uffc3\100\uffc3\101\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3" +
    "\107\uffc3\110\uffc3\111\uffc3\112\uffc3\001\002\000\006\022" +
    "\uffa7\024\uffa7\001\002\000\006\017\uffbf\022\uffbf\001\002" +
    "\000\050\010\223\015\uffd6\036\207\037\204\071\131\072" +
    "\125\073\126\074\130\075\203\076\226\077\127\100\234" +
    "\101\230\103\216\104\220\105\221\106\205\107\214\110" +
    "\215\001\002\000\004\015\u0101\001\002\000\004\105\u0102" +
    "\001\002\000\004\016\u0103\001\002\000\034\004\016\005" +
    "\024\006\020\007\013\010\010\012\012\013\014\016\021" +
    "\027\022\030\015\036\023\037\017\052\011\001\002\000" +
    "\046\017\u0105\026\042\027\041\030\032\031\040\032\035" +
    "\033\043\036\030\037\027\042\036\043\034\044\033\045" +
    "\026\046\045\047\044\050\047\051\031\053\037\001\002" +
    "\000\004\022\u0106\001\002\000\054\010\uffb4\015\uffb4\036" +
    "\uffb4\037\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4" +
    "\076\uffb4\077\uffb4\100\uffb4\101\uffb4\103\uffb4\104\uffb4\105" +
    "\uffb4\106\uffb4\107\uffb4\110\uffb4\111\uffb4\112\uffb4\001\002" +
    "\000\006\017\uffbe\022\uffbe\001\002\000\034\004\016\005" +
    "\024\006\020\007\013\010\010\012\012\013\014\016\021" +
    "\027\022\030\015\036\023\037\017\052\011\001\002\000" +
    "\046\017\u010a\026\042\027\041\030\032\031\040\032\035" +
    "\033\043\036\030\037\027\042\036\043\034\044\033\045" +
    "\026\046\045\047\044\050\047\051\031\053\037\001\002" +
    "\000\004\022\u010b\001\002\000\054\010\uffd2\015\uffd2\036" +
    "\uffd2\037\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2" +
    "\076\uffd2\077\uffd2\100\uffd2\101\uffd2\103\uffd2\104\uffd2\105" +
    "\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2\001\002" +
    "\000\006\017\uffe0\023\uffe0\001\002\000\004\010\323\001" +
    "\002\000\010\017\uffde\020\u010f\023\uffde\001\002\000\004" +
    "\021\u0110\001\002\000\014\017\uffe4\020\uffe4\022\uffe4\023" +
    "\uffe4\054\uffe4\001\002\000\010\017\uffdd\020\u010f\023\uffdd" +
    "\001\002\000\036\010\uffea\015\uffea\061\uffea\062\uffea\063" +
    "\uffea\064\uffea\065\uffea\066\uffea\070\uffea\071\uffea\072\uffea" +
    "\073\uffea\074\uffea\077\uffea\001\002\000\040\004\016\005" +
    "\024\006\020\007\013\010\010\012\012\013\014\014\115" +
    "\016\021\027\022\030\015\036\023\037\017\052\011\114" +
    "\112\001\002\000\006\022\uffe6\023\uffe6\001\002\000\040" +
    "\002\uffff\010\uffff\015\uffff\061\uffff\062\uffff\063\uffff\064" +
    "\uffff\065\uffff\066\uffff\070\uffff\071\uffff\072\uffff\073\uffff" +
    "\074\uffff\077\uffff\001\002\000\036\010\uffed\015\uffed\061" +
    "\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\070\uffed" +
    "\071\uffed\072\uffed\073\uffed\074\uffed\077\uffed\001\002\000" +
    "\004\014\u0118\001\002\000\036\010\ufff9\015\uffef\061\141" +
    "\062\146\063\145\064\142\065\150\066\151\070\ufff9\071" +
    "\ufff9\072\ufff9\073\ufff9\074\ufff9\077\ufff9\001\002\000\004" +
    "\015\u011a\001\002\000\040\002\ufffe\010\ufffe\015\ufffe\061" +
    "\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\070\ufffe" +
    "\071\ufffe\072\ufffe\073\ufffe\074\ufffe\077\ufffe\001\002\000" +
    "\034\010\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\077" +
    "\ufff7\001\002\000\004\002\001\001\002\000\034\004\016" +
    "\005\024\006\020\007\013\010\010\012\012\013\014\016" +
    "\021\027\022\030\015\036\023\037\017\052\011\001\002" +
    "\000\046\022\u011f\026\042\027\041\030\032\031\040\032" +
    "\035\033\043\036\030\037\027\042\036\043\034\044\033" +
    "\045\026\046\045\047\044\050\047\051\031\053\037\001" +
    "\002\000\022\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\070\ufffb\113\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\010\002\004\003\005\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\146\006\142" +
    "\007\151\010\143\001\001\000\004\052\024\001\001\000" +
    "\004\047\100\001\001\000\004\052\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\075\001\001\000\002\001\001\000\004\052\074\001\001" +
    "\000\002\001\001\000\004\052\072\001\001\000\004\052" +
    "\071\001\001\000\004\052\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\066\001\001\000\004" +
    "\052\065\001\001\000\004\052\064\001\001\000\004\052" +
    "\063\001\001\000\004\052\062\001\001\000\004\052\061" +
    "\001\001\000\004\052\060\001\001\000\004\052\057\001" +
    "\001\000\004\052\056\001\001\000\004\052\053\001\001" +
    "\000\004\052\052\001\001\000\004\052\051\001\001\000" +
    "\004\052\050\001\001\000\002\001\001\000\004\052\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\113" +
    "\030\110\031\112\052\107\001\001\000\002\001\001\000" +
    "\004\052\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\116\050\115\052\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\121\052\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\123\052\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\136\001\001\000\002\001\001\000\012\020\113\030" +
    "\134\031\112\052\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\u011a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\162\006\142\007\151\010\161\011\157\012\156" +
    "\013\160\001\001\000\014\005\162\006\142\007\151\010" +
    "\161\013\u0115\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\163\001\001\000\002\001\001\000\010\014" +
    "\167\015\165\016\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\174\024\176\025\173\026\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u0110\001" +
    "\001\000\004\017\u010c\001\001\000\002\001\001\000\006" +
    "\017\174\026\u010b\001\001\000\002\001\001\000\034\017" +
    "\216\021\232\022\226\023\212\027\223\032\211\033\231" +
    "\034\205\035\221\036\230\041\210\045\207\051\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\321\015\165\016\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\017\216\023\261\027\223\032\211\033\231\034\205\035" +
    "\221\036\230\041\210\045\207\051\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\234\052\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\017\216\021\251\022\226\023\212" +
    "\027\223\032\211\033\231\034\205\035\221\036\230\041" +
    "\210\045\207\051\224\001\001\000\002\001\001\000\004" +
    "\052\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\017\216\021\247\022\226\023\212\027\223\032\211" +
    "\033\231\034\205\035\221\036\230\041\210\045\207\051" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\017\216\021\257" +
    "\022\226\023\212\027\223\032\211\033\231\034\205\035" +
    "\221\036\230\041\210\045\207\051\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\305\001\001\000\012\020\113\030\302\031\112\052\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\276\052\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\301\052\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\113\030\310\031\112\052\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\017\216\021\316\022\226" +
    "\023\212\027\223\032\211\033\231\034\205\035\221\036" +
    "\230\041\210\045\207\051\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\325\016\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\330\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\042\335\043\336\044\337\001\001\000\004\052\344\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\340" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\017\216\021\343\022\226\023\212\027\223" +
    "\032\211\033\231\034\205\035\221\036\230\041\210\045" +
    "\207\051\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\017\216\021\346\022\226\023\212\027\223\032" +
    "\211\033\231\034\205\035\221\036\230\041\210\045\207" +
    "\051\224\001\001\000\002\001\001\000\006\017\351\037" +
    "\350\001\001\000\002\001\001\000\010\014\355\015\165" +
    "\016\166\001\001\000\002\001\001\000\006\020\354\052" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\357\001\001\000\002\001\001\000\006\027\361\040" +
    "\362\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\365\052\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\017\216\021\370\022\226" +
    "\023\212\027\223\032\211\033\231\034\205\035\221\036" +
    "\230\041\210\045\207\051\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\374\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\017\216" +
    "\021\377\022\226\023\212\027\223\032\211\033\231\034" +
    "\205\035\221\036\230\041\210\045\207\051\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\u0103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\u0108\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\u010d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\u0113\052\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\162\006\142\007\151\010\161\011" +
    "\u0118\012\156\013\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\u011d\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ReporteSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ReporteSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ReporteSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public Nodo padre;
	public String resultado="";
	public int contador = 1;
	
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + s.left +" Columna "+ s.right + ". Identificador " +s.value + " no reconocido." );
		//AnalizadorError tmp = new AnalizadorError();
		//tmp.setColumna(s.right+1);
		//tmp.setLinea(s.left+1);
		//tmp.setValor(s.value+"");
		//tmp.setError("Sintáctico");
        
		//error.add(tmp);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico Fatal en la Linea " + s.left + " Columna "+ s.right +". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ReporteSintactico$actions {




  private final ReporteSintactico parser;

  /** Constructor */
  CUP$ReporteSintactico$actions(ReporteSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ReporteSintactico$do_action_part00000000(
    int                        CUP$ReporteSintactico$act_num,
    java_cup.runtime.lr_parser CUP$ReporteSintactico$parser,
    java.util.Stack            CUP$ReporteSintactico$stack,
    int                        CUP$ReporteSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ReporteSintactico$result;

      /* select the action based on the action number */
      switch (CUP$ReporteSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		RESULT = start_val;
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ReporteSintactico$parser.done_parsing();
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORTS CLASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("INICIO");
            tmp.setNumNodo(parser.contador++);
            if(a != null)
                tmp.addHijo((Nodo)a);
            tmp.addHijo((Nodo) b);
            parser.padre = (Nodo) tmp;
            System.out.println("COLINE OK"); 
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASE ::= MOD class_ id llaveIzquierda CUERPO_CLASE llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		
            Nodo tmp = new Nodo("CLASE");
            tmp.setValor(b);
            tmp.setNumNodo(parser.contador++);
            if(a != null)
                tmp.addHijo((Nodo) a);
            if(c != null)
                tmp.addHijo((Nodo) c);
            RESULT = tmp;

        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CLASE",3, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASE ::= MOD class_ id extends_ id llaveIzquierda CUERPO_CLASE llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		
            Nodo tmp = new Nodo("CLASE");
            tmp.setValor(b);
            Nodo c1 = new Nodo("EXTENDS");
            c1.setValor(c);
            c1.setNumNodo(parser.contador++);
            
            tmp.setNumNodo(parser.contador++);
            if(a != null)
                tmp.addHijo((Nodo) a);
            tmp.addHijo(c1);
            if(d != null)
                tmp.addHijo((Nodo) d);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CLASE",3, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= IMPORTSL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTSL ::= IMPORTSL import_ E puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("IMPORTS");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = a;
                ((Nodo) RESULT).addHijo(tmp);
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTSL",2, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTSL ::= import_ E puntoycoma 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("IMPORTS");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) a);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTSL",2, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MOD",6, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MOD ::= MODIFICADORES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MOD",6, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MODIFICADORES ::= MODIFICADORES MODIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo)RESULT).addHijo((Nodo) b);
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",4, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MODIFICADORES ::= MODIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",4, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MODIFICADOR ::= public_ 
            {
              Object RESULT =null;
		  
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("public");
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MODIFICADOR ::= protected_ 
            {
              Object RESULT =null;
		  
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("protected");
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MODIFICADOR ::= private_ 
            {
              Object RESULT =null;
		  
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("private");
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MODIFICADOR ::= abstract_ 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("abstract");
                    RESULT = tmp;
                 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MODIFICADOR ::= static_ 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("static");
                    RESULT = tmp;
                 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MODIFICADOR ::= final_ 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("final");
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_CLASE ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",7, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_CLASE ::= CUERPO_CLASE_LISTA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",7, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_CLASE_LISTA ::= CUERPO_CLASE_LISTA CUERPO_CLASE_DEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo)RESULT).addHijo((Nodo) b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_LISTA",8, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_CLASE_LISTA ::= CUERPO_CLASE_DEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_LISTA",8, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_CLASE_DEC ::= CLASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_DEC",9, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_CLASE_DEC ::= MOD TIPO DECLARACION_VARIABLES puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		
                            Nodo tmp = new Nodo("DECLARACION_VARIABLES");
                            tmp.setNumNodo(parser.contador++);
                            if(a != null)
                                tmp.addHijo((Nodo) a);
                            tmp.addHijo((Nodo) b);
                            tmp.addHijo((Nodo) c);
                            RESULT = tmp;
                     
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_DEC",9, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_CLASE_DEC ::= MOD TIPO id parIzquierda PARAMETROS_DEC parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                            Nodo tmp = new Nodo("DECLARACION_METODO");
                            tmp.setValor(c);
                            tmp.setNumNodo(parser.contador++);
                            if(a != null)
                                tmp.addHijo((Nodo) a);
                            tmp.addHijo((Nodo) b);
                            if(d != null)
                                tmp.addHijo((Nodo) d);
                            if(e != null)
                                tmp.addHijo((Nodo) e);
                            RESULT = tmp;
                         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_DEC",9, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_VARIABLES ::= DECLARACION_VARIABLES coma DECLARACION_VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo)RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",10, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_VARIABLES ::= DECLARACION_VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a;  
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",10, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_VARIABLE ::= DECLARACION_VARIABLE_ID igual VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                            Nodo tmp = new Nodo("DECLARACION_VARIABLE");
                            tmp.setNumNodo(parser.contador++);
                            tmp.addHijo((Nodo)a);
                            tmp.addHijo((Nodo)b);
                            RESULT = tmp;
                        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",11, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_VARIABLE ::= DECLARACION_VARIABLE_ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                            Nodo tmp = new Nodo("DECLARACION_VARIABLE");
                            tmp.setNumNodo(parser.contador++);
                            tmp.addHijo((Nodo)a);
                            RESULT = tmp;
                         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",11, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_VARIABLE_ID ::= DECLARACION_VARIABLE_ID corcheteIzquierda corcheteDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		  
                                RESULT = a;
                                Nodo tmp = new Nodo("DECLARACION_VARIABLE_ID");
                                tmp.setNumNodo(parser.contador++);
                                ((Nodo)RESULT).addHijo(tmp);
                            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ID",12, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_VARIABLE_ID ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                                Nodo tmp = new Nodo("DECLARACION_VARIABLE_ID");
                                tmp.setNumNodo(parser.contador++);
                                tmp.setValor(a);
                                RESULT = tmp;
                             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ID",12, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETROS_DEC ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETROS_DEC ::= PARAMETROS_DEC_LISTA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETROS_DEC_LISTA ::= PARAMETROS_DEC coma PARAMETRO_DEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC_LISTA",19, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETROS_DEC_LISTA ::= PARAMETRO_DEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC_LISTA",19, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMETRO_DEC ::= final_ TIPO DECLARACION_VARIABLE_ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("PARAMETRO_DEC");
                    Nodo a1 = new Nodo("FINAL");
                    a1.setNumNodo(parser.contador++);
                    
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo(a1);
                    tmp.addHijo((Nodo) b);
                    tmp.addHijo((Nodo) c);
                    RESULT = tmp;
                 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO_DEC",20, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETRO_DEC ::= TIPO DECLARACION_VARIABLE_ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("PARAMETRO_DEC");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) a);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO_DEC",20, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= int_ 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("int");
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= double_ 
            {
              Object RESULT =null;
		  
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("double");
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= char_ 
            {
              Object RESULT =null;
		  
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("char");
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= boolean_ 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("boolean");
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= void_ 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("void");
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor(a);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES",15, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUES ::= BLOQUES_L 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES",15, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUES_L ::= BLOQUES_L BLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES_L",16, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUES_L ::= BLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("BLOQUE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)a);
                RESULT = tmp; 
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES_L",16, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE ::= print_ parIzquierda E parDerecha puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		  
                Nodo tmp = new Nodo("PRINT");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
           
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE ::= println_ parIzquierda E parDerecha puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 
                Nodo tmp = new Nodo("PRINTLN");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUE ::= return_ puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("RETURN");
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE ::= return_ VALOR puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		
                Nodo tmp = new Nodo("RETURN");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUE ::= break_ puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		
                Nodo tmp = new Nodo("BREAK");
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOQUE ::= continue_ puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("CONTINUE");
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUE ::= TIPO DECLARACION_VARIABLES puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("DECLARACION_VARIABLES");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) a);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUE ::= id igual VALOR puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("ASIGNACION");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);

                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOQUE ::= id parIzquierda PARAMETROS parDerecha puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 
                Nodo tmp = new Nodo("LLAMADA_METODO");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);

                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                if(b != null)
                    tmp.addHijo((Nodo) b);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE ::= UNARIO puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOQUE ::= IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUE ::= WHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOQUE ::= DO_WHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		RESULT = a;
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUE ::= FOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOQUE ::= SWITCH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOQUE ::= ACCESO_OBJETO puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQUE ::= ASIGNA_ARREGLO puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // UNARIO ::= id masmas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                Nodo tmp = new Nodo("UNARIO");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);
                Nodo x1 = new Nodo("OPERADOR");
                x1.setNumNodo(parser.contador++);
                x1.setValor("++");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                tmp.addHijo(x1);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",21, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // UNARIO ::= id menosmenos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("UNARIO");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);
                Nodo x1 = new Nodo("OPERADOR");
                x1.setNumNodo(parser.contador++);
                x1.setValor("--");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                tmp.addHijo(x1);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",21, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // UNARIO ::= masmas id 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("UNARIO");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);
                Nodo x1 = new Nodo("OPERADOR");
                x1.setNumNodo(parser.contador++);
                x1.setValor("++");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(x1);
                tmp.addHijo(a1);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",21, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // UNARIO ::= menosmenos id 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("UNARIO");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);
                Nodo x1 = new Nodo("OPERADOR");
                x1.setNumNodo(parser.contador++);
                x1.setValor("--");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(x1);
                tmp.addHijo(a1);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",21, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMETROS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAMETROS ::= PARAMETRO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAMETRO ::= PARAMETRO coma VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",23, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMETRO ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",23, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IF ::= IF_LISTA else_ llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
            Nodo tmp = new Nodo("IF");
            Nodo b1 = new Nodo("ELSE");
            b1.setNumNodo(parser.contador++);
            if(c != null)
                b1.addHijo((Nodo) c);
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo(b1);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IF ::= IF_LISTA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT = tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF_LISTA ::= IF_LISTA else_ if_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                    RESULT = a;
                    Nodo tmp = new Nodo("ELSE-IF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo) c);
                    if(d != null){
                        tmp.addHijo((Nodo) d);
                    }
                    ((Nodo)RESULT).addHijo(tmp);
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",25, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF_LISTA ::= if_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
                    Nodo tmp = new Nodo("IF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo) b);
                    if(c != null){
                        tmp.addHijo((Nodo) c);
                    }
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",25, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // WHILE ::= while_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
                Nodo tmp = new Nodo("WHILE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) a);
                if(b != null)
                    tmp.addHijo((Nodo)b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("WHILE",26, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DO_WHILE ::= do_ llaveIzquierda BLOQUES llaveDerecha while_ parIzquierda E parDerecha puntoycoma 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 
                Nodo tmp = new Nodo("DO_WHILE");
                tmp.setNumNodo(parser.contador++);
                if(a != null)
                    tmp.addHijo((Nodo)a);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",27, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FOR ::= for_ parIzquierda FOR_INIT puntoycoma E puntoycoma FOR_UPDATE parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-10)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
                Nodo tmp = new Nodo("FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)a);
                tmp.addHijo((Nodo) b);
                tmp.addHijo((Nodo) c);
                if(d!= null)
                    tmp.addHijo((Nodo) d);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("FOR",28, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FOR_INIT ::= TIPO DECLARACION_VARIABLES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                    Nodo tmp = new Nodo("FOR_INIT");
                    Nodo a1 = new Nodo("DECLARACION");
                    a1.setNumNodo(parser.contador++);
                    a1.addHijo((Nodo)a);
                    a1.addHijo((Nodo)b);
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo(a1);
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("FOR_INIT",29, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FOR_INIT ::= id igual VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("FOR_INIT");
                Nodo a1 = new Nodo("ASIGNACION");
                Nodo a2 = new Nodo("ID");
                a2.setNumNodo(parser.contador++);
                a2.setValor(a);
                a1.setNumNodo(parser.contador++);
                a1.addHijo(a2);
                a1.addHijo((Nodo)b);
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("FOR_INIT",29, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FOR_UPDATE ::= id igual VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("FOR_UPDATE");
                Nodo a1 = new Nodo("ASIGNACION");
                Nodo a2 = new Nodo("ID");
                a2.setNumNodo(parser.contador++);
                a2.setValor(a);
                a1.setNumNodo(parser.contador++);
                a1.addHijo(a2);
                a1.addHijo((Nodo)b);
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",30, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FOR_UPDATE ::= UNARIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("FOR_UPDATE");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)a);
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",30, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SWITCH ::= switch_ parIzquierda E parDerecha llaveIzquierda CASES llaveDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
            Nodo tmp = new Nodo("SWITCH");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            if(b != null)
                tmp.addHijo((Nodo)b);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",31, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CASES ::= CASESL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CASESL ::= CASESL CASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASESL",33, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CASESL ::= CASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASESL",33, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CASE ::= case_ E dospuntos BLOQUES 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("CASE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) a);
                if(b != null)
                    tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASE",34, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CASE ::= default_ dospuntos BLOQUES 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                Nodo tmp = new Nodo("DEFAULT");
                tmp.setNumNodo(parser.contador++);
                if(a != null)
                    tmp.addHijo((Nodo) a);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASE",34, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ACCESO_OBJETO ::= ACCESO_OBJETO punto ACCESO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_OBJETO",35, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ACCESO_OBJETO ::= id punto ACCESO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("ACCESO_MIEMBRO");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor(a);
                    tmp.addHijo((Nodo) b);
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_OBJETO",35, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ACCESO ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("ID");
            tmp.setNumNodo(parser.contador++);
            tmp.setValor(a);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",36, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ACCESO ::= id parIzquierda PARAMETROS parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
            Nodo tmp = new Nodo("METODO");
            Nodo a1 = new Nodo("ID");
            a1.setNumNodo(parser.contador++);
            a1.setValor(a);
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo(a1);
            if(b != null)
                tmp.addHijo((Nodo)b);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",36, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ASIGNA_ARREGLO ::= id DIMENSION igual VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("ASIGNA_ARREGLO");
            Nodo a1 = new Nodo("ID");
            a1.setNumNodo(parser.contador++);
            a1.setValor(a);
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo(a1);
            if(b!= null)
                tmp.addHijo((Nodo)b);
            tmp.addHijo((Nodo)c);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA_ARREGLO",39, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALOR ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALOR ::= new_ id parIzquierda PARAMETROS parDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
            Nodo tmp = new Nodo("OBJETO");
            tmp.setValor(a);
            tmp.setNumNodo(parser.contador++);
            if(b != null)
                tmp.addHijo((Nodo)b);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALOR ::= new_ TIPO DIMENSION 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("ARREGLO");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            tmp.addHijo((Nodo)b);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALOR ::= llaveIzquierda ARREGLO llaveDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
            Nodo tmp = new Nodo("ARREGLO");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DIMENSION ::= DIMENSION corcheteIzquierda E corcheteDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",37, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DIMENSION ::= corcheteIzquierda E corcheteDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                    Nodo tmp = new Nodo("DIMENSION");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo) a);
                    RESULT = tmp;
                 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",37, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARREGLO ::= ARREGLO coma VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",38, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ARREGLO ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",38, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= E mas E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("+");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= E menos E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("-");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= E asterisco E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("*");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= E diagonal E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("/");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= E modulo E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("%");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= menos E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("-");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);;
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= mas E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("+");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= E masmas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("++");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= E menosmenos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("--");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= masmas E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("++");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= menosmenos E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("--");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E mayorque E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo(">");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= E menorque E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("<");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= E mayorigual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo(">=");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= E menorigual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("<=");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= E igualigual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("==");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= E diferente E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("!=");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= E and E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("&&");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= E or E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("||");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= not E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("!");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= E xor E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("^");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= E interrogacion E dospuntos E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("?");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            tmp.addHijo((Nodo) c);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= parIzquierda E parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= id DIMENSION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("ACCESO_ARREGLO");
            tmp.setNumNodo(parser.contador++);
            tmp.setValor(a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("entero");
		r1.setNumNodo(parser.contador++);
		r1.setValor(a);
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("decimal");
		r1.setNumNodo(parser.contador++);
		r1.setValor(a);
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // E ::= tstring 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("tstring");
		r1.setNumNodo(parser.contador++);
		r1.setValor(a);
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // E ::= tchar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("tchar");
		r1.setNumNodo(parser.contador++);
		r1.setValor(a);
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // E ::= true_ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("boolean");
		r1.setNumNodo(parser.contador++);
		r1.setValor("true");
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // E ::= false_ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("boolean");
		r1.setNumNodo(parser.contador++);
		r1.setValor("false");
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // E ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("id");
		r1.setNumNodo(parser.contador++);
		r1.setValor(a);
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // E ::= id parIzquierda PARAMETROS parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
            Nodo tmp = new Nodo("LLAMADA_METODO");
            tmp.setNumNodo(parser.contador++);
            tmp.setValor(a);
            if(b!= null)
                tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ReporteSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ReporteSintactico$do_action(
    int                        CUP$ReporteSintactico$act_num,
    java_cup.runtime.lr_parser CUP$ReporteSintactico$parser,
    java.util.Stack            CUP$ReporteSintactico$stack,
    int                        CUP$ReporteSintactico$top)
    throws java.lang.Exception
    {
              return CUP$ReporteSintactico$do_action_part00000000(
                               CUP$ReporteSintactico$act_num,
                               CUP$ReporteSintactico$parser,
                               CUP$ReporteSintactico$stack,
                               CUP$ReporteSintactico$top);
    }
}

}
