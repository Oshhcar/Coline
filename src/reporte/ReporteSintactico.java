
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package reporte;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ReporteSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ReporteSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ReporteSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ReporteSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ReporteSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\002\004\000\002\005" +
    "\010\000\002\005\012\000\002\003\002\000\002\003\003" +
    "\000\002\004\006\000\002\004\005\000\002\010\002\000" +
    "\002\010\003\000\002\006\004\000\002\006\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\011\002" +
    "\000\002\011\003\000\002\012\004\000\002\012\003\000" +
    "\002\013\003\000\002\013\006\000\002\013\013\000\002" +
    "\014\005\000\002\014\003\000\002\015\005\000\002\015" +
    "\003\000\002\016\005\000\002\016\003\000\002\024\002" +
    "\000\002\024\003\000\002\025\005\000\002\025\003\000" +
    "\002\026\005\000\002\026\004\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\021\002\000\002\021\003" +
    "\000\002\022\004\000\002\022\003\000\002\023\007\000" +
    "\002\023\007\000\002\023\006\000\002\023\007\000\002" +
    "\023\004\000\002\023\005\000\002\023\004\000\002\023" +
    "\004\000\002\023\005\000\002\023\006\000\002\023\007" +
    "\000\002\023\004\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\004\000\002\023\004\000\002\027\004\000\002\027" +
    "\004\000\002\027\004\000\002\027\004\000\002\030\002" +
    "\000\002\030\003\000\002\031\005\000\002\031\003\000" +
    "\002\032\007\000\002\032\003\000\002\033\013\000\002" +
    "\033\011\000\002\034\011\000\002\035\013\000\002\036" +
    "\015\000\002\037\004\000\002\037\005\000\002\040\005" +
    "\000\002\040\003\000\002\041\011\000\002\042\002\000" +
    "\002\042\003\000\002\043\004\000\002\043\003\000\002" +
    "\044\006\000\002\044\005\000\002\045\005\000\002\045" +
    "\005\000\002\046\003\000\002\046\006\000\002\051\006" +
    "\000\002\020\003\000\002\020\007\000\002\020\005\000" +
    "\002\020\005\000\002\047\006\000\002\047\005\000\002" +
    "\050\005\000\002\050\003\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\052\005" +
    "\000\002\052\004\000\002\052\004\000\002\052\004\000" +
    "\002\052\004\000\002\052\004\000\002\052\004\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\052\005" +
    "\000\002\052\005\000\002\052\004\000\002\052\005\000" +
    "\002\052\007\000\002\052\005\000\002\052\004\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\006\000\002\052\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\022\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065" +
    "\ufffd\066\ufffd\070\ufffd\114\007\001\002\000\022\061\ufffc" +
    "\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\070\ufffc\114" +
    "\u012a\001\002\000\004\002\u0129\001\002\000\020\061\145" +
    "\062\152\063\151\064\146\065\154\066\155\070\ufff9\001" +
    "\002\000\036\004\016\005\026\006\021\007\014\010\010" +
    "\012\012\013\015\016\022\027\023\030\017\036\024\037" +
    "\020\052\011\116\013\001\002\000\064\015\uff7a\016\104" +
    "\017\uff7a\020\106\021\uff7a\022\uff7a\023\uff7a\025\uff7a\026" +
    "\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\036\uff7a" +
    "\037\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047" +
    "\uff7a\050\uff7a\051\uff7a\053\uff7a\001\002\000\036\004\016" +
    "\005\026\006\021\007\014\010\010\012\012\013\015\016" +
    "\022\027\023\030\017\036\024\037\020\052\011\116\013" +
    "\001\002\000\060\015\uff7c\017\uff7c\021\uff7c\022\uff7c\023" +
    "\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c" +
    "\033\uff7c\036\uff7c\037\uff7c\042\uff7c\043\uff7c\044\uff7c\045" +
    "\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\053\uff7c\001\002" +
    "\000\004\016\100\001\002\000\060\015\uff7f\017\uff7f\021" +
    "\uff7f\022\uff7f\023\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f" +
    "\031\uff7f\032\uff7f\033\uff7f\036\uff7f\037\uff7f\042\uff7f\043" +
    "\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f" +
    "\053\uff7f\001\002\000\060\015\uff7b\017\uff7b\021\uff7b\022" +
    "\uff7b\023\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b" +
    "\032\uff7b\033\uff7b\036\uff7b\037\uff7b\042\uff7b\043\uff7b\044" +
    "\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\053\uff7b" +
    "\001\002\000\060\015\uff7e\017\uff7e\021\uff7e\022\uff7e\023" +
    "\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e" +
    "\033\uff7e\036\uff7e\037\uff7e\042\uff7e\043\uff7e\044\uff7e\045" +
    "\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\053\uff7e\001\002" +
    "\000\036\004\016\005\026\006\021\007\014\010\010\012" +
    "\012\013\015\016\022\027\023\030\017\036\024\037\020" +
    "\052\011\116\013\001\002\000\036\004\016\005\026\006" +
    "\021\007\014\010\010\012\012\013\015\016\022\027\023" +
    "\030\017\036\024\037\020\052\011\116\013\001\002\000" +
    "\060\015\uff80\017\uff80\021\uff80\022\uff80\023\uff80\025\uff80" +
    "\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80\036" +
    "\uff80\037\uff80\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80" +
    "\047\uff80\050\uff80\051\uff80\053\uff80\001\002\000\036\004" +
    "\016\005\026\006\021\007\014\010\010\012\012\013\015" +
    "\016\022\027\023\030\017\036\024\037\020\052\011\116" +
    "\013\001\002\000\036\004\016\005\026\006\021\007\014" +
    "\010\010\012\012\013\015\016\022\027\023\030\017\036" +
    "\024\037\020\052\011\116\013\001\002\000\036\004\016" +
    "\005\026\006\021\007\014\010\010\012\012\013\015\016" +
    "\022\027\023\030\017\036\024\037\020\052\011\116\013" +
    "\001\002\000\046\022\047\026\042\027\043\030\033\031" +
    "\041\032\036\033\044\036\031\037\030\042\037\043\035" +
    "\044\034\045\027\046\046\047\045\050\050\051\032\053" +
    "\040\001\002\000\060\015\uff7d\017\uff7d\021\uff7d\022\uff7d" +
    "\023\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032" +
    "\uff7d\033\uff7d\036\uff7d\037\uff7d\042\uff7d\043\uff7d\044\uff7d" +
    "\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\053\uff7d\001" +
    "\002\000\036\004\016\005\026\006\021\007\014\010\010" +
    "\012\012\013\015\016\022\027\023\030\017\036\024\037" +
    "\020\052\011\116\013\001\002\000\060\015\uff90\017\uff90" +
    "\021\uff90\022\uff90\023\uff90\025\uff90\026\uff90\027\uff90\030" +
    "\uff90\031\uff90\032\uff90\033\uff90\036\uff90\037\uff90\042\uff90" +
    "\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051" +
    "\uff90\053\uff90\001\002\000\060\015\uff91\017\uff91\021\uff91" +
    "\022\uff91\023\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031" +
    "\uff91\032\uff91\033\uff91\036\uff91\037\uff91\042\uff91\043\uff91" +
    "\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\053" +
    "\uff91\001\002\000\036\004\016\005\026\006\021\007\014" +
    "\010\010\012\012\013\015\016\022\027\023\030\017\036" +
    "\024\037\020\052\011\116\013\001\002\000\036\004\016" +
    "\005\026\006\021\007\014\010\010\012\012\013\015\016" +
    "\022\027\023\030\017\036\024\037\020\052\011\116\013" +
    "\001\002\000\036\004\016\005\026\006\021\007\014\010" +
    "\010\012\012\013\015\016\022\027\023\030\017\036\024" +
    "\037\020\052\011\116\013\001\002\000\036\004\016\005" +
    "\026\006\021\007\014\010\010\012\012\013\015\016\022" +
    "\027\023\030\017\036\024\037\020\052\011\116\013\001" +
    "\002\000\036\004\016\005\026\006\021\007\014\010\010" +
    "\012\012\013\015\016\022\027\023\030\017\036\024\037" +
    "\020\052\011\116\013\001\002\000\036\004\016\005\026" +
    "\006\021\007\014\010\010\012\012\013\015\016\022\027" +
    "\023\030\017\036\024\037\020\052\011\116\013\001\002" +
    "\000\036\004\016\005\026\006\021\007\014\010\010\012" +
    "\012\013\015\016\022\027\023\030\017\036\024\037\020" +
    "\052\011\116\013\001\002\000\036\004\016\005\026\006" +
    "\021\007\014\010\010\012\012\013\015\016\022\027\023" +
    "\030\017\036\024\037\020\052\011\116\013\001\002\000" +
    "\036\004\016\005\026\006\021\007\014\010\010\012\012" +
    "\013\015\016\022\027\023\030\017\036\024\037\020\052" +
    "\011\116\013\001\002\000\036\004\016\005\026\006\021" +
    "\007\014\010\010\012\012\013\015\016\022\027\023\030" +
    "\017\036\024\037\020\052\011\116\013\001\002\000\036" +
    "\004\016\005\026\006\021\007\014\010\010\012\012\013" +
    "\015\016\022\027\023\030\017\036\024\037\020\052\011" +
    "\116\013\001\002\000\036\004\016\005\026\006\021\007" +
    "\014\010\010\012\012\013\015\016\022\027\023\030\017" +
    "\036\024\037\020\052\011\116\013\001\002\000\036\004" +
    "\016\005\026\006\021\007\014\010\010\012\012\013\015" +
    "\016\022\027\023\030\017\036\024\037\020\052\011\116" +
    "\013\001\002\000\022\061\ufffa\062\ufffa\063\ufffa\064\ufffa" +
    "\065\ufffa\066\ufffa\070\ufffa\114\ufffa\001\002\000\036\004" +
    "\016\005\026\006\021\007\014\010\010\012\012\013\015" +
    "\016\022\027\023\030\017\036\024\037\020\052\011\116" +
    "\013\001\002\000\060\015\uff87\017\uff87\021\uff87\022\uff87" +
    "\023\uff87\025\uff87\026\uff87\027\043\030\033\031\041\032" +
    "\036\033\044\036\031\037\030\042\037\043\035\044\034" +
    "\045\027\046\046\047\045\050\uff87\051\uff87\053\040\001" +
    "\002\000\060\015\uff89\017\uff89\021\uff89\022\uff89\023\uff89" +
    "\025\uff89\026\uff89\027\043\030\033\031\041\032\036\033" +
    "\044\036\031\037\030\042\037\043\035\044\034\045\027" +
    "\046\uff89\047\045\050\uff89\051\uff89\053\uff89\001\002\000" +
    "\060\015\uff88\017\uff88\021\uff88\022\uff88\023\uff88\025\uff88" +
    "\026\uff88\027\043\030\033\031\041\032\036\033\044\036" +
    "\031\037\030\042\037\043\035\044\034\045\027\046\uff88" +
    "\047\uff88\050\uff88\051\uff88\053\uff88\001\002\000\060\015" +
    "\uff94\017\uff94\021\uff94\022\uff94\023\uff94\025\uff94\026\uff94" +
    "\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\036\031\037" +
    "\030\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94" +
    "\050\uff94\051\uff94\053\uff94\001\002\000\060\015\uff98\017" +
    "\uff98\021\uff98\022\uff98\023\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\031\041\032\036\033\044\036\031\037\030\042" +
    "\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98" +
    "\051\uff98\053\uff98\001\002\000\046\025\057\026\042\027" +
    "\043\030\033\031\041\032\036\033\044\036\031\037\030" +
    "\042\037\043\035\044\034\045\027\046\046\047\045\050" +
    "\050\051\032\053\040\001\002\000\036\004\016\005\026" +
    "\006\021\007\014\010\010\012\012\013\015\016\022\027" +
    "\023\030\017\036\024\037\020\052\011\116\013\001\002" +
    "\000\060\015\uff83\017\uff83\021\uff83\022\uff83\023\uff83\025" +
    "\uff83\026\042\027\043\030\033\031\041\032\036\033\044" +
    "\036\031\037\030\042\037\043\035\044\034\045\027\046" +
    "\046\047\045\050\050\051\032\053\040\001\002\000\060" +
    "\015\uff96\017\uff96\021\uff96\022\uff96\023\uff96\025\uff96\026" +
    "\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\036\031" +
    "\037\030\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047" +
    "\uff96\050\uff96\051\uff96\053\uff96\001\002\000\060\015\uff84" +
    "\017\uff84\021\uff84\022\uff84\023\uff84\025\uff84\026\uff84\027" +
    "\043\030\033\031\041\032\036\033\044\036\031\037\030" +
    "\042\037\043\035\044\034\045\027\046\046\047\045\050" +
    "\uff84\051\uff84\053\uff84\001\002\000\060\015\uff8d\017\uff8d" +
    "\021\uff8d\022\uff8d\023\uff8d\025\uff8d\026\uff8d\027\043\030" +
    "\033\031\041\032\036\033\044\036\031\037\030\042\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051" +
    "\uff8d\053\uff8d\001\002\000\060\015\uff95\017\uff95\021\uff95" +
    "\022\uff95\023\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031" +
    "\uff95\032\uff95\033\uff95\036\031\037\030\042\uff95\043\uff95" +
    "\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\053" +
    "\uff95\001\002\000\060\015\uff8c\017\uff8c\021\uff8c\022\uff8c" +
    "\023\uff8c\025\uff8c\026\uff8c\027\043\030\033\031\041\032" +
    "\036\033\044\036\031\037\030\042\uff8c\043\uff8c\044\uff8c" +
    "\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\053\uff8c\001" +
    "\002\000\060\015\uff8b\017\uff8b\021\uff8b\022\uff8b\023\uff8b" +
    "\025\uff8b\026\uff8b\027\043\030\033\031\041\032\036\033" +
    "\044\036\031\037\030\042\uff8b\043\uff8b\044\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\050\uff8b\051\uff8b\053\uff8b\001\002\000" +
    "\060\015\uff97\017\uff97\021\uff97\022\uff97\023\uff97\025\uff97" +
    "\026\uff97\027\uff97\030\uff97\031\041\032\036\033\044\036" +
    "\031\037\030\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97" +
    "\047\uff97\050\uff97\051\uff97\053\uff97\001\002\000\060\015" +
    "\uff86\017\uff86\021\uff86\022\uff86\023\uff86\025\uff86\026\uff86" +
    "\027\043\030\033\031\041\032\036\033\044\036\031\037" +
    "\030\042\037\043\035\044\034\045\027\046\046\047\045" +
    "\050\050\051\uff86\053\040\001\002\000\060\015\uff8a\017" +
    "\uff8a\021\uff8a\022\uff8a\023\uff8a\025\uff8a\026\uff8a\027\043" +
    "\030\033\031\041\032\036\033\044\036\031\037\030\042" +
    "\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a" +
    "\051\uff8a\053\uff8a\001\002\000\060\015\uff8f\017\uff8f\021" +
    "\uff8f\022\uff8f\023\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f" +
    "\031\uff8f\032\uff8f\033\uff8f\036\uff8f\037\uff8f\042\uff8f\043" +
    "\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f" +
    "\053\uff8f\001\002\000\060\015\uff92\017\uff92\021\uff92\022" +
    "\uff92\023\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92" +
    "\032\uff92\033\uff92\036\uff92\037\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\053\uff92" +
    "\001\002\000\046\017\075\026\042\027\043\030\033\031" +
    "\041\032\036\033\044\036\031\037\030\042\037\043\035" +
    "\044\034\045\027\046\046\047\045\050\050\051\032\053" +
    "\040\001\002\000\060\015\uff82\017\uff82\021\uff82\022\uff82" +
    "\023\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032" +
    "\uff82\033\uff82\036\uff82\037\uff82\042\uff82\043\uff82\044\uff82" +
    "\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82\053\uff82\001" +
    "\002\000\060\015\uff8e\017\uff8e\021\uff8e\022\uff8e\023\uff8e" +
    "\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033" +
    "\uff8e\036\uff8e\037\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e" +
    "\046\uff8e\047\uff8e\050\uff8e\051\uff8e\053\uff8e\001\002\000" +
    "\060\015\uff93\017\uff93\021\uff93\022\uff93\023\uff93\025\uff93" +
    "\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\036" +
    "\uff93\037\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93" +
    "\047\uff93\050\uff93\051\uff93\053\uff93\001\002\000\036\004" +
    "\016\005\026\006\021\007\014\010\010\012\012\013\015" +
    "\016\022\027\023\030\017\036\024\037\020\052\011\116" +
    "\013\001\002\000\046\017\102\026\042\027\043\030\033" +
    "\031\041\032\036\033\044\036\031\037\030\042\037\043" +
    "\035\044\034\045\027\046\046\047\045\050\050\051\032" +
    "\053\040\001\002\000\060\015\uff78\017\uff78\021\uff78\022" +
    "\uff78\023\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78" +
    "\032\uff78\033\uff78\036\uff78\037\uff78\042\uff78\043\uff78\044" +
    "\uff78\045\uff78\046\uff78\047\uff78\050\uff78\051\uff78\053\uff78" +
    "\001\002\000\060\015\uff85\017\uff85\021\uff85\022\uff85\023" +
    "\uff85\025\uff85\026\uff85\027\043\030\033\031\041\032\036" +
    "\033\044\036\031\037\030\042\037\043\035\044\034\045" +
    "\027\046\046\047\045\050\uff85\051\uff85\053\uff85\001\002" +
    "\000\044\004\016\005\026\006\021\007\014\010\010\012" +
    "\012\013\015\014\121\016\022\017\uffbb\027\023\030\017" +
    "\036\024\037\020\052\011\115\116\116\013\001\002\000" +
    "\062\015\uff81\017\uff81\020\111\021\uff81\022\uff81\023\uff81" +
    "\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033" +
    "\uff81\036\uff81\037\uff81\042\uff81\043\uff81\044\uff81\045\uff81" +
    "\046\uff81\047\uff81\050\uff81\051\uff81\053\uff81\001\002\000" +
    "\036\004\016\005\026\006\021\007\014\010\010\012\012" +
    "\013\015\016\022\027\023\030\017\036\024\037\020\052" +
    "\011\116\013\001\002\000\046\021\110\026\042\027\043" +
    "\030\033\031\041\032\036\033\044\036\031\037\030\042" +
    "\037\043\035\044\034\045\027\046\046\047\045\050\050" +
    "\051\032\053\040\001\002\000\064\015\uff9b\017\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\025\uff9b\026\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\032\uff9b\033\uff9b\036\uff9b\037\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b" +
    "\051\uff9b\053\uff9b\054\uff9b\001\002\000\036\004\016\005" +
    "\026\006\021\007\014\010\010\012\012\013\015\016\022" +
    "\027\023\030\017\036\024\037\020\052\011\116\013\001" +
    "\002\000\046\021\113\026\042\027\043\030\033\031\041" +
    "\032\036\033\044\036\031\037\030\042\037\043\035\044" +
    "\034\045\027\046\046\047\045\050\050\051\032\053\040" +
    "\001\002\000\064\015\uff9c\017\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\033\uff9c\036\uff9c\037\uff9c\042\uff9c\043\uff9c\044" +
    "\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\053\uff9c" +
    "\054\uff9c\001\002\000\054\015\uffa0\017\uffa0\022\uffa0\023" +
    "\uffa0\026\042\027\043\030\033\031\041\032\036\033\044" +
    "\036\031\037\030\042\037\043\035\044\034\045\027\046" +
    "\046\047\045\050\050\051\032\053\040\001\002\000\004" +
    "\017\144\001\002\000\016\010\137\071\135\072\131\073" +
    "\132\074\134\100\133\001\002\000\006\017\uffba\023\127" +
    "\001\002\000\006\017\uffb8\023\uffb8\001\002\000\042\004" +
    "\016\005\026\006\021\007\014\010\010\012\012\013\015" +
    "\014\121\016\022\027\023\030\017\036\024\037\020\052" +
    "\011\115\116\116\013\001\002\000\006\015\125\023\124" +
    "\001\002\000\006\015\uff99\023\uff99\001\002\000\042\004" +
    "\016\005\026\006\021\007\014\010\010\012\012\013\015" +
    "\014\121\016\022\027\023\030\017\036\024\037\020\052" +
    "\011\115\116\116\013\001\002\000\012\015\uff9d\017\uff9d" +
    "\022\uff9d\023\uff9d\001\002\000\006\015\uff9a\023\uff9a\001" +
    "\002\000\042\004\016\005\026\006\021\007\014\010\010" +
    "\012\012\013\015\014\121\016\022\027\023\030\017\036" +
    "\024\037\020\052\011\115\116\116\013\001\002\000\006" +
    "\017\uffb9\023\uffb9\001\002\000\006\010\uffdb\020\uffdb\001" +
    "\002\000\006\010\uffda\020\uffda\001\002\000\006\010\uffd8" +
    "\020\uffd8\001\002\000\006\010\uffd9\020\uffd9\001\002\000" +
    "\006\010\uffdc\020\uffdc\001\002\000\004\020\106\001\002" +
    "\000\006\016\140\020\uffd7\001\002\000\044\004\016\005" +
    "\026\006\021\007\014\010\010\012\012\013\015\014\121" +
    "\016\022\017\uffbb\027\023\030\017\036\024\037\020\052" +
    "\011\115\116\116\013\001\002\000\004\017\142\001\002" +
    "\000\012\015\uff9f\017\uff9f\022\uff9f\023\uff9f\001\002\000" +
    "\014\015\uff9e\017\uff9e\020\111\022\uff9e\023\uff9e\001\002" +
    "\000\060\015\uff79\017\uff79\021\uff79\022\uff79\023\uff79\025" +
    "\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79" +
    "\036\uff79\037\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046" +
    "\uff79\047\uff79\050\uff79\051\uff79\053\uff79\001\002\000\034" +
    "\010\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066" +
    "\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\100\ufff5" +
    "\001\002\000\034\010\ufff2\061\ufff2\062\ufff2\063\ufff2\064" +
    "\ufff2\065\ufff2\066\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2" +
    "\074\ufff2\100\ufff2\001\002\000\034\010\ufff8\061\145\062" +
    "\152\063\151\064\146\065\154\066\155\070\ufff8\071\ufff8" +
    "\072\ufff8\073\ufff8\074\ufff8\100\ufff8\001\002\000\004\070" +
    "\157\001\002\000\034\010\ufff3\061\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\070\ufff3\071\ufff3\072\ufff3\073" +
    "\ufff3\074\ufff3\100\ufff3\001\002\000\034\010\ufff4\061\ufff4" +
    "\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\070\ufff4\071" +
    "\ufff4\072\ufff4\073\ufff4\074\ufff4\100\ufff4\001\002\000\004" +
    "\002\000\001\002\000\034\010\ufff1\061\ufff1\062\ufff1\063" +
    "\ufff1\064\ufff1\065\ufff1\066\ufff1\070\ufff1\071\ufff1\072\ufff1" +
    "\073\ufff1\074\ufff1\100\ufff1\001\002\000\034\010\ufff0\061" +
    "\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\070\ufff0" +
    "\071\ufff0\072\ufff0\073\ufff0\074\ufff0\100\ufff0\001\002\000" +
    "\034\010\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6" +
    "\066\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\100" +
    "\ufff6\001\002\000\004\010\160\001\002\000\006\014\162" +
    "\067\161\001\002\000\004\010\u0124\001\002\000\036\010" +
    "\ufff9\015\uffef\061\145\062\152\063\151\064\146\065\154" +
    "\066\155\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\100" +
    "\ufff9\001\002\000\036\010\ufff9\015\uffee\061\145\062\152" +
    "\063\151\064\146\065\154\066\155\070\ufff9\071\ufff9\072" +
    "\ufff9\073\ufff9\074\ufff9\100\ufff9\001\002\000\004\015\u0122" +
    "\001\002\000\036\010\uffec\015\uffec\061\uffec\062\uffec\063" +
    "\uffec\064\uffec\065\uffec\066\uffec\070\uffec\071\uffec\072\uffec" +
    "\073\uffec\074\uffec\100\uffec\001\002\000\020\010\171\070" +
    "\157\071\135\072\131\073\132\074\134\100\133\001\002" +
    "\000\036\010\uffeb\015\uffeb\061\uffeb\062\uffeb\063\uffeb\064" +
    "\uffeb\065\uffeb\066\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb" +
    "\074\uffeb\100\uffeb\001\002\000\004\010\175\001\002\000" +
    "\004\010\uffd7\001\002\000\006\022\uffe7\023\uffe7\001\002" +
    "\000\012\020\u011c\022\uffe5\023\uffe5\054\u0120\001\002\000" +
    "\006\022\u011f\023\341\001\002\000\014\016\176\020\uffe3" +
    "\022\uffe3\023\uffe3\054\uffe3\001\002\000\024\010\171\017" +
    "\uffe2\023\uffe2\066\202\071\135\072\131\073\132\074\134" +
    "\100\133\001\002\000\006\017\uffdf\023\uffdf\001\002\000" +
    "\006\017\uffe1\023\uffe1\001\002\000\004\010\340\001\002" +
    "\000\016\010\171\071\135\072\131\073\132\074\134\100" +
    "\133\001\002\000\006\017\205\023\204\001\002\000\020" +
    "\010\171\066\202\071\135\072\131\073\132\074\134\100" +
    "\133\001\002\000\004\014\206\001\002\000\054\010\230" +
    "\015\uffd6\036\213\037\210\071\135\072\131\073\132\074" +
    "\134\075\207\076\233\077\240\100\133\101\242\102\235" +
    "\104\222\105\224\106\226\107\211\110\220\111\221\116" +
    "\225\001\002\000\004\016\u0115\001\002\000\004\010\u0114" +
    "\001\002\000\004\014\u010c\001\002\000\060\010\uffc5\015" +
    "\uffc5\036\uffc5\037\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5" +
    "\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\104" +
    "\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5" +
    "\113\uffc5\116\uffc5\001\002\000\004\010\u010b\001\002\000" +
    "\006\022\u0109\024\u0108\001\002\000\060\010\uffc2\015\uffc2" +
    "\036\uffc2\037\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075" +
    "\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\104\uffc2" +
    "\105\uffc2\106\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\113" +
    "\uffc2\116\uffc2\001\002\000\060\010\uffd3\015\uffd3\036\uffd3" +
    "\037\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076" +
    "\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\104\uffd3\105\uffd3" +
    "\106\uffd3\107\uffd3\110\uffd3\111\uffd3\112\uffd3\113\uffd3\116" +
    "\uffd3\001\002\000\060\010\uffc6\015\uffc6\036\uffc6\037\uffc6" +
    "\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077" +
    "\uffc6\100\uffc6\101\uffc6\102\uffc6\104\uffc6\105\uffc6\106\uffc6" +
    "\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6\116\uffc6\001" +
    "\002\000\004\016\365\001\002\000\004\016\345\001\002" +
    "\000\004\022\344\001\002\000\004\010\340\001\002\000" +
    "\004\022\336\001\002\000\004\016\332\001\002\000\004" +
    "\016\324\001\002\000\060\010\uffc4\015\uffc4\036\uffc4\037" +
    "\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4" +
    "\077\uffc4\100\uffc4\101\uffc4\102\uffc4\104\uffc4\105\uffc4\106" +
    "\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\113\uffc4\116\uffc4" +
    "\001\002\000\020\010\uffd7\016\304\020\106\024\302\036" +
    "\303\037\307\054\306\001\002\000\004\022\301\001\002" +
    "\000\004\022\300\001\002\000\004\016\274\001\002\000" +
    "\060\010\230\015\uffd5\036\213\037\210\071\135\072\131" +
    "\073\132\074\134\075\207\076\233\077\240\100\133\101" +
    "\242\102\235\104\222\105\224\106\226\107\211\110\220" +
    "\111\221\112\uffd5\113\uffd5\116\225\001\002\000\004\016" +
    "\265\001\002\000\060\010\uffc3\015\uffc3\036\uffc3\037\uffc3" +
    "\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077" +
    "\uffc3\100\uffc3\101\uffc3\102\uffc3\104\uffc3\105\uffc3\106\uffc3" +
    "\107\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\116\uffc3\001" +
    "\002\000\062\010\uffb6\015\uffb6\036\uffb6\037\uffb6\071\uffb6" +
    "\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100" +
    "\uffb6\101\uffb6\102\uffb6\103\252\104\uffb6\105\uffb6\106\uffb6" +
    "\107\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\116\uffb6\001" +
    "\002\000\004\016\247\001\002\000\004\015\246\001\002" +
    "\000\044\004\016\005\026\006\021\007\014\010\010\012" +
    "\012\013\015\014\121\016\022\022\244\027\023\030\017" +
    "\036\024\037\020\052\011\115\116\116\013\001\002\000" +
    "\004\022\245\001\002\000\060\010\uffce\015\uffce\036\uffce" +
    "\037\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076" +
    "\uffce\077\uffce\100\uffce\101\uffce\102\uffce\104\uffce\105\uffce" +
    "\106\uffce\107\uffce\110\uffce\111\uffce\112\uffce\113\uffce\116" +
    "\uffce\001\002\000\060\010\uffcd\015\uffcd\036\uffcd\037\uffcd" +
    "\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077" +
    "\uffcd\100\uffcd\101\uffcd\102\uffcd\104\uffcd\105\uffcd\106\uffcd" +
    "\107\uffcd\110\uffcd\111\uffcd\112\uffcd\113\uffcd\116\uffcd\001" +
    "\002\000\036\010\uffe9\015\uffe9\061\uffe9\062\uffe9\063\uffe9" +
    "\064\uffe9\065\uffe9\066\uffe9\070\uffe9\071\uffe9\072\uffe9\073" +
    "\uffe9\074\uffe9\100\uffe9\001\002\000\004\017\250\001\002" +
    "\000\004\022\251\001\002\000\060\010\uffd0\015\uffd0\036" +
    "\uffd0\037\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0" +
    "\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\104\uffd0\105" +
    "\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0\112\uffd0\113\uffd0" +
    "\116\uffd0\001\002\000\006\014\253\102\254\001\002\000" +
    "\054\010\230\015\uffd6\036\213\037\210\071\135\072\131" +
    "\073\132\074\134\075\207\076\233\077\240\100\133\101" +
    "\242\102\235\104\222\105\224\106\226\107\211\110\220" +
    "\111\221\116\225\001\002\000\004\016\255\001\002\000" +
    "\036\004\016\005\026\006\021\007\014\010\010\012\012" +
    "\013\015\016\022\027\023\030\017\036\024\037\020\052" +
    "\011\116\013\001\002\000\046\017\257\026\042\027\043" +
    "\030\033\031\041\032\036\033\044\036\031\037\030\042" +
    "\037\043\035\044\034\045\027\046\046\047\045\050\050" +
    "\051\032\053\040\001\002\000\004\014\260\001\002\000" +
    "\054\010\230\015\uffd6\036\213\037\210\071\135\072\131" +
    "\073\132\074\134\075\207\076\233\077\240\100\133\101" +
    "\242\102\235\104\222\105\224\106\226\107\211\110\220" +
    "\111\221\116\225\001\002\000\004\015\262\001\002\000" +
    "\062\010\uffb5\015\uffb5\036\uffb5\037\uffb5\071\uffb5\072\uffb5" +
    "\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101" +
    "\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5" +
    "\110\uffb5\111\uffb5\112\uffb5\113\uffb5\116\uffb5\001\002\000" +
    "\004\015\264\001\002\000\060\010\uffb7\015\uffb7\036\uffb7" +
    "\037\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076" +
    "\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\104\uffb7\105\uffb7" +
    "\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7\116" +
    "\uffb7\001\002\000\036\004\016\005\026\006\021\007\014" +
    "\010\010\012\012\013\015\016\022\027\023\030\017\036" +
    "\024\037\020\052\011\116\013\001\002\000\046\017\267" +
    "\026\042\027\043\030\033\031\041\032\036\033\044\036" +
    "\031\037\030\042\037\043\035\044\034\045\027\046\046" +
    "\047\045\050\050\051\032\053\040\001\002\000\004\014" +
    "\270\001\002\000\054\010\230\015\uffd6\036\213\037\210" +
    "\071\135\072\131\073\132\074\134\075\207\076\233\077" +
    "\240\100\133\101\242\102\235\104\222\105\224\106\226" +
    "\107\211\110\220\111\221\116\225\001\002\000\004\015" +
    "\272\001\002\000\062\010\uffb4\015\uffb4\036\uffb4\037\uffb4" +
    "\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077" +
    "\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4" +
    "\106\uffb4\107\uffb4\110\uffb4\111\uffb4\112\uffb4\113\uffb4\116" +
    "\uffb4\001\002\000\060\010\uffd4\015\uffd4\036\uffd4\037\uffd4" +
    "\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077" +
    "\uffd4\100\uffd4\101\uffd4\102\uffd4\104\uffd4\105\uffd4\106\uffd4" +
    "\107\uffd4\110\uffd4\111\uffd4\112\uffd4\113\uffd4\116\uffd4\001" +
    "\002\000\036\004\016\005\026\006\021\007\014\010\010" +
    "\012\012\013\015\016\022\027\023\030\017\036\024\037" +
    "\020\052\011\116\013\001\002\000\046\017\276\026\042" +
    "\027\043\030\033\031\041\032\036\033\044\036\031\037" +
    "\030\042\037\043\035\044\034\045\027\046\046\047\045" +
    "\050\050\051\032\053\040\001\002\000\004\022\277\001" +
    "\002\000\060\010\uffd1\015\uffd1\036\uffd1\037\uffd1\071\uffd1" +
    "\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100" +
    "\uffd1\101\uffd1\102\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1" +
    "\110\uffd1\111\uffd1\112\uffd1\113\uffd1\116\uffd1\001\002\000" +
    "\060\010\uffc0\015\uffc0\036\uffc0\037\uffc0\071\uffc0\072\uffc0" +
    "\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101" +
    "\uffc0\102\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0" +
    "\111\uffc0\112\uffc0\113\uffc0\116\uffc0\001\002\000\060\010" +
    "\uffc7\015\uffc7\036\uffc7\037\uffc7\071\uffc7\072\uffc7\073\uffc7" +
    "\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102" +
    "\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7" +
    "\112\uffc7\113\uffc7\116\uffc7\001\002\000\004\010\320\001" +
    "\002\000\006\017\uffbf\022\uffbf\001\002\000\044\004\016" +
    "\005\026\006\021\007\014\010\010\012\012\013\015\014" +
    "\121\016\022\017\uffbb\027\023\030\017\036\024\037\020" +
    "\052\011\115\116\116\013\001\002\000\006\020\111\054" +
    "\312\001\002\000\042\004\016\005\026\006\021\007\014" +
    "\010\010\012\012\013\015\014\121\016\022\027\023\030" +
    "\017\036\024\037\020\052\011\115\116\116\013\001\002" +
    "\000\006\017\uffbe\022\uffbe\001\002\000\004\022\311\001" +
    "\002\000\060\010\uffc9\015\uffc9\036\uffc9\037\uffc9\071\uffc9" +
    "\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100" +
    "\uffc9\101\uffc9\102\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9" +
    "\110\uffc9\111\uffc9\112\uffc9\113\uffc9\116\uffc9\001\002\000" +
    "\042\004\016\005\026\006\021\007\014\010\010\012\012" +
    "\013\015\014\121\016\022\027\023\030\017\036\024\037" +
    "\020\052\011\115\116\116\013\001\002\000\004\022\uffa1" +
    "\001\002\000\004\017\315\001\002\000\004\022\316\001" +
    "\002\000\060\010\uffc8\015\uffc8\036\uffc8\037\uffc8\071\uffc8" +
    "\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100" +
    "\uffc8\101\uffc8\102\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8" +
    "\110\uffc8\111\uffc8\112\uffc8\113\uffc8\116\uffc8\001\002\000" +
    "\006\022\uffa4\024\uffa4\001\002\000\010\016\321\022\uffa3" +
    "\024\uffa3\001\002\000\044\004\016\005\026\006\021\007" +
    "\014\010\010\012\012\013\015\014\121\016\022\017\uffbb" +
    "\027\023\030\017\036\024\037\020\052\011\115\116\116" +
    "\013\001\002\000\004\017\323\001\002\000\006\022\uffa2" +
    "\024\uffa2\001\002\000\036\004\016\005\026\006\021\007" +
    "\014\010\010\012\012\013\015\016\022\027\023\030\017" +
    "\036\024\037\020\052\011\116\013\001\002\000\046\017" +
    "\326\026\042\027\043\030\033\031\041\032\036\033\044" +
    "\036\031\037\030\042\037\043\035\044\034\045\027\046" +
    "\046\047\045\050\050\051\032\053\040\001\002\000\004" +
    "\014\327\001\002\000\054\010\230\015\uffd6\036\213\037" +
    "\210\071\135\072\131\073\132\074\134\075\207\076\233" +
    "\077\240\100\133\101\242\102\235\104\222\105\224\106" +
    "\226\107\211\110\220\111\221\116\225\001\002\000\004" +
    "\015\331\001\002\000\060\010\uffb3\015\uffb3\036\uffb3\037" +
    "\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3" +
    "\077\uffb3\100\uffb3\101\uffb3\102\uffb3\104\uffb3\105\uffb3\106" +
    "\uffb3\107\uffb3\110\uffb3\111\uffb3\112\uffb3\113\uffb3\116\uffb3" +
    "\001\002\000\036\004\016\005\026\006\021\007\014\010" +
    "\010\012\012\013\015\016\022\027\023\030\017\036\024" +
    "\037\020\052\011\116\013\001\002\000\046\017\334\026" +
    "\042\027\043\030\033\031\041\032\036\033\044\036\031" +
    "\037\030\042\037\043\035\044\034\045\027\046\046\047" +
    "\045\050\050\051\032\053\040\001\002\000\004\022\335" +
    "\001\002\000\060\010\uffcf\015\uffcf\036\uffcf\037\uffcf\071" +
    "\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf" +
    "\100\uffcf\101\uffcf\102\uffcf\104\uffcf\105\uffcf\106\uffcf\107" +
    "\uffcf\110\uffcf\111\uffcf\112\uffcf\113\uffcf\116\uffcf\001\002" +
    "\000\060\010\uffcb\015\uffcb\036\uffcb\037\uffcb\071\uffcb\072" +
    "\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb" +
    "\101\uffcb\102\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110" +
    "\uffcb\111\uffcb\112\uffcb\113\uffcb\116\uffcb\001\002\000\006" +
    "\022\342\023\341\001\002\000\014\017\uffe3\020\uffe3\022" +
    "\uffe3\023\uffe3\054\uffe3\001\002\000\004\010\340\001\002" +
    "\000\060\010\uffca\015\uffca\036\uffca\037\uffca\071\uffca\072" +
    "\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100\uffca" +
    "\101\uffca\102\uffca\104\uffca\105\uffca\106\uffca\107\uffca\110" +
    "\uffca\111\uffca\112\uffca\113\uffca\116\uffca\001\002\000\006" +
    "\022\uffe8\023\uffe8\001\002\000\060\010\uffcc\015\uffcc\036" +
    "\uffcc\037\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc" +
    "\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\104\uffcc\105" +
    "\uffcc\106\uffcc\107\uffcc\110\uffcc\111\uffcc\112\uffcc\113\uffcc" +
    "\116\uffcc\001\002\000\036\004\016\005\026\006\021\007" +
    "\014\010\010\012\012\013\015\016\022\027\023\030\017" +
    "\036\024\037\020\052\011\116\013\001\002\000\046\017" +
    "\347\026\042\027\043\030\033\031\041\032\036\033\044" +
    "\036\031\037\030\042\037\043\035\044\034\045\027\046" +
    "\046\047\045\050\050\051\032\053\040\001\002\000\004" +
    "\014\350\001\002\000\010\015\uffab\112\351\113\352\001" +
    "\002\000\036\004\016\005\026\006\021\007\014\010\010" +
    "\012\012\013\015\016\022\027\023\030\017\036\024\037" +
    "\020\052\011\116\013\001\002\000\004\025\360\001\002" +
    "\000\004\015\357\001\002\000\010\015\uffaa\112\351\113" +
    "\352\001\002\000\010\015\uffa8\112\uffa8\113\uffa8\001\002" +
    "\000\010\015\uffa9\112\uffa9\113\uffa9\001\002\000\060\010" +
    "\uffac\015\uffac\036\uffac\037\uffac\071\uffac\072\uffac\073\uffac" +
    "\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac\101\uffac\102" +
    "\uffac\104\uffac\105\uffac\106\uffac\107\uffac\110\uffac\111\uffac" +
    "\112\uffac\113\uffac\116\uffac\001\002\000\060\010\230\015" +
    "\uffd6\036\213\037\210\071\135\072\131\073\132\074\134" +
    "\075\207\076\233\077\240\100\133\101\242\102\235\104" +
    "\222\105\224\106\226\107\211\110\220\111\221\112\uffd6" +
    "\113\uffd6\116\225\001\002\000\010\015\uffa6\112\uffa6\113" +
    "\uffa6\001\002\000\046\025\363\026\042\027\043\030\033" +
    "\031\041\032\036\033\044\036\031\037\030\042\037\043" +
    "\035\044\034\045\027\046\046\047\045\050\050\051\032" +
    "\053\040\001\002\000\060\010\230\015\uffd6\036\213\037" +
    "\210\071\135\072\131\073\132\074\134\075\207\076\233" +
    "\077\240\100\133\101\242\102\235\104\222\105\224\106" +
    "\226\107\211\110\220\111\221\112\uffd6\113\uffd6\116\225" +
    "\001\002\000\010\015\uffa7\112\uffa7\113\uffa7\001\002\000" +
    "\016\010\370\071\135\072\131\073\132\074\134\100\133" +
    "\001\002\000\004\022\374\001\002\000\004\010\340\001" +
    "\002\000\006\010\uffd7\054\371\001\002\000\042\004\016" +
    "\005\026\006\021\007\014\010\010\012\012\013\015\014" +
    "\121\016\022\027\023\030\017\036\024\037\020\052\011" +
    "\115\116\116\013\001\002\000\004\022\uffaf\001\002\000" +
    "\006\022\uffb0\023\341\001\002\000\036\004\016\005\026" +
    "\006\021\007\014\010\010\012\012\013\015\016\022\027" +
    "\023\030\017\036\024\037\020\052\011\116\013\001\002" +
    "\000\046\022\376\026\042\027\043\030\033\031\041\032" +
    "\036\033\044\036\031\037\030\042\037\043\035\044\034" +
    "\045\027\046\046\047\045\050\050\051\032\053\040\001" +
    "\002\000\010\010\u0101\036\213\037\210\001\002\000\004" +
    "\017\uffad\001\002\000\004\017\u0104\001\002\000\010\036" +
    "\303\037\307\054\u0102\001\002\000\042\004\016\005\026" +
    "\006\021\007\014\010\010\012\012\013\015\014\121\016" +
    "\022\027\023\030\017\036\024\037\020\052\011\115\116" +
    "\116\013\001\002\000\004\017\uffae\001\002\000\004\014" +
    "\u0105\001\002\000\054\010\230\015\uffd6\036\213\037\210" +
    "\071\135\072\131\073\132\074\134\075\207\076\233\077" +
    "\240\100\133\101\242\102\235\104\222\105\224\106\226" +
    "\107\211\110\220\111\221\116\225\001\002\000\004\015" +
    "\u0107\001\002\000\060\010\uffb1\015\uffb1\036\uffb1\037\uffb1" +
    "\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077" +
    "\uffb1\100\uffb1\101\uffb1\102\uffb1\104\uffb1\105\uffb1\106\uffb1" +
    "\107\uffb1\110\uffb1\111\uffb1\112\uffb1\113\uffb1\116\uffb1\001" +
    "\002\000\004\010\320\001\002\000\060\010\uffc1\015\uffc1" +
    "\036\uffc1\037\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075" +
    "\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\104\uffc1" +
    "\105\uffc1\106\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\113" +
    "\uffc1\116\uffc1\001\002\000\006\022\uffa5\024\uffa5\001\002" +
    "\000\006\017\uffbd\022\uffbd\001\002\000\054\010\230\015" +
    "\uffd6\036\213\037\210\071\135\072\131\073\132\074\134" +
    "\075\207\076\233\077\240\100\133\101\242\102\235\104" +
    "\222\105\224\106\226\107\211\110\220\111\221\116\225" +
    "\001\002\000\004\015\u010e\001\002\000\004\106\u010f\001" +
    "\002\000\004\016\u0110\001\002\000\036\004\016\005\026" +
    "\006\021\007\014\010\010\012\012\013\015\016\022\027" +
    "\023\030\017\036\024\037\020\052\011\116\013\001\002" +
    "\000\046\017\u0112\026\042\027\043\030\033\031\041\032" +
    "\036\033\044\036\031\037\030\042\037\043\035\044\034" +
    "\045\027\046\046\047\045\050\050\051\032\053\040\001" +
    "\002\000\004\022\u0113\001\002\000\060\010\uffb2\015\uffb2" +
    "\036\uffb2\037\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075" +
    "\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\104\uffb2" +
    "\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111\uffb2\112\uffb2\113" +
    "\uffb2\116\uffb2\001\002\000\006\017\uffbc\022\uffbc\001\002" +
    "\000\036\004\016\005\026\006\021\007\014\010\010\012" +
    "\012\013\015\016\022\027\023\030\017\036\024\037\020" +
    "\052\011\116\013\001\002\000\046\017\u0117\026\042\027" +
    "\043\030\033\031\041\032\036\033\044\036\031\037\030" +
    "\042\037\043\035\044\034\045\027\046\046\047\045\050" +
    "\050\051\032\053\040\001\002\000\004\022\u0118\001\002" +
    "\000\060\010\uffd2\015\uffd2\036\uffd2\037\uffd2\071\uffd2\072" +
    "\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2" +
    "\101\uffd2\102\uffd2\104\uffd2\105\uffd2\106\uffd2\107\uffd2\110" +
    "\uffd2\111\uffd2\112\uffd2\113\uffd2\116\uffd2\001\002\000\006" +
    "\017\uffe0\023\uffe0\001\002\000\004\010\340\001\002\000" +
    "\010\017\uffde\020\u011c\023\uffde\001\002\000\004\021\u011d" +
    "\001\002\000\014\017\uffe4\020\uffe4\022\uffe4\023\uffe4\054" +
    "\uffe4\001\002\000\010\017\uffdd\020\u011c\023\uffdd\001\002" +
    "\000\036\010\uffea\015\uffea\061\uffea\062\uffea\063\uffea\064" +
    "\uffea\065\uffea\066\uffea\070\uffea\071\uffea\072\uffea\073\uffea" +
    "\074\uffea\100\uffea\001\002\000\042\004\016\005\026\006" +
    "\021\007\014\010\010\012\012\013\015\014\121\016\022" +
    "\027\023\030\017\036\024\037\020\052\011\115\116\116" +
    "\013\001\002\000\006\022\uffe6\023\uffe6\001\002\000\040" +
    "\002\uffff\010\uffff\015\uffff\061\uffff\062\uffff\063\uffff\064" +
    "\uffff\065\uffff\066\uffff\070\uffff\071\uffff\072\uffff\073\uffff" +
    "\074\uffff\100\uffff\001\002\000\036\010\uffed\015\uffed\061" +
    "\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\070\uffed" +
    "\071\uffed\072\uffed\073\uffed\074\uffed\100\uffed\001\002\000" +
    "\004\014\u0125\001\002\000\036\010\ufff9\015\uffef\061\145" +
    "\062\152\063\151\064\146\065\154\066\155\070\ufff9\071" +
    "\ufff9\072\ufff9\073\ufff9\074\ufff9\100\ufff9\001\002\000\004" +
    "\015\u0127\001\002\000\040\002\ufffe\010\ufffe\015\ufffe\061" +
    "\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\070\ufffe" +
    "\071\ufffe\072\ufffe\073\ufffe\074\ufffe\100\ufffe\001\002\000" +
    "\034\010\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\100" +
    "\ufff7\001\002\000\004\002\001\001\002\000\036\004\016" +
    "\005\026\006\021\007\014\010\010\012\012\013\015\016" +
    "\022\027\023\030\017\036\024\037\020\052\011\116\013" +
    "\001\002\000\046\022\u012c\026\042\027\043\030\033\031" +
    "\041\032\036\033\044\036\031\037\030\042\037\043\035" +
    "\044\034\045\027\046\046\047\045\050\050\051\032\053" +
    "\040\001\002\000\022\061\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\070\ufffb\114\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\010\002\004\003\005\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\152\006\146" +
    "\007\155\010\147\001\001\000\004\052\024\001\001\000" +
    "\004\047\104\001\001\000\004\052\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\076\001\001\000\004" +
    "\052\075\001\001\000\002\001\001\000\004\052\073\001" +
    "\001\000\004\052\072\001\001\000\004\052\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\067" +
    "\001\001\000\004\052\066\001\001\000\004\052\065\001" +
    "\001\000\004\052\064\001\001\000\004\052\063\001\001" +
    "\000\004\052\062\001\001\000\004\052\061\001\001\000" +
    "\004\052\060\001\001\000\004\052\055\001\001\000\004" +
    "\052\054\001\001\000\004\052\053\001\001\000\004\052" +
    "\052\001\001\000\004\052\051\001\001\000\002\001\001" +
    "\000\004\052\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\117\030\114\031\116\052\113\001\001" +
    "\000\002\001\001\000\004\052\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\122\050\121\052\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\125\052\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\127\052\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\142\001\001\000\002\001\001" +
    "\000\012\020\117\030\140\031\116\052\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u0127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\005\166\006\146\007\155\010" +
    "\165\011\163\012\162\013\164\001\001\000\014\005\166" +
    "\006\146\007\155\010\165\013\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\167\001\001\000\002" +
    "\001\001\000\010\014\173\015\171\016\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\200\024\202\025" +
    "\177\026\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u011d\001\001\000\004\017\u0119\001\001\000" +
    "\002\001\001\000\006\017\200\026\u0118\001\001\000\002" +
    "\001\001\000\034\017\222\021\240\022\233\023\215\027" +
    "\230\032\216\033\236\034\211\035\226\036\235\041\214" +
    "\045\213\051\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\336\015\171\016\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\017\222\023\272" +
    "\027\230\032\216\033\236\034\211\035\226\036\235\041" +
    "\214\045\213\051\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\242\052\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\017\222\021\262\022\233\023\215\027" +
    "\230\032\216\033\236\034\211\035\226\036\235\041\214" +
    "\045\213\051\231\001\001\000\002\001\001\000\004\052" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\017\222\021\260\022\233\023\215\027\230\032\216\033" +
    "\236\034\211\035\226\036\235\041\214\045\213\051\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\017\222\021\270\022" +
    "\233\023\215\027\230\032\216\033\236\034\211\035\226" +
    "\036\235\041\214\045\213\051\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\316" +
    "\001\001\000\002\001\001\000\012\020\117\030\313\031" +
    "\116\052\113\001\001\000\002\001\001\000\006\020\307" +
    "\052\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\312\052\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\117" +
    "\030\321\031\116\052\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\324\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\017\222\021\327\022\233\023" +
    "\215\027\230\032\216\033\236\034\211\035\226\036\235" +
    "\041\214\045\213\051\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\342\016\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\042\352\043\353\044\354\001\001\000" +
    "\004\052\361\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\017\222\021\360\022\233" +
    "\023\215\027\230\032\216\033\236\034\211\035\226\036" +
    "\235\041\214\045\213\051\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\017\222\021\363\022\233\023" +
    "\215\027\230\032\216\033\236\034\211\035\226\036\235" +
    "\041\214\045\213\051\231\001\001\000\002\001\001\000" +
    "\006\017\366\037\365\001\001\000\002\001\001\000\010" +
    "\014\372\015\171\016\172\001\001\000\002\001\001\000" +
    "\006\020\371\052\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\374\001\001\000\002\001\001\000" +
    "\006\027\376\040\377\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\u0102\052\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\017\222" +
    "\021\u0105\022\233\023\215\027\230\032\216\033\236\034" +
    "\211\035\226\036\235\041\214\045\213\051\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\017\222\021\u010c\022\233\023\215\027\230\032" +
    "\216\033\236\034\211\035\226\036\235\041\214\045\213" +
    "\051\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\u0110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\u0115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u011a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\u0120\052" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\166\006\146\007" +
    "\155\010\165\011\u0125\012\162\013\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\u012a\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ReporteSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ReporteSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ReporteSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public Nodo padre;
	public String resultado="";
	public int contador = 1;
	
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + s.left +" Columna "+ s.right + ". Identificador " +s.value + " no reconocido." );
		//AnalizadorError tmp = new AnalizadorError();
		//tmp.setColumna(s.right+1);
		//tmp.setLinea(s.left+1);
		//tmp.setValor(s.value+"");
		//tmp.setError("Sintáctico");
        
		//error.add(tmp);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico Fatal en la Linea " + s.left + " Columna "+ s.right +". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ReporteSintactico$actions {




  private final ReporteSintactico parser;

  /** Constructor */
  CUP$ReporteSintactico$actions(ReporteSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ReporteSintactico$do_action_part00000000(
    int                        CUP$ReporteSintactico$act_num,
    java_cup.runtime.lr_parser CUP$ReporteSintactico$parser,
    java.util.Stack            CUP$ReporteSintactico$stack,
    int                        CUP$ReporteSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ReporteSintactico$result;

      /* select the action based on the action number */
      switch (CUP$ReporteSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		RESULT = start_val;
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ReporteSintactico$parser.done_parsing();
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORTS CLASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("INICIO");
            tmp.setNumNodo(parser.contador++);
            if(a != null)
                tmp.addHijo((Nodo)a);
            tmp.addHijo((Nodo) b);
            parser.padre = (Nodo) tmp;
            System.out.println("COLINE OK"); 
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASE ::= MOD class_ id llaveIzquierda CUERPO_CLASE llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		
            Nodo tmp = new Nodo("CLASE");
            tmp.setValor(b);
            tmp.setNumNodo(parser.contador++);
            if(a != null)
                tmp.addHijo((Nodo) a);
            if(c != null)
                tmp.addHijo((Nodo) c);
            RESULT = tmp;

        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CLASE",3, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASE ::= MOD class_ id extends_ id llaveIzquierda CUERPO_CLASE llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		
            Nodo tmp = new Nodo("CLASE");
            tmp.setValor(b);
            Nodo c1 = new Nodo("EXTENDS");
            c1.setValor(c);
            c1.setNumNodo(parser.contador++);
            
            tmp.setNumNodo(parser.contador++);
            if(a != null)
                tmp.addHijo((Nodo) a);
            tmp.addHijo(c1);
            if(d != null)
                tmp.addHijo((Nodo) d);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CLASE",3, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= IMPORTSL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTSL ::= IMPORTSL import_ E puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("IMPORTS");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = a;
                ((Nodo) RESULT).addHijo(tmp);
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTSL",2, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTSL ::= import_ E puntoycoma 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("IMPORTS");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) a);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTSL",2, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MOD ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MOD",6, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MOD ::= MODIFICADORES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MOD",6, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MODIFICADORES ::= MODIFICADORES MODIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo)RESULT).addHijo((Nodo) b);
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",4, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MODIFICADORES ::= MODIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",4, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MODIFICADOR ::= public_ 
            {
              Object RESULT =null;
		  
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("public");
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MODIFICADOR ::= protected_ 
            {
              Object RESULT =null;
		  
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("protected");
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MODIFICADOR ::= private_ 
            {
              Object RESULT =null;
		  
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("private");
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MODIFICADOR ::= abstract_ 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("abstract");
                    RESULT = tmp;
                 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MODIFICADOR ::= static_ 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("static");
                    RESULT = tmp;
                 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MODIFICADOR ::= final_ 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("MODIFICADOR");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("final");
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_CLASE ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",7, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_CLASE ::= CUERPO_CLASE_LISTA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",7, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_CLASE_LISTA ::= CUERPO_CLASE_LISTA CUERPO_CLASE_DEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo)RESULT).addHijo((Nodo) b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_LISTA",8, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_CLASE_LISTA ::= CUERPO_CLASE_DEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_LISTA",8, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_CLASE_DEC ::= CLASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_DEC",9, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_CLASE_DEC ::= MOD TIPO DECLARACION_VARIABLES puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		
                            Nodo tmp = new Nodo("DECLARACION_VARIABLES");
                            tmp.setNumNodo(parser.contador++);
                            if(a != null)
                                tmp.addHijo((Nodo) a);
                            tmp.addHijo((Nodo) b);
                            tmp.addHijo((Nodo) c);
                            RESULT = tmp;
                     
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_DEC",9, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_CLASE_DEC ::= MOD TIPO id parIzquierda PARAMETROS_DEC parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                            Nodo tmp = new Nodo("DECLARACION_METODO");
                            tmp.setValor(c);
                            tmp.setNumNodo(parser.contador++);
                            if(a != null)
                                tmp.addHijo((Nodo) a);
                            tmp.addHijo((Nodo) b);
                            if(d != null)
                                tmp.addHijo((Nodo) d);
                            if(e != null)
                                tmp.addHijo((Nodo) e);
                            RESULT = tmp;
                         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_DEC",9, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_VARIABLES ::= DECLARACION_VARIABLES coma DECLARACION_VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo)RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",10, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_VARIABLES ::= DECLARACION_VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a;  
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",10, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_VARIABLE ::= DECLARACION_VARIABLE_ID igual VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                            Nodo tmp = new Nodo("DECLARACION_VARIABLE");
                            tmp.setNumNodo(parser.contador++);
                            tmp.addHijo((Nodo)a);
                            tmp.addHijo((Nodo)b);
                            RESULT = tmp;
                        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",11, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_VARIABLE ::= DECLARACION_VARIABLE_ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                            Nodo tmp = new Nodo("DECLARACION_VARIABLE");
                            tmp.setNumNodo(parser.contador++);
                            tmp.addHijo((Nodo)a);
                            RESULT = tmp;
                         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",11, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_VARIABLE_ID ::= DECLARACION_VARIABLE_ID corcheteIzquierda corcheteDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		  
                                RESULT = a;
                                Nodo tmp = new Nodo("DECLARACION_VARIABLE_ID");
                                tmp.setNumNodo(parser.contador++);
                                ((Nodo)RESULT).addHijo(tmp);
                            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ID",12, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_VARIABLE_ID ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                                Nodo tmp = new Nodo("DECLARACION_VARIABLE_ID");
                                tmp.setNumNodo(parser.contador++);
                                tmp.setValor(a);
                                RESULT = tmp;
                             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ID",12, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETROS_DEC ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETROS_DEC ::= PARAMETROS_DEC_LISTA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC",18, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETROS_DEC_LISTA ::= PARAMETROS_DEC coma PARAMETRO_DEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC_LISTA",19, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETROS_DEC_LISTA ::= PARAMETRO_DEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC_LISTA",19, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMETRO_DEC ::= final_ TIPO DECLARACION_VARIABLE_ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("PARAMETRO_DEC");
                    Nodo a1 = new Nodo("FINAL");
                    a1.setNumNodo(parser.contador++);
                    
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo(a1);
                    tmp.addHijo((Nodo) b);
                    tmp.addHijo((Nodo) c);
                    RESULT = tmp;
                 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO_DEC",20, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETRO_DEC ::= TIPO DECLARACION_VARIABLE_ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("PARAMETRO_DEC");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) a);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO_DEC",20, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= int_ 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("int");
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= double_ 
            {
              Object RESULT =null;
		  
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("double");
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= char_ 
            {
              Object RESULT =null;
		  
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("char");
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= boolean_ 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("boolean");
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= void_ 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("void");
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("TIPO");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor(a);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES",15, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUES ::= BLOQUES_L 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES",15, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUES_L ::= BLOQUES_L BLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES_L",16, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUES_L ::= BLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("BLOQUE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)a);
                RESULT = tmp; 
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES_L",16, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE ::= print_ parIzquierda E parDerecha puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		  
                Nodo tmp = new Nodo("PRINT");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
           
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE ::= println_ parIzquierda E parDerecha puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 
                Nodo tmp = new Nodo("PRINTLN");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUE ::= printTabla_ parIzquierda parDerecha puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		 
                Nodo tmp = new Nodo("PRINT_TABLA");
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE ::= read_file_ parIzquierda E parDerecha puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 
                Nodo tmp = new Nodo("READ_FILE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUE ::= return_ puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("RETURN");
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOQUE ::= return_ VALOR puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		
                Nodo tmp = new Nodo("RETURN");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUE ::= break_ puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		
                Nodo tmp = new Nodo("BREAK");
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUE ::= continue_ puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("CONTINUE");
                tmp.setNumNodo(parser.contador++);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOQUE ::= TIPO DECLARACION_VARIABLES puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("DECLARACION_VARIABLES");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) a);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE ::= id igual VALOR puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("ASIGNACION");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);

                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOQUE ::= id parIzquierda PARAMETROS parDerecha puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 
                Nodo tmp = new Nodo("LLAMADA_METODO");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);

                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                if(b != null)
                    tmp.addHijo((Nodo) b);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUE ::= UNARIO puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOQUE ::= IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUE ::= WHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOQUE ::= DO_WHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		RESULT = a;
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOQUE ::= FOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQUE ::= SWITCH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BLOQUE ::= ACCESO_OBJETO puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BLOQUE ::= ASIGNA_ARREGLO puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // UNARIO ::= id masmas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                Nodo tmp = new Nodo("UNARIO");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);
                Nodo x1 = new Nodo("OPERADOR");
                x1.setNumNodo(parser.contador++);
                x1.setValor("++");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                tmp.addHijo(x1);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",21, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // UNARIO ::= id menosmenos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("UNARIO");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);
                Nodo x1 = new Nodo("OPERADOR");
                x1.setNumNodo(parser.contador++);
                x1.setValor("--");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                tmp.addHijo(x1);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",21, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // UNARIO ::= masmas id 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("UNARIO");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);
                Nodo x1 = new Nodo("OPERADOR");
                x1.setNumNodo(parser.contador++);
                x1.setValor("++");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(x1);
                tmp.addHijo(a1);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",21, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // UNARIO ::= menosmenos id 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("UNARIO");
                Nodo a1 = new Nodo("ID");
                a1.setNumNodo(parser.contador++);
                a1.setValor(a);
                Nodo x1 = new Nodo("OPERADOR");
                x1.setNumNodo(parser.contador++);
                x1.setValor("--");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(x1);
                tmp.addHijo(a1);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",21, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAMETROS ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMETROS ::= PARAMETRO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMETRO ::= PARAMETRO coma VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",23, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAMETRO ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",23, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF ::= IF_LISTA else_ llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
            Nodo tmp = new Nodo("IF");
            Nodo b1 = new Nodo("ELSE");
            b1.setNumNodo(parser.contador++);
            if(c != null)
                b1.addHijo((Nodo) c);
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo(b1);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF ::= IF_LISTA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("IF");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT = tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IF_LISTA ::= IF_LISTA else_ if_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                    RESULT = a;
                    Nodo tmp = new Nodo("ELSE-IF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo) c);
                    if(d != null){
                        tmp.addHijo((Nodo) d);
                    }
                    ((Nodo)RESULT).addHijo(tmp);
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",25, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF_LISTA ::= if_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
                    Nodo tmp = new Nodo("IF");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo) b);
                    if(c != null){
                        tmp.addHijo((Nodo) c);
                    }
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",25, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // WHILE ::= while_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
                Nodo tmp = new Nodo("WHILE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) a);
                if(b != null)
                    tmp.addHijo((Nodo)b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("WHILE",26, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DO_WHILE ::= do_ llaveIzquierda BLOQUES llaveDerecha while_ parIzquierda E parDerecha puntoycoma 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		 
                Nodo tmp = new Nodo("DO_WHILE");
                tmp.setNumNodo(parser.contador++);
                if(a != null)
                    tmp.addHijo((Nodo)a);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",27, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FOR ::= for_ parIzquierda FOR_INIT puntoycoma E puntoycoma FOR_UPDATE parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-10)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
                Nodo tmp = new Nodo("FOR");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)a);
                tmp.addHijo((Nodo) b);
                tmp.addHijo((Nodo) c);
                if(d!= null)
                    tmp.addHijo((Nodo) d);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("FOR",28, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FOR_INIT ::= TIPO DECLARACION_VARIABLES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                    Nodo tmp = new Nodo("FOR_INIT");
                    Nodo a1 = new Nodo("DECLARACION");
                    a1.setNumNodo(parser.contador++);
                    a1.addHijo((Nodo)a);
                    a1.addHijo((Nodo)b);
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo(a1);
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("FOR_INIT",29, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FOR_INIT ::= id igual VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("FOR_INIT");
                Nodo a1 = new Nodo("ASIGNACION");
                Nodo a2 = new Nodo("ID");
                a2.setNumNodo(parser.contador++);
                a2.setValor(a);
                a1.setNumNodo(parser.contador++);
                a1.addHijo(a2);
                a1.addHijo((Nodo)b);
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                RESULT = tmp;
             
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("FOR_INIT",29, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FOR_UPDATE ::= id igual VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("FOR_UPDATE");
                Nodo a1 = new Nodo("ASIGNACION");
                Nodo a2 = new Nodo("ID");
                a2.setNumNodo(parser.contador++);
                a2.setValor(a);
                a1.setNumNodo(parser.contador++);
                a1.addHijo(a2);
                a1.addHijo((Nodo)b);
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo(a1);
                RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",30, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FOR_UPDATE ::= UNARIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("FOR_UPDATE");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)a);
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",30, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SWITCH ::= switch_ parIzquierda E parDerecha llaveIzquierda CASES llaveDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
            Nodo tmp = new Nodo("SWITCH");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            if(b != null)
                tmp.addHijo((Nodo)b);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",31, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CASES ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CASES ::= CASESL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CASESL ::= CASESL CASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASESL",33, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CASESL ::= CASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASESL",33, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CASE ::= case_ E dospuntos BLOQUES 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("CASE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) a);
                if(b != null)
                    tmp.addHijo((Nodo) b);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASE",34, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CASE ::= default_ dospuntos BLOQUES 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                Nodo tmp = new Nodo("DEFAULT");
                tmp.setNumNodo(parser.contador++);
                if(a != null)
                    tmp.addHijo((Nodo) a);
                RESULT = tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("CASE",34, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ACCESO_OBJETO ::= ACCESO_OBJETO punto ACCESO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_OBJETO",35, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ACCESO_OBJETO ::= id punto ACCESO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("ACCESO_MIEMBRO");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor(a);
                    tmp.addHijo((Nodo) b);
                    RESULT = tmp;
                
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_OBJETO",35, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ACCESO ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("ID");
            tmp.setNumNodo(parser.contador++);
            tmp.setValor(a);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",36, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ACCESO ::= id parIzquierda PARAMETROS parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
            Nodo tmp = new Nodo("METODO");
            Nodo a1 = new Nodo("ID");
            a1.setNumNodo(parser.contador++);
            a1.setValor(a);
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo(a1);
            if(b != null)
                tmp.addHijo((Nodo)b);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",36, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ASIGNA_ARREGLO ::= id DIMENSION igual VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("ASIGNA_ARREGLO");
            Nodo a1 = new Nodo("ID");
            a1.setNumNodo(parser.contador++);
            a1.setValor(a);
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo(a1);
            if(b!= null)
                tmp.addHijo((Nodo)b);
            tmp.addHijo((Nodo)c);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA_ARREGLO",39, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALOR ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALOR ::= new_ id parIzquierda PARAMETROS parDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		  
            Nodo tmp = new Nodo("OBJETO");
            tmp.setValor(a);
            tmp.setNumNodo(parser.contador++);
            if(b != null)
                tmp.addHijo((Nodo)b);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALOR ::= new_ TIPO DIMENSION 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("ARREGLO");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            tmp.addHijo((Nodo)b);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALOR ::= llaveIzquierda ARREGLO llaveDerecha 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
            Nodo tmp = new Nodo("ARREGLO");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            RESULT = tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DIMENSION ::= DIMENSION corcheteIzquierda E corcheteDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",37, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DIMENSION ::= corcheteIzquierda E corcheteDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                    Nodo tmp = new Nodo("DIMENSION");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo) a);
                    RESULT = tmp;
                 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",37, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARREGLO ::= ARREGLO coma VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; ((Nodo) RESULT).addHijo((Nodo)b); 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",38, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ARREGLO ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",38, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= E mas E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("+");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= E menos E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("-");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= E asterisco E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("*");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= E diagonal E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("/");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= E modulo E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("%");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= menos E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("-");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);;
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= mas E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("+");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= E masmas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("++");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= E menosmenos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("--");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= masmas E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("++");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= menosmenos E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("--");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= E mayorque E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo(">");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= E menorque E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("<");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= E mayorigual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo(">=");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= E menorigual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("<=");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= E igualigual E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("==");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= E diferente E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("!=");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= E and E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("&&");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
            
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= E or E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("||");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= not E 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("!");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= E xor E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
            Nodo tmp = new Nodo("^");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= E interrogacion E dospuntos E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
            Nodo tmp = new Nodo("?");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo) a);
            tmp.addHijo((Nodo) b);
            tmp.addHijo((Nodo) c);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= parIzquierda E parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 RESULT = a; 
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E ::= id DIMENSION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
            Nodo tmp = new Nodo("ACCESO_ARREGLO");
            tmp.setNumNodo(parser.contador++);
            tmp.setValor(a);
            tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // E ::= entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("entero");
		r1.setNumNodo(parser.contador++);
		r1.setValor(a);
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // E ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("decimal");
		r1.setNumNodo(parser.contador++);
		r1.setValor(a);
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // E ::= tstring 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("tstring");
		r1.setNumNodo(parser.contador++);
		r1.setValor(a);
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // E ::= tchar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("tchar");
		r1.setNumNodo(parser.contador++);
		r1.setValor(a);
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // E ::= true_ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		 
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("boolean");
		r1.setNumNodo(parser.contador++);
		r1.setValor("true");
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // E ::= false_ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		  
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("boolean");
		r1.setNumNodo(parser.contador++);
		r1.setValor("false");
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // E ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.peek()).value;
		
                Nodo tmp = new Nodo("E");
		Nodo r1 = new Nodo("id");
		r1.setNumNodo(parser.contador++);
		r1.setValor(a);
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) r1);
		RESULT=tmp;
         
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // E ::= id parIzquierda PARAMETROS parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
            Nodo tmp = new Nodo("LLAMADA_METODO");
            tmp.setNumNodo(parser.contador++);
            tmp.setValor(a);
            if(b!= null)
                tmp.addHijo((Nodo) b);
            RESULT=tmp;
        
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // E ::= read_file_ parIzquierda E parDerecha 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-1)).value;
		 
                Nodo tmp = new Nodo("READ_FILE");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo) b);
                RESULT = tmp;
    
              CUP$ReporteSintactico$result = parser.getSymbolFactory().newSymbol("E",40, ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.elementAt(CUP$ReporteSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ReporteSintactico$stack.peek()), RESULT);
            }
          return CUP$ReporteSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ReporteSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ReporteSintactico$do_action(
    int                        CUP$ReporteSintactico$act_num,
    java_cup.runtime.lr_parser CUP$ReporteSintactico$parser,
    java.util.Stack            CUP$ReporteSintactico$stack,
    int                        CUP$ReporteSintactico$top)
    throws java.lang.Exception
    {
              return CUP$ReporteSintactico$do_action_part00000000(
                               CUP$ReporteSintactico$act_num,
                               CUP$ReporteSintactico$parser,
                               CUP$ReporteSintactico$stack,
                               CUP$ReporteSintactico$top);
    }
}

}
