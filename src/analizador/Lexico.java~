/* The following code was generated by JFlex 1.6.1 */

package analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\5\1\64\1\6\1\4\22\0\1\6\1\57\1\35"+
    "\2\0\1\53\1\60\1\36\1\41\1\42\1\10\1\51\1\46\1\52"+
    "\1\2\1\7\12\1\1\47\1\45\1\55\1\56\1\54\1\50\1\0"+
    "\32\3\1\43\1\63\1\44\1\62\1\3\1\0\1\25\1\13\1\16"+
    "\1\23\1\22\1\27\1\3\1\32\1\15\1\3\1\33\1\14\1\3"+
    "\1\30\1\20\1\11\1\3\1\17\1\26\1\21\1\12\1\24\1\34"+
    "\1\31\2\3\1\37\1\61\1\40\7\0\1\64\53\0\1\3\21\0"+
    "\1\3\u1f54\0\1\3\17\0\1\64\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\2\5\1\6\1\7"+
    "\16\4\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\2\1\1\33\2\34\1\35"+
    "\1\36\2\34\1\37\1\36\1\0\1\40\1\0\1\41"+
    "\1\42\4\4\1\43\11\4\1\44\12\4\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\34\1\57\1\60\1\61\1\62\1\34\1\63\1\64"+
    "\2\40\1\0\5\4\1\65\17\4\1\66\3\4\2\34"+
    "\2\0\10\4\1\67\1\70\1\4\1\71\1\72\3\4"+
    "\1\73\5\4\1\74\1\4\1\34\1\40\2\34\1\40"+
    "\1\34\1\0\1\40\2\4\1\75\1\4\1\76\1\4"+
    "\1\77\10\4\1\100\1\101\1\102\1\34\1\40\1\34"+
    "\1\40\1\103\5\4\1\104\1\4\1\105\2\4\1\106"+
    "\1\107\1\110\1\111\1\4\1\112\1\4\1\113\1\114"+
    "\2\4\1\115\1\116\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\237\0\u0109\0\u013e"+
    "\0\237\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\237\0\237\0\237\0\237\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\237\0\237\0\u04c3\0\u04f8\0\237"+
    "\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\237\0\u066b"+
    "\0\u06a0\0\237\0\u06d5\0\u070a\0\u073f\0\237\0\u0774\0\u07a9"+
    "\0\u07de\0\u0813\0\237\0\237\0\u0848\0\u087d\0\u08b2\0\u08e7"+
    "\0\u0109\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a"+
    "\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02"+
    "\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\237\0\237\0\237\0\237\0\u0d40"+
    "\0\237\0\237\0\237\0\237\0\u0d75\0\237\0\u07a9\0\u0daa"+
    "\0\237\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0109"+
    "\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090"+
    "\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u0109"+
    "\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab"+
    "\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u0109"+
    "\0\u0109\0\u1553\0\u0109\0\u0109\0\u1588\0\u15bd\0\u15f2\0\u0109"+
    "\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u0109\0\u1730\0\u1765"+
    "\0\u066b\0\u179a\0\u17cf\0\u070a\0\u1804\0\u1839\0\u1839\0\u186e"+
    "\0\u18a3\0\u18d8\0\u190d\0\u0109\0\u1942\0\u0109\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u0109\0\u0109"+
    "\0\u0109\0\u1b1f\0\u1b1f\0\u1b54\0\u1b54\0\u0109\0\u1b89\0\u1bbe"+
    "\0\u1bf3\0\u1c28\0\u1c5d\0\u0109\0\u1c92\0\u0109\0\u1cc7\0\u1cfc"+
    "\0\u0109\0\u0109\0\u0109\0\u0109\0\u1d31\0\u0109\0\u1d66\0\u0109"+
    "\0\u0109\0\u1d9b\0\u1dd0\0\u0109\0\u0109\0\u0109";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13"+
    "\1\14\1\7\1\15\1\7\1\16\1\17\1\20\1\7"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\3\7\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\4\1\0\4\60\2\0\1\60\1\61\25\60\1\62"+
    "\25\60\1\63\1\60\4\64\2\0\1\64\1\65\26\64"+
    "\1\66\24\64\1\67\1\64\66\0\1\5\1\70\63\0"+
    "\1\7\1\0\1\7\5\0\24\7\35\0\1\11\66\0"+
    "\1\71\1\72\45\0\1\73\64\0\1\74\7\0\1\7"+
    "\1\0\1\7\5\0\1\7\1\75\4\7\1\76\15\7"+
    "\31\0\1\7\1\0\1\7\5\0\6\7\1\77\1\100"+
    "\14\7\31\0\1\7\1\0\1\7\5\0\16\7\1\101"+
    "\1\102\4\7\31\0\1\7\1\0\1\7\5\0\3\7"+
    "\1\103\3\7\1\104\4\7\1\105\4\7\1\106\2\7"+
    "\31\0\1\7\1\0\1\7\5\0\11\7\1\107\12\7"+
    "\31\0\1\7\1\0\1\7\5\0\6\7\1\110\15\7"+
    "\31\0\1\7\1\0\1\7\5\0\3\7\1\111\14\7"+
    "\1\112\3\7\31\0\1\7\1\0\1\7\5\0\7\7"+
    "\1\113\1\7\1\114\12\7\31\0\1\7\1\0\1\7"+
    "\5\0\7\7\1\115\14\7\31\0\1\7\1\0\1\7"+
    "\5\0\2\7\1\116\21\7\31\0\1\7\1\0\1\7"+
    "\5\0\10\7\1\117\12\7\1\120\31\0\1\7\1\0"+
    "\1\7\5\0\4\7\1\121\2\7\1\122\4\7\1\123"+
    "\7\7\31\0\1\7\1\0\1\7\5\0\1\7\1\124"+
    "\22\7\31\0\1\7\1\0\1\7\5\0\21\7\1\125"+
    "\2\7\101\0\1\126\4\0\1\127\60\0\1\130\3\0"+
    "\1\131\64\0\1\132\64\0\1\133\64\0\1\134\64\0"+
    "\1\135\66\0\1\136\65\0\1\137\3\0\4\60\2\0"+
    "\27\60\1\0\25\60\1\0\5\60\2\0\1\60\1\71"+
    "\1\140\24\60\1\0\25\60\1\0\1\60\17\0\1\141"+
    "\1\0\1\142\6\0\1\143\4\0\1\144\27\0\4\64"+
    "\2\0\30\64\1\0\24\64\1\0\5\64\2\0\1\64"+
    "\1\71\1\145\25\64\1\0\24\64\1\0\1\64\17\0"+
    "\1\141\1\0\1\142\6\0\1\143\5\0\1\146\27\0"+
    "\1\147\63\0\4\71\1\150\1\151\57\71\10\72\1\152"+
    "\54\72\1\0\1\7\1\0\1\7\5\0\2\7\1\153"+
    "\21\7\31\0\1\7\1\0\1\7\5\0\4\7\1\154"+
    "\2\7\1\155\14\7\31\0\1\7\1\0\1\7\5\0"+
    "\11\7\1\156\12\7\31\0\1\7\1\0\1\7\5\0"+
    "\7\7\1\157\14\7\31\0\1\7\1\0\1\7\5\0"+
    "\10\7\1\160\13\7\31\0\1\7\1\0\1\7\5\0"+
    "\14\7\1\161\7\7\31\0\1\7\1\0\1\7\5\0"+
    "\17\7\1\162\4\7\31\0\1\7\1\0\1\7\5\0"+
    "\15\7\1\163\6\7\31\0\1\7\1\0\1\7\5\0"+
    "\14\7\1\164\7\7\31\0\1\7\1\0\1\7\5\0"+
    "\10\7\1\165\13\7\31\0\1\7\1\0\1\7\5\0"+
    "\1\7\1\166\22\7\31\0\1\7\1\0\1\7\5\0"+
    "\15\7\1\167\6\7\31\0\1\7\1\0\1\7\5\0"+
    "\10\7\1\170\13\7\31\0\1\7\1\0\1\7\5\0"+
    "\1\7\1\171\22\7\31\0\1\7\1\0\1\7\5\0"+
    "\16\7\1\172\5\7\31\0\1\7\1\0\1\7\5\0"+
    "\4\7\1\173\17\7\31\0\1\7\1\0\1\7\5\0"+
    "\15\7\1\174\6\7\31\0\1\7\1\0\1\7\5\0"+
    "\14\7\1\175\7\7\31\0\1\7\1\0\1\7\5\0"+
    "\4\7\1\176\17\7\31\0\1\7\1\0\1\7\5\0"+
    "\17\7\1\177\4\7\31\0\1\7\1\0\1\7\5\0"+
    "\6\7\1\200\15\7\31\0\1\7\1\0\1\7\5\0"+
    "\3\7\1\201\20\7\31\0\1\7\1\0\1\7\5\0"+
    "\3\7\1\202\20\7\31\0\1\7\1\0\1\7\5\0"+
    "\4\7\1\203\17\7\30\0\4\140\2\72\2\140\1\204"+
    "\24\140\1\72\25\140\1\72\1\140\4\145\2\72\2\145"+
    "\1\205\25\145\1\72\24\145\1\72\1\145\5\0\1\151"+
    "\57\0\7\206\1\151\1\207\54\206\1\0\1\7\1\0"+
    "\1\7\5\0\3\7\1\210\20\7\31\0\1\7\1\0"+
    "\1\7\5\0\13\7\1\211\3\7\1\212\4\7\31\0"+
    "\1\7\1\0\1\7\5\0\10\7\1\213\13\7\31\0"+
    "\1\7\1\0\1\7\5\0\14\7\1\214\7\7\31\0"+
    "\1\7\1\0\1\7\5\0\3\7\1\215\20\7\31\0"+
    "\1\7\1\0\1\7\5\0\15\7\1\216\6\7\31\0"+
    "\1\7\1\0\1\7\5\0\10\7\1\217\13\7\31\0"+
    "\1\7\1\0\1\7\5\0\11\7\1\220\12\7\31\0"+
    "\1\7\1\0\1\7\5\0\6\7\1\221\15\7\31\0"+
    "\1\7\1\0\1\7\5\0\1\7\1\222\22\7\31\0"+
    "\1\7\1\0\1\7\5\0\11\7\1\223\12\7\31\0"+
    "\1\7\1\0\1\7\5\0\11\7\1\224\12\7\31\0"+
    "\1\7\1\0\1\7\5\0\11\7\1\225\12\7\31\0"+
    "\1\7\1\0\1\7\5\0\2\7\1\226\21\7\31\0"+
    "\1\7\1\0\1\7\5\0\14\7\1\227\7\7\31\0"+
    "\1\7\1\0\1\7\5\0\12\7\1\230\11\7\31\0"+
    "\1\7\1\0\1\7\5\0\10\7\1\231\13\7\31\0"+
    "\1\7\1\0\1\7\5\0\10\7\1\232\13\7\31\0"+
    "\1\7\1\0\1\7\5\0\10\7\1\233\13\7\31\0"+
    "\1\7\1\0\1\7\5\0\14\7\1\234\7\7\31\0"+
    "\1\7\1\0\1\7\5\0\15\7\1\235\6\7\31\0"+
    "\1\7\1\0\1\7\5\0\3\7\1\236\20\7\31\0"+
    "\1\7\1\0\1\7\5\0\3\7\1\237\20\7\30\0"+
    "\4\240\2\206\1\240\1\241\1\242\24\240\1\206\25\240"+
    "\1\206\1\240\4\243\2\206\1\243\1\244\1\245\25\243"+
    "\1\206\24\243\1\206\1\243\7\72\1\246\1\152\63\72"+
    "\1\247\1\152\54\72\1\0\1\7\1\0\1\7\5\0"+
    "\4\7\1\250\17\7\31\0\1\7\1\0\1\7\5\0"+
    "\14\7\1\251\7\7\31\0\1\7\1\0\1\7\5\0"+
    "\10\7\1\252\13\7\31\0\1\7\1\0\1\7\5\0"+
    "\11\7\1\253\12\7\31\0\1\7\1\0\1\7\5\0"+
    "\22\7\1\254\1\7\31\0\1\7\1\0\1\7\5\0"+
    "\11\7\1\255\12\7\31\0\1\7\1\0\1\7\5\0"+
    "\15\7\1\256\6\7\31\0\1\7\1\0\1\7\5\0"+
    "\4\7\1\257\17\7\31\0\1\7\1\0\1\7\5\0"+
    "\6\7\1\260\15\7\31\0\1\7\1\0\1\7\5\0"+
    "\17\7\1\261\4\7\31\0\1\7\1\0\1\7\5\0"+
    "\3\7\1\262\20\7\31\0\1\7\1\0\1\7\5\0"+
    "\1\7\1\263\22\7\31\0\1\7\1\0\1\7\5\0"+
    "\6\7\1\264\15\7\31\0\1\7\1\0\1\7\5\0"+
    "\4\7\1\265\17\7\31\0\1\7\1\0\1\7\5\0"+
    "\5\7\1\266\16\7\31\0\1\7\1\0\1\7\5\0"+
    "\3\7\1\267\20\7\31\0\1\7\1\0\1\7\5\0"+
    "\11\7\1\270\12\7\31\0\1\7\1\0\1\7\5\0"+
    "\11\7\1\271\12\7\30\0\4\140\2\72\1\140\1\272"+
    "\1\204\24\140\1\72\25\140\1\72\5\140\2\72\1\140"+
    "\1\273\1\204\24\140\1\72\25\140\1\72\1\140\4\145"+
    "\2\72\1\145\1\274\1\205\25\145\1\72\24\145\1\72"+
    "\5\145\2\72\1\145\1\275\1\205\25\145\1\72\24\145"+
    "\1\72\1\145\7\0\1\206\56\0\1\7\1\0\1\7"+
    "\5\0\5\7\1\276\16\7\31\0\1\7\1\0\1\7"+
    "\5\0\10\7\1\277\13\7\31\0\1\7\1\0\1\7"+
    "\5\0\3\7\1\300\20\7\31\0\1\7\1\0\1\7"+
    "\5\0\5\7\1\301\16\7\31\0\1\7\1\0\1\7"+
    "\5\0\14\7\1\302\7\7\31\0\1\7\1\0\1\7"+
    "\5\0\17\7\1\303\4\7\31\0\1\7\1\0\1\7"+
    "\5\0\17\7\1\304\4\7\31\0\1\7\1\0\1\7"+
    "\5\0\12\7\1\305\11\7\31\0\1\7\1\0\1\7"+
    "\5\0\11\7\1\306\12\7\31\0\1\7\1\0\1\7"+
    "\5\0\3\7\1\307\20\7\31\0\1\7\1\0\1\7"+
    "\5\0\14\7\1\310\7\7\31\0\1\7\1\0\1\7"+
    "\5\0\5\7\1\311\16\7\31\0\1\7\1\0\1\7"+
    "\5\0\21\7\1\312\2\7\30\0\4\60\2\0\1\60"+
    "\1\240\25\60\1\0\25\60\1\0\1\60\4\64\2\0"+
    "\1\64\1\243\26\64\1\0\24\64\1\0\1\64\1\0"+
    "\1\7\1\0\1\7\5\0\11\7\1\313\12\7\31\0"+
    "\1\7\1\0\1\7\5\0\17\7\1\314\4\7\31\0"+
    "\1\7\1\0\1\7\5\0\10\7\1\315\13\7\31\0"+
    "\1\7\1\0\1\7\5\0\17\7\1\316\4\7\31\0"+
    "\1\7\1\0\1\7\5\0\1\7\1\317\22\7\31\0"+
    "\1\7\1\0\1\7\5\0\15\7\1\320\6\7\31\0"+
    "\1\7\1\0\1\7\5\0\10\7\1\321\13\7\31\0"+
    "\1\7\1\0\1\7\5\0\5\7\1\322\16\7\31\0"+
    "\1\7\1\0\1\7\5\0\11\7\1\323\12\7\31\0"+
    "\1\7\1\0\1\7\5\0\11\7\1\324\12\7\31\0"+
    "\1\7\1\0\1\7\5\0\10\7\1\325\13\7\31\0"+
    "\1\7\1\0\1\7\5\0\12\7\1\326\11\7\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7685];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\1\11\20\1\14\11"+
    "\2\1\1\11\6\1\1\11\2\1\1\11\3\1\1\11"+
    "\1\1\1\0\1\1\1\0\2\11\31\1\12\11\1\1"+
    "\4\11\1\1\1\11\2\1\1\11\1\0\33\1\2\0"+
    "\36\1\1\0\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	StringBuffer string = new StringBuffer();
	boolean blancos = false;
        
        private String valorError = "";
        private int columnaError = 0;
        private boolean isError = false;

        private ArrayList<ErrorC> errores = new ArrayList<>();

        public ArrayList<ErrorC> getErrores(){
            return this.errores;
        }

        public void addError(){
            if(this.isError){
                ErrorC error = new ErrorC();
                error.setTipo("Léxico");
                error.setLinea(yyline+1);
                error.setColumna(this.columnaError);
                error.setValor(this.valorError);
                error.setDescripcion("Carácter no reconocido.");
                this.errores.add(error);
                this.isError = false;
                this.columnaError = 0;
                this.valorError = "";
            }
            
        }
        
	private Symbol symbol(int type) {
                this.addError();
		return new Symbol(type, yyline+1, yycolumn+1);
	}	
  
	private Symbol symbol(int type, Object value) {
                this.addError();
		return new Symbol(type, yyline+1, yycolumn+1, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { if(!this.isError){
                        this.isError = true;
                        this.columnaError = yycolumn+1;
                    }
                    this.valorError += yytext();
            }
          case 80: break;
          case 2: 
            { return symbol(Sym.entero, yytext());
            }
          case 81: break;
          case 3: 
            { return symbol(Sym.punto);
            }
          case 82: break;
          case 4: 
            { return symbol(Sym.id, yytext());
            }
          case 83: break;
          case 5: 
            { if(this.isError){this.valorError += " ";}
            }
          case 84: break;
          case 6: 
            { return symbol(Sym.diagonal);
            }
          case 85: break;
          case 7: 
            { return symbol(Sym.asterisco);
            }
          case 86: break;
          case 8: 
            { string.setLength(0); yybegin(STRING);
            }
          case 87: break;
          case 9: 
            { string.setLength(0); yybegin(CHAR);
            }
          case 88: break;
          case 10: 
            { return symbol(Sym.llaveIzquierda);
            }
          case 89: break;
          case 11: 
            { return symbol(Sym.llaveDerecha);
            }
          case 90: break;
          case 12: 
            { return symbol(Sym.parIzquierda);
            }
          case 91: break;
          case 13: 
            { return symbol(Sym.parDerecha);
            }
          case 92: break;
          case 14: 
            { return symbol(Sym.corcheteIzquierda);
            }
          case 93: break;
          case 15: 
            { return symbol(Sym.corcheteDerecha);
            }
          case 94: break;
          case 16: 
            { return symbol(Sym.puntoycoma);
            }
          case 95: break;
          case 17: 
            { return symbol(Sym.coma);
            }
          case 96: break;
          case 18: 
            { return symbol(Sym.dospuntos);
            }
          case 97: break;
          case 19: 
            { return symbol(Sym.interrogacion);
            }
          case 98: break;
          case 20: 
            { return symbol(Sym.mas);
            }
          case 99: break;
          case 21: 
            { return symbol(Sym.menos);
            }
          case 100: break;
          case 22: 
            { return symbol(Sym.modulo);
            }
          case 101: break;
          case 23: 
            { return symbol(Sym.mayorque);
            }
          case 102: break;
          case 24: 
            { return symbol(Sym.menorque);
            }
          case 103: break;
          case 25: 
            { return symbol(Sym.igual);
            }
          case 104: break;
          case 26: 
            { return symbol(Sym.not);
            }
          case 105: break;
          case 27: 
            { return symbol(Sym.xor);
            }
          case 106: break;
          case 28: 
            { string.append( yytext() );
            }
          case 107: break;
          case 29: 
            { yybegin(YYINITIAL);
					   return symbol(Sym.tstring, string.toString());
            }
          case 108: break;
          case 30: 
            { string.append('\\');
            }
          case 109: break;
          case 31: 
            { yybegin(YYINITIAL);
					   return symbol(Sym.tchar, string.toString());
            }
          case 110: break;
          case 32: 
            { /* se ignora */
            }
          case 111: break;
          case 33: 
            { return symbol(Sym.diagonaligual);
            }
          case 112: break;
          case 34: 
            { return symbol(Sym.porigual);
            }
          case 113: break;
          case 35: 
            { return symbol(Sym.if_);
            }
          case 114: break;
          case 36: 
            { return symbol(Sym.do_);
            }
          case 115: break;
          case 37: 
            { return symbol(Sym.masmas);
            }
          case 116: break;
          case 38: 
            { return symbol(Sym.masigual);
            }
          case 117: break;
          case 39: 
            { return symbol(Sym.menosmenos);
            }
          case 118: break;
          case 40: 
            { return symbol(Sym.menosigual);
            }
          case 119: break;
          case 41: 
            { return symbol(Sym.mayorigual);
            }
          case 120: break;
          case 42: 
            { return symbol(Sym.menorigual);
            }
          case 121: break;
          case 43: 
            { return symbol(Sym.igualigual);
            }
          case 122: break;
          case 44: 
            { return symbol(Sym.diferente);
            }
          case 123: break;
          case 45: 
            { return symbol(Sym.and);
            }
          case 124: break;
          case 46: 
            { return symbol(Sym.or);
            }
          case 125: break;
          case 47: 
            { string.append('\r');
            }
          case 126: break;
          case 48: 
            { string.append('\t');
            }
          case 127: break;
          case 49: 
            { string.append('\n');
            }
          case 128: break;
          case 50: 
            { string.append('\"');
            }
          case 129: break;
          case 51: 
            { string.append('\'');
            }
          case 130: break;
          case 52: 
            { return symbol(Sym.decimal, yytext());
            }
          case 131: break;
          case 53: 
            { return symbol(Sym.int_);
            }
          case 132: break;
          case 54: 
            { return symbol(Sym.for_);
            }
          case 133: break;
          case 55: 
            { return symbol(Sym.case_);
            }
          case 134: break;
          case 56: 
            { return symbol(Sym.char_);
            }
          case 135: break;
          case 57: 
            { return symbol(Sym.true_);
            }
          case 136: break;
          case 58: 
            { return symbol(Sym.else_);
            }
          case 137: break;
          case 59: 
            { return symbol(Sym.void_);
            }
          case 138: break;
          case 60: 
            { return symbol(Sym.null_);
            }
          case 139: break;
          case 61: 
            { return symbol(Sym.print_);
            }
          case 140: break;
          case 62: 
            { return symbol(Sym.break_);
            }
          case 141: break;
          case 63: 
            { return symbol(Sym.class_);
            }
          case 142: break;
          case 64: 
            { return symbol(Sym.final_);
            }
          case 143: break;
          case 65: 
            { return symbol(Sym.false_);
            }
          case 144: break;
          case 66: 
            { return symbol(Sym.while_);
            }
          case 145: break;
          case 67: 
            { return symbol(Sym.public_);
            }
          case 146: break;
          case 68: 
            { return symbol(Sym.return_);
            }
          case 147: break;
          case 69: 
            { return symbol(Sym.double_);
            }
          case 148: break;
          case 70: 
            { return symbol(Sym.static_);
            }
          case 149: break;
          case 71: 
            { return symbol(Sym.switch_);
            }
          case 150: break;
          case 72: 
            { return symbol(Sym.private_);
            }
          case 151: break;
          case 73: 
            { return symbol(Sym.println_);
            }
          case 152: break;
          case 74: 
            { return symbol(Sym.boolean_);
            }
          case 153: break;
          case 75: 
            { return symbol(Sym.extends_);
            }
          case 154: break;
          case 76: 
            { return symbol(Sym.default_);
            }
          case 155: break;
          case 77: 
            { return symbol(Sym.continue_);
            }
          case 156: break;
          case 78: 
            { return symbol(Sym.abstract_);
            }
          case 157: break;
          case 79: 
            { return symbol(Sym.protected_);
            }
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
