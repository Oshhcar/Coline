package analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import analizador.ast.*;
import analizador.ast.entorno.*;
import analizador.ast.expresion.*;
import analizador.ast.expresion.operacion.*;
import analizador.ast.instruccion.*;
import analizador.ast.instruccion.condicionales.*;
import analizador.ast.instruccion.ciclos.*;

parser code
{:
	private Ast ast;
	
	public Ast getAST(){
		return ast;
	}
	
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + s.left +" Columna "+ s.right + ". Identificador " +s.value + " no reconocido." );
		//AnalizadorError tmp = new AnalizadorError();
		//tmp.setColumna(s.right+1);
		//tmp.setLinea(s.left+1);
		//tmp.setValor(s.value+"");
		//tmp.setError("Sint√°ctico");
        
		//error.add(tmp);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico Fatal en la Linea " + s.left + " Columna "+ s.right +". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
	}
:}

action code
{:

:}

terminal String tstring, tchar, entero, decimal, id, null_, true_, false_;
terminal llaveIzquierda, llaveDerecha, parIzquierda, parDerecha, corcheteIzquierda, corcheteDerecha, puntoycoma, coma, punto;
terminal dospuntos, interrogacion;
terminal mas, menos, asterisco, diagonal, modulo, umenos, umas, masmas, menosmenos, umasmas, umenosmenos;
terminal mayorque, menorque, mayorigual, menorigual, igualigual, diferente;
terminal and, or, not, xor;
terminal igual, masigual, menosigual, porigual, diagonaligual;
terminal public_, protected_, private_, abstract_, static_, final_, extends_, class_;
terminal int_, double_, char_, boolean_;
terminal print_, println_, printTabla_, void_, return_, if_, else_, break_, continue_, while_, do_, for_;
terminal switch_, case_, default_, import_, new_, read_file_, write_file_, graph_, this_, super_;

non terminal INICIO;

non terminal ArrayList<Import> IMPORTS;
non terminal ArrayList<Import> IMPORTSL;
non terminal Clase CLASE;
non terminal ArrayList<Modificador> MODIFICADORES;
non terminal Modificador MODIFICADOR;
non terminal ArrayList<Modificador> MOD;
non terminal ArrayList<NodoAst> CUERPO_CLASE;
non terminal ArrayList<NodoAst> CUERPO_CLASE_LISTA;
non terminal NodoAst CUERPO_CLASE_DEC;
non terminal ArrayList<Asignacion> DECLARACION_VARIABLES;
non terminal Asignacion DECLARACION_VARIABLE;
non terminal Identificador DECLARACION_VARIABLE_ID;
non terminal Tipo TIPO; 
non terminal Expresion VALOR;
non terminal Bloque BLOQUES;
non terminal ArrayList<NodoAst> BLOQUES_L;
non terminal NodoAst BLOQUE;
non terminal ArrayList<Simbolo> PARAMETROS_DEC;
non terminal ArrayList<Simbolo> PARAMETROS_DEC_LISTA;
non terminal Simbolo PARAMETRO_DEC;
non terminal Expresion UNARIO;
non terminal ArrayList<Expresion> PARAMETROS;
non terminal ArrayList<Expresion> PARAMETRO;
non terminal If IF;
non terminal ArrayList<SubIf> IF_LISTA;
non terminal While WHILE;
non terminal DoWhile DO_WHILE;
non terminal For FOR;
non terminal Instruccion FOR_INIT;
non terminal NodoAst FOR_UPDATE;
non terminal Switch SWITCH;
non terminal ArrayList<Case> CASES;
non terminal ArrayList<Case> CASESL;
non terminal Case CASE;
non terminal AccesoObjeto ACCESO_OBJETO;
non terminal AccesoObjeto OBJETO;
non terminal ArrayList<Expresion>  DIM;
non terminal Expresion ACCESO;
non terminal ArrayList<Expresion> DIMENSION; 
non terminal ArrayList<Expresion> ARREGLO;
non terminal AsignacionArreglo ASIGNA_ARREGLO;

non terminal Expresion E;

precedence left interrogacion;
precedence left or;
precedence left and;
precedence left xor;
precedence right not;
precedence left igualigual;
precedence left diferente;
precedence left mayorque, menorque, mayorigual, menorigual;
precedence left mas, menos;
precedence left asterisco, diagonal, modulo;
precedence right masmas, menosmenos;
precedence right umasmas, umenosmenos;
precedence right umenos, umas;

start with INICIO;

INICIO ::=IMPORTS:a CLASE:b
        {: 
            b.setImports(a);
            parser.ast = new Ast(b);
            System.out.println("COLINE OK"); 
        :};

CLASE ::= MOD:a  class_:x id:b llaveIzquierda CUERPO_CLASE:c llaveDerecha 
            {: RESULT = new Clase(a, b, c, xleft, xright); :}
        | MOD:a class_:x id:b extends_ id:c llaveIzquierda CUERPO_CLASE:d llaveDerecha 
            {: RESULT = new Clase(a, b, c, d, xleft, xright); :};

IMPORTS ::= {: RESULT = null; :}
            | IMPORTSL:a {: RESULT = a; :};

IMPORTSL ::= IMPORTSL:a import_:x E:b puntoycoma {: RESULT = a; RESULT.add(new Import(b, xleft, xright)); :}
            |import_:x E:a puntoycoma {: RESULT = new ArrayList<>(); RESULT.add(new Import(a, xleft, xright)); :};

MOD ::= {: RESULT = null; :}
        | MODIFICADORES:a {: RESULT = a; :};

MODIFICADORES ::= MODIFICADORES:a MODIFICADOR:b {:RESULT = a; RESULT.add(b); :}
                | MODIFICADOR:a {: RESULT = new ArrayList<>(); RESULT.add(a); :};

MODIFICADOR ::= public_ {: RESULT = Modificador.PUBLIC; :}
                | protected_ {: RESULT = Modificador.PROTECTED; :}
                | private_ {: RESULT = Modificador.PRIVATE; :}
                | abstract_ {: RESULT = Modificador.ABSTRACT; :}
                | static_ {: RESULT = Modificador.STATIC; :}
                | final_ {: RESULT = Modificador.FINAL; :};

CUERPO_CLASE ::= {: RESULT = null; :}
                | CUERPO_CLASE_LISTA:a {: RESULT = a; :};

CUERPO_CLASE_LISTA ::= CUERPO_CLASE_LISTA:a CUERPO_CLASE_DEC:b {: RESULT = a; RESULT.add(b); :}
                    | CUERPO_CLASE_DEC:a {: RESULT = new ArrayList<>(); RESULT.add(a); :};

CUERPO_CLASE_DEC ::= CLASE:a {: RESULT = a; :}
                    |MOD:a TIPO:b DECLARACION_VARIABLES:c puntoycoma {: RESULT = new Declaracion(a, b, c, bleft, bright); :}
                    |MOD:a TIPO:b id:c parIzquierda PARAMETROS_DEC:d parDerecha llaveIzquierda BLOQUES:e llaveDerecha
                        {: RESULT = new MetodoDec(a, b, c, d, e, bleft, bright); :}
                    |MOD:a id:b parIzquierda PARAMETROS_DEC:c parDerecha llaveIzquierda BLOQUES:d llaveDerecha
                        {: RESULT = new Constructor(a, b, c, d, bleft, bright); :};

DECLARACION_VARIABLES ::= DECLARACION_VARIABLES:a coma DECLARACION_VARIABLE:b {: RESULT = a; RESULT.add(b); :}
                        |DECLARACION_VARIABLE:a {: RESULT = new ArrayList<>(); RESULT.add(a); :};

DECLARACION_VARIABLE ::= DECLARACION_VARIABLE_ID:a igual VALOR:b {: RESULT = new Asignacion(a,b); :}
                        | DECLARACION_VARIABLE_ID:a {: RESULT = new Asignacion(a); :};

DECLARACION_VARIABLE_ID ::= DECLARACION_VARIABLE_ID:a corcheteIzquierda corcheteDerecha{: RESULT = a; RESULT.addDim(); :}
                            |id:a {: RESULT = new Identificador(a, aleft, aright); :};

PARAMETROS_DEC ::= {: RESULT = null; :}
                | PARAMETROS_DEC_LISTA:a {: RESULT = a; :};

PARAMETROS_DEC_LISTA ::= PARAMETROS_DEC:a coma PARAMETRO_DEC:b {: RESULT = a; RESULT.add(b); :}
                | PARAMETRO_DEC:a {: RESULT = new ArrayList<>(); RESULT.add(a); :};

PARAMETRO_DEC ::= final_:a TIPO:b DECLARACION_VARIABLE_ID:c {: RESULT = new Simbolo(b, c.getId(), c.getDim()); :}
            | TIPO:a DECLARACION_VARIABLE_ID:b {: RESULT = new Simbolo(a, b.getId(), b.getDim()); :};

TIPO ::= int_ {: RESULT = new Tipo(Tipo.type.INT); :}
        |double_ {: RESULT = new Tipo(Tipo.type.DOUBLE); :}
        |char_ {: RESULT = new Tipo(Tipo.type.CHAR); :}
        |boolean_ {: RESULT = new Tipo(Tipo.type.BOOLEAN); :}
        |void_ {: RESULT = new Tipo(Tipo.type.VOID); :}
        |id:a {:
            if(a.equals("String")){ RESULT = new Tipo(Tipo.type.STRING); } 
            else { RESULT = new Tipo(Tipo.type.OBJECT, a);} 
            :};

BLOQUES ::= {: RESULT = null; :}
        |BLOQUES_L:a {: RESULT = new Bloque(a, aleft, aright); :};

BLOQUES_L ::= BLOQUES_L:a BLOQUE:b {: RESULT = a; RESULT.add(b); :}
            | BLOQUE:a {: RESULT = new ArrayList<>(); RESULT.add(a); :};

BLOQUE ::= print_:a parIzquierda E:b parDerecha puntoycoma {: RESULT = new Print(b, aleft, aright); :}
          |println_:a parIzquierda E:b parDerecha puntoycoma {: RESULT = new Println(b, aleft, aright); :}
          |printTabla_:a parIzquierda parDerecha puntoycoma {: RESULT = new PrintTabla(aleft, aright); :}
          |read_file_:a parIzquierda E:b parDerecha puntoycoma {: RESULT = new ReadFile(b, aleft, aright); :}
          |write_file_:a parIzquierda E:b coma E:c parDerecha puntoycoma {: RESULT = new WriteFile(b, c, aleft, aright); :}
          |graph_:a parIzquierda E:b coma E:c parDerecha puntoycoma {: RESULT = new Graph(b, c, aleft, aright); :}
          |return_:a puntoycoma {: RESULT = new Return(aleft, aright); :}
          |return_:a VALOR:b puntoycoma {: RESULT = new Return(b, aleft, aright); :}
          |break_:a puntoycoma {: RESULT = new Break(aleft, aright); :}
          |continue_:a puntoycoma {: RESULT = new Continue(aleft, aright); :}
          |TIPO:a DECLARACION_VARIABLES:b puntoycoma {: RESULT = new Declaracion(a, b, aleft, aright); :}
          |id:a igual VALOR:b puntoycoma {: RESULT = new Asignacion(new Identificador(a, aleft, aright), b); :}
          |id:a parIzquierda PARAMETROS:b parDerecha puntoycoma {: RESULT = new LlamadaMetodo(a, b, aleft, aright); :}
          |this_:a parIzquierda PARAMETROS:b parDerecha puntoycoma {: RESULT = new ConstructorInv("this", b, aleft, aright); :}
          |super_:a parIzquierda PARAMETROS:b parDerecha puntoycoma {: RESULT = new ConstructorInv("super", b, aleft, aright); :}
          |CLASE:a {: RESULT = a; :}
          |UNARIO:a puntoycoma {: RESULT = a; :}
          |IF:a {: RESULT = a; :}
          |WHILE:a {: RESULT = a; :}
          |DO_WHILE:a {: RESULT = a; :}
          |FOR:a {: RESULT = a; :}
          |SWITCH:a {: RESULT = a; :}
          |ACCESO_OBJETO:a puntoycoma{: RESULT = a; :}
          |ACCESO_OBJETO:a igual VALOR:b puntoycoma {: RESULT = new AsignacionObjeto(a, b, aleft, aright); :}
          |ASIGNA_ARREGLO:a puntoycoma {: RESULT = a; :};

UNARIO ::=  id:a masmas:x {: RESULT = new PostFijo(new Identificador(a, aleft, aright), Operacion.Operador.AUMENTO, xleft+1, xright+1); :}
           | id:a menosmenos:x {: RESULT = new PostFijo(new Identificador(a, aleft, aright), Operacion.Operador.DECREMENTO, xleft+1, xright+1); :}
           | masmas:x id:a {: RESULT = new PreFijo(new Identificador(a, aleft, aright), Operacion.Operador.AUMENTO, xleft+1, xright+1); :} 
           | menosmenos:x id:a {: RESULT = new PreFijo(new Identificador(a, aleft, aright), Operacion.Operador.DECREMENTO, xleft+1, xright+1); :};

PARAMETROS ::= {: RESULT = null; :}
            | PARAMETRO:a {: RESULT = a; :};

PARAMETRO ::= PARAMETRO:a coma VALOR:b {: RESULT = a; RESULT.add(b); :}
            | VALOR:a {: RESULT = new ArrayList<>(); RESULT.add(a); :};

IF ::= IF_LISTA:a else_:b llaveIzquierda BLOQUES:c llaveDerecha 
        {: a.add(new SubIf(c, bleft, bright)); RESULT = new If(a, aleft, aright); :}
      |IF_LISTA:a {: RESULT = new If(a, aleft, aright); :};

IF_LISTA ::= IF_LISTA:a else_:b if_ parIzquierda E:c parDerecha llaveIzquierda BLOQUES:d llaveDerecha 
                {: RESULT = a; RESULT.add(new SubIf(c, d, bleft, bright)); :}
            | if_:a parIzquierda E:b parDerecha llaveIzquierda BLOQUES:c llaveDerecha
                {: RESULT = new ArrayList<>(); RESULT.add(new SubIf(b, c, aleft, aright)); :};

WHILE ::= while_:x parIzquierda E:a parDerecha llaveIzquierda BLOQUES:b llaveDerecha {: RESULT = new While(a, b, xleft, xright); :};

DO_WHILE ::= do_:x llaveIzquierda BLOQUES:a llaveDerecha while_ parIzquierda E:b parDerecha puntoycoma {: RESULT = new DoWhile(a, b, xleft, xright); :};

FOR ::= for_:x parIzquierda FOR_INIT:a puntoycoma E:b puntoycoma FOR_UPDATE:c parDerecha llaveIzquierda BLOQUES:d llaveDerecha
            {: RESULT = new For(a, b, c, d, xleft, xright); :};

FOR_INIT ::= TIPO:a DECLARACION_VARIABLES:b {: RESULT = new Declaracion(a, b, aleft, aright); :}
            |id:a igual VALOR:b {: RESULT = new Asignacion(new Identificador(a, aleft, aright), b); :};

FOR_UPDATE ::= id:a igual VALOR:b {: RESULT = new Asignacion(new Identificador(a, aleft, aright), b); :}
               |UNARIO:a {: RESULT = a; :};

SWITCH ::= switch_:x parIzquierda E:a parDerecha llaveIzquierda CASES:b llaveDerecha {: RESULT = new Switch(a, b, xleft, xright); :};

CASES ::= {: RESULT = null; :}
        | CASESL:a {: RESULT = a; :};

CASESL ::= CASESL:a CASE:b {: RESULT = a; RESULT.add(b); :}
          | CASE:a {: RESULT = new ArrayList<>(); RESULT.add(a); :};

CASE ::= case_:x E:a dospuntos BLOQUES:b {: RESULT = new Case(a, b, xleft, xright); :}
        |default_:x dospuntos BLOQUES:a {: RESULT = new Case(a, xleft, xright); :};


ACCESO_OBJETO ::= ACCESO_OBJETO:a punto ACCESO:b {: RESULT = a; RESULT.getAccesos().add(b); :}
                | OBJETO:a {: RESULT = a; :};

OBJETO ::= id:a DIM:b punto ACCESO:c {: RESULT = new AccesoObjeto(a, b, aleft, aright); RESULT.getAccesos().add(c); :}
                | this_:a punto ACCESO:c {: RESULT = new AccesoObjeto("this", null, aleft, aright); RESULT.getAccesos().add(c); :};

DIM ::= {: RESULT = null; :}
      | DIMENSION:a {: RESULT = a; :};

ACCESO ::= id:a {: RESULT = new Identificador(a, aleft, aright); :}
        | id:a parIzquierda PARAMETROS:b parDerecha {: RESULT = new LlamadaFuncion(new LlamadaMetodo(a, b, aleft, aright)); :};

ASIGNA_ARREGLO ::= id:a DIMENSION:b igual VALOR:c {: RESULT = new AsignacionArreglo(a, b, c, aleft, aright); :};

VALOR ::= E:e {: RESULT = e; :}
        | new_:x id:a parIzquierda PARAMETROS:b parDerecha {: RESULT = new Instancia(a, b, xleft, xright); :}
        | new_:x TIPO:a DIMENSION:b {: RESULT = new Literal(a, b, xleft, xright); :}
        | llaveIzquierda:x ARREGLO:a llaveDerecha {: RESULT = new Literal(a, xleft, xright);  :};

DIMENSION ::= DIMENSION:a corcheteIzquierda E:b corcheteDerecha {: RESULT = a; RESULT.add(b); :}
                |corcheteIzquierda E:a corcheteDerecha {: RESULT = new ArrayList<>(); RESULT.add(a); :}; 

ARREGLO ::= ARREGLO:a coma VALOR:b {: RESULT = a; RESULT.add(b); :}
        | VALOR:a {: RESULT = new ArrayList<>(); RESULT.add(a); :};

E ::= E:a mas:x E:b {: RESULT = new Aritmetica(a, b, Operacion.Operador.SUMA, xleft, xright); :}
    | E:a menos:x E:b {: RESULT = new Aritmetica(a, b, Operacion.Operador.RESTA, xleft, xright); :}
    | E:a asterisco:x E:b {: RESULT = new Aritmetica(a, b, Operacion.Operador.MULTIPLICACION, xleft, xright); :}
    | E:a diagonal:x E:b {: RESULT = new Aritmetica(a, b, Operacion.Operador.DIVISION, xleft, xright); :}
    | E:a modulo:x E:b {: RESULT = new Aritmetica(a, b, Operacion.Operador.MODULO, xleft, xright); :}
    | menos:x E:a {:RESULT = new Aritmetica(a, new Literal(new Tipo(Tipo.type.INT), -1, 0,0), Operacion.Operador.MULTIPLICACION, xleft+1, xright+1);:} %prec umenos
    | mas:x E:a {: RESULT = new Aritmetica(a, new Literal(new Tipo(Tipo.type.INT), 1, 0,0), Operacion.Operador.MULTIPLICACION, xleft+1, xright+1);:} %prec umas

    | E:a masmas:x {: RESULT = new PostFijo(a, Operacion.Operador.AUMENTO, xleft, xright); :}
    | E:a menosmenos:x {: RESULT = new PostFijo(a, Operacion.Operador.DECREMENTO, xleft, xright); :}
    | masmas:x E:a {: RESULT = new PreFijo(a, Operacion.Operador.AUMENTO, xleft+1, xright); :} %prec umasmas
    | menosmenos:x E:a {: RESULT = new PreFijo(a, Operacion.Operador.DECREMENTO, xleft, xright); :} %prec umenosmenos

    | E:a mayorque:x E:b {: RESULT = new Relacional(a, b, Operacion.Operador.MAYORQUE, xleft, xright); :}
    | E:a menorque:x E:b {: RESULT = new Relacional(a, b, Operacion.Operador.MENORQUE, xleft, xright); :}
    | E:a mayorigual:x E:b {: RESULT = new Relacional(a, b, Operacion.Operador.MAYORIGUAL, xleft, xright); :}
    | E:a menorigual:x E:b {: RESULT = new Relacional(a, b, Operacion.Operador.MENORIGUAL, xleft, xright); :}
    | E:a igualigual:x E:b {: RESULT = new Relacional(a, b, Operacion.Operador.IGUAL, xleft, xright); :}
    | E:a diferente:x E:b {: RESULT = new Relacional(a, b, Operacion.Operador.DIFERENTE, xleft, xright); :}

    | E:a and:x E:b {: RESULT = new Logica(a, b, Operacion.Operador.AND, xleft, xright); :}
    | E:a or:x E:b {: RESULT = new Logica(a, b, Operacion.Operador.OR, xleft, xright); :}
    | not:x E:b {: RESULT = new Logica(b, Operacion.Operador.NOT, xleft, xright); :}
    | E:a xor:x E:b {: RESULT = new Logica(a, b, Operacion.Operador.XOR, xleft, xright); :}

    | E:a interrogacion:x E:b dospuntos E:c{:RESULT = new Ternario(a, b, c, xleft, xright);:}

    | parIzquierda E:a parDerecha {: RESULT = a; :}

    | id:a DIMENSION:b {: RESULT = new AccesoArreglo(a, b, aleft, aright); :}
    | ACCESO_OBJETO:a  {: RESULT = new Acceso(a); :}
    | this_:a {: RESULT = new This(aleft, aright);  :}

    | null_:a {: RESULT = new Literal(new Tipo(Tipo.type.NULL), "null", aleft, aright); :}
    | entero:a {: RESULT = new Literal(new Tipo(Tipo.type.INT), new Integer(a), aleft, aright); :}
    | decimal:a {: RESULT = new Literal(new Tipo(Tipo.type.DOUBLE), new Double(a), aleft, aright); :}
    | tstring:a {: RESULT = new Literal(new Tipo(Tipo.type.STRING), a, aleft, aright);  :}
    | tchar:a {: RESULT = new Literal(new Tipo(Tipo.type.CHAR), a.charAt(0), aleft, aright); :}
    | true_:a {: RESULT = new Literal(new Tipo(Tipo.type.BOOLEAN), new Boolean(true), aleft, aright); :}
    | false_:a {: RESULT = new Literal(new Tipo(Tipo.type.BOOLEAN), new Boolean(false), aleft, aright); :}
    | id:a {: RESULT = new Identificador(a, aleft, aright); :}

    | id:a parIzquierda PARAMETROS:b parDerecha {: RESULT = new LlamadaFuncion(new LlamadaMetodo(a, b, aleft, aright)); :}
    | read_file_:a parIzquierda E:b parDerecha {: RESULT = new ReadFile(b, aleft, aright); :};

		
		
		