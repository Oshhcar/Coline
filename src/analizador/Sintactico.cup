package analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import analizador.ast.*;
import analizador.ast.entorno.*;
import analizador.ast.expresion.*;
import analizador.ast.instruccion.*;

parser code
{:
	private Ast ast;
	
	public Ast getAST(){
		return ast;
	}
	
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador " +s.value + " no reconocido." );
		//AnalizadorError tmp = new AnalizadorError();
		//tmp.setColumna(s.right+1);
		//tmp.setLinea(s.left+1);
		//tmp.setValor(s.value+"");
		//tmp.setError("Sint√°ctico");
        
		//error.add(tmp);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico Fatal en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
	}
:}

action code
{:

:}

terminal String tstring, tchar, entero, decimal, id, null_, true_, false_;
terminal llaveIzquierda, llaveDerecha, parIzquierda, parDerecha, corcheteIzquierda, corcheteDerecha, puntoycoma, coma, punto;
terminal dospuntos, interrogacion;
terminal mas, menos, asterisco, diagonal, porcentaje, umenos, umas, masmas, menosmenos;
terminal mayorque, menorque, mayorigual, menorigual, igualigual, diferente;
terminal and, or, not, xor;
terminal igual, masigual, menosigual, porigual, diagonaligual;
terminal public_, protected_, private_, abstract_, static_, final_, extends_, class_;
terminal int_, double_, char_, boolean_;

non terminal INICIO;

non terminal Clase CLASE;
non terminal ArrayList<String> MODIFICADORES;
non terminal String MODIFICADOR;
non terminal ArrayList<Instruccion> CUERPO_CLASE;
non terminal ArrayList<Instruccion> CUERPO_CLASE_LISTA;
non terminal Instruccion CUERPO_CLASE_DEC;
non terminal Instruccion CUERPO_CLASE_DEC_MOD;
non terminal Declaracion DECLARACION_CAMPO;
non terminal ArrayList<Asignacion> DECLARACION_VARIABLES;
non terminal Asignacion DECLARACION_VARIABLE;
non terminal Identificador DECLARACION_VARIABLE_ID;
non terminal Tipo TIPO; 
non terminal Expresion VALOR_VARIABLE;

non terminal Expresion E;

precedence left interrogacion;
precedence left or;
precedence left and;
precedence right not;
precedence left igualigual;
precedence left diferente;
precedence left mayorque, menorque, mayorigual, menorigual;
precedence left mas, menos;
precedence left asterisco, diagonal;
precedence right porcentaje;
precedence right masmas, menosmenos;
precedence right umenos, umas;

start with INICIO;

INICIO ::= CLASE:c
        {: 
            parser.ast = new Ast(c);
            System.out.println("COLINE OK"); 
        :};

CLASE ::=  class_ id:i llaveIzquierda CUERPO_CLASE:c llaveDerecha 
            {: RESULT = new Clase(i, c, ileft, iright); :}
        | class_ id:i extends_ id:i2 llaveIzquierda CUERPO_CLASE:c llaveDerecha 
            {: RESULT = new Clase(i, i2, c, ileft, iright); :};

MODIFICADORES ::= MODIFICADORES:a MODIFICADOR:b {:RESULT = a; RESULT.add(b); :}
                | MODIFICADOR:a {: RESULT = new ArrayList<>(); RESULT.add(a); :};

MODIFICADOR ::= public_ {: RESULT = "public"; :}
                | protected_ {: RESULT = "protected"; :}
                | private_ {: RESULT = "private"; :}
                | abstract_ {: RESULT = "abstract"; :}
                | static_ {: RESULT = "static"; :}
                | final_ {: RESULT = "final"; :};

CUERPO_CLASE ::= {: RESULT = null; :}
                | CUERPO_CLASE_LISTA:l {: RESULT = l; :};

CUERPO_CLASE_LISTA ::= CUERPO_CLASE_LISTA:l CUERPO_CLASE_DEC_MOD:d {: RESULT = l; RESULT.add(d); :}
                    | CUERPO_CLASE_DEC_MOD:d {: RESULT = new ArrayList<>(); RESULT.add(d); :};

CUERPO_CLASE_DEC_MOD ::= MODIFICADORES:m CUERPO_CLASE_DEC:i {: RESULT = i; :}
                        | CUERPO_CLASE_DEC:i {: RESULT = i; :};

CUERPO_CLASE_DEC ::= CLASE:c {: RESULT = c; :}
                    |DECLARACION_CAMPO:c {: RESULT = c; :};

DECLARACION_CAMPO ::= TIPO:t DECLARACION_VARIABLES:d puntoycoma {: RESULT = new Declaracion(t, d, tleft, tright); :};

DECLARACION_VARIABLES ::= DECLARACION_VARIABLES:dv coma DECLARACION_VARIABLE:d {: RESULT = dv; RESULT.add(d); :}
                        |DECLARACION_VARIABLE:d {: RESULT = new ArrayList<>(); RESULT.add(d); :};

DECLARACION_VARIABLE ::= DECLARACION_VARIABLE_ID:i igual VALOR_VARIABLE:v {: RESULT = new Asignacion(i,v); :}
                        | DECLARACION_VARIABLE_ID:i {: RESULT = new Asignacion(i); :};

DECLARACION_VARIABLE_ID ::= DECLARACION_VARIABLE_ID:i corcheteIzquierda corcheteDerecha{: RESULT = i; RESULT.masDimension(); :}
                            |id:i {: RESULT = new Identificador(i, ileft, iright); :};

TIPO ::= int_ {: RESULT = Tipo.INT; :}
        |double_ {: RESULT = Tipo.DOUBLE; :}
        |char_ {: RESULT = Tipo.CHAR; :}
        |boolean_ {: RESULT = Tipo.BOOLEAN; :};

VALOR_VARIABLE ::= E:e {: RESULT = e; :};

E ::= entero:a {: RESULT = new Literal(Tipo.INT, new Integer(a), aleft, aright); :}
    | decimal:a {: RESULT = new Literal(Tipo.DOUBLE, new Double(a), aleft, aright); :}
    | tstring:a {: System.out.println(a); :}
    | tchar:a {: RESULT = new Literal(Tipo.CHAR, a.charAt(0), aleft, aright); :}
    | true_:a {: RESULT = new Literal(Tipo.BOOLEAN, new Boolean(true), aleft, aright); :}
    | false_:a {: RESULT = new Literal(Tipo.BOOLEAN, new Boolean(false), aleft, aright); :}
    | id:a {: RESULT = new Identificador(a, aleft, aright); :};

		
		
		