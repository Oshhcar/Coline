
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import analizador.ast.*;
import analizador.ast.entorno.*;
import analizador.ast.expresion.*;
import analizador.ast.expresion.operacion.*;
import analizador.ast.instruccion.*;
import analizador.ast.instruccion.condicionales.*;
import analizador.ast.instruccion.ciclos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\002\004\000\002\002\004\000\002\005" +
    "\010\000\002\005\012\000\002\003\002\000\002\003\003" +
    "\000\002\004\006\000\002\004\005\000\002\010\002\000" +
    "\002\010\003\000\002\006\004\000\002\006\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\011\002" +
    "\000\002\011\003\000\002\012\004\000\002\012\003\000" +
    "\002\013\003\000\002\013\006\000\002\013\013\000\002" +
    "\013\012\000\002\014\005\000\002\014\003\000\002\015" +
    "\005\000\002\015\003\000\002\016\005\000\002\016\003" +
    "\000\002\024\002\000\002\024\003\000\002\025\005\000" +
    "\002\025\003\000\002\026\005\000\002\026\004\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\021\002" +
    "\000\002\021\003\000\002\022\004\000\002\022\003\000" +
    "\002\023\007\000\002\023\007\000\002\023\006\000\002" +
    "\023\007\000\002\023\011\000\002\023\011\000\002\023" +
    "\004\000\002\023\005\000\002\023\004\000\002\023\004" +
    "\000\002\023\005\000\002\023\006\000\002\023\007\000" +
    "\002\023\007\000\002\023\004\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\004\000\002\023\004\000\002\027\004" +
    "\000\002\027\004\000\002\027\004\000\002\027\004\000" +
    "\002\030\002\000\002\030\003\000\002\031\005\000\002" +
    "\031\003\000\002\032\007\000\002\032\003\000\002\033" +
    "\013\000\002\033\011\000\002\034\011\000\002\035\013" +
    "\000\002\036\015\000\002\037\004\000\002\037\005\000" +
    "\002\040\005\000\002\040\003\000\002\041\011\000\002" +
    "\042\002\000\002\042\003\000\002\043\004\000\002\043" +
    "\003\000\002\044\006\000\002\044\005\000\002\045\005" +
    "\000\002\045\006\000\002\046\002\000\002\046\003\000" +
    "\002\047\003\000\002\047\006\000\002\052\006\000\002" +
    "\020\003\000\002\020\007\000\002\020\005\000\002\020" +
    "\005\000\002\050\006\000\002\050\005\000\002\051\005" +
    "\000\002\051\003\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\004\000\002\053\004\000\002\053\004\000\002\053" +
    "\004\000\002\053\004\000\002\053\004\000\002\053\005" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\005\000\002\053\004\000\002\053\005\000\002\053" +
    "\007\000\002\053\005\000\002\053\004\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\006\000\002\053" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\022\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065" +
    "\ufffd\066\ufffd\070\ufffd\114\007\001\002\000\022\061\ufffc" +
    "\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\070\ufffc\114" +
    "\u0147\001\002\000\004\002\u0146\001\002\000\020\061\160" +
    "\062\165\063\164\064\161\065\167\066\170\070\ufff9\001" +
    "\002\000\040\004\016\005\027\006\022\007\014\010\010" +
    "\012\013\013\015\016\024\027\025\030\017\036\026\037" +
    "\021\052\011\116\012\121\020\001\002\000\066\015\uff72" +
    "\016\151\017\uff72\020\134\021\uff72\022\uff72\023\uff72\024" +
    "\uff9f\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72" +
    "\033\uff72\036\uff72\037\uff72\042\uff72\043\uff72\044\uff72\045" +
    "\uff72\046\uff72\047\uff72\050\uff72\051\uff72\053\uff72\001\002" +
    "\000\040\004\016\005\027\006\022\007\014\010\010\012" +
    "\013\013\015\016\024\027\025\030\017\036\026\037\021" +
    "\052\011\116\012\121\020\001\002\000\004\016\145\001" +
    "\002\000\060\015\uff74\017\uff74\021\uff74\022\uff74\023\uff74" +
    "\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74\032\uff74\033" +
    "\uff74\036\uff74\037\uff74\042\uff74\043\uff74\044\uff74\045\uff74" +
    "\046\uff74\047\uff74\050\uff74\051\uff74\053\uff74\001\002\000" +
    "\060\015\uff77\017\uff77\021\uff77\022\uff77\023\uff77\025\uff77" +
    "\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033\uff77\036" +
    "\uff77\037\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77" +
    "\047\uff77\050\uff77\051\uff77\053\uff77\001\002\000\060\015" +
    "\uff73\017\uff73\021\uff73\022\uff73\023\uff73\025\uff73\026\uff73" +
    "\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\036\uff73\037" +
    "\uff73\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73" +
    "\050\uff73\051\uff73\053\uff73\001\002\000\060\015\uff76\017" +
    "\uff76\021\uff76\022\uff76\023\uff76\025\uff76\026\uff76\027\uff76" +
    "\030\uff76\031\uff76\032\uff76\033\uff76\036\uff76\037\uff76\042" +
    "\uff76\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76" +
    "\051\uff76\053\uff76\001\002\000\040\004\016\005\027\006" +
    "\022\007\014\010\010\012\013\013\015\016\024\027\025" +
    "\030\017\036\026\037\021\052\011\116\012\121\020\001" +
    "\002\000\060\015\uff79\017\uff79\021\uff79\022\uff79\023\uff79" +
    "\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032\uff79\033" +
    "\uff79\036\uff79\037\uff79\042\uff79\043\uff79\044\uff79\045\uff79" +
    "\046\uff79\047\uff79\050\uff79\051\uff79\053\uff79\001\002\000" +
    "\040\004\016\005\027\006\022\007\014\010\010\012\013" +
    "\013\015\016\024\027\025\030\017\036\026\037\021\052" +
    "\011\116\012\121\020\001\002\000\060\015\uff78\017\uff78" +
    "\021\uff78\022\uff78\023\uff78\025\uff78\026\uff78\027\uff78\030" +
    "\uff78\031\uff78\032\uff78\033\uff78\036\uff78\037\uff78\042\uff78" +
    "\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78\051" +
    "\uff78\053\uff78\001\002\000\062\015\uff7a\017\uff7a\021\uff7a" +
    "\022\uff7a\023\uff7a\024\100\025\uff7a\026\uff7a\027\uff7a\030" +
    "\uff7a\031\uff7a\032\uff7a\033\uff7a\036\uff7a\037\uff7a\042\uff7a" +
    "\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051" +
    "\uff7a\053\uff7a\001\002\000\040\004\016\005\027\006\022" +
    "\007\014\010\010\012\013\013\015\016\024\027\025\030" +
    "\017\036\026\037\021\052\011\116\012\121\020\001\002" +
    "\000\040\004\016\005\027\006\022\007\014\010\010\012" +
    "\013\013\015\016\024\027\025\030\017\036\026\037\021" +
    "\052\011\116\012\121\020\001\002\000\040\004\016\005" +
    "\027\006\022\007\014\010\010\012\013\013\015\016\024" +
    "\027\025\030\017\036\026\037\021\052\011\116\012\121" +
    "\020\001\002\000\060\015\uff75\017\uff75\021\uff75\022\uff75" +
    "\023\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75\032" +
    "\uff75\033\uff75\036\uff75\037\uff75\042\uff75\043\uff75\044\uff75" +
    "\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75\053\uff75\001" +
    "\002\000\046\022\051\026\045\027\044\030\035\031\043" +
    "\032\040\033\046\036\033\037\032\042\041\043\037\044" +
    "\036\045\031\046\050\047\047\050\052\051\034\053\042" +
    "\001\002\000\040\004\016\005\027\006\022\007\014\010" +
    "\010\012\013\013\015\016\024\027\025\030\017\036\026" +
    "\037\021\052\011\116\012\121\020\001\002\000\060\015" +
    "\uff8a\017\uff8a\021\uff8a\022\uff8a\023\uff8a\025\uff8a\026\uff8a" +
    "\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\036\uff8a\037" +
    "\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a" +
    "\050\uff8a\051\uff8a\053\uff8a\001\002\000\060\015\uff8b\017" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\025\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\033\uff8b\036\uff8b\037\uff8b\042" +
    "\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b" +
    "\051\uff8b\053\uff8b\001\002\000\040\004\016\005\027\006" +
    "\022\007\014\010\010\012\013\013\015\016\024\027\025" +
    "\030\017\036\026\037\021\052\011\116\012\121\020\001" +
    "\002\000\040\004\016\005\027\006\022\007\014\010\010" +
    "\012\013\013\015\016\024\027\025\030\017\036\026\037" +
    "\021\052\011\116\012\121\020\001\002\000\040\004\016" +
    "\005\027\006\022\007\014\010\010\012\013\013\015\016" +
    "\024\027\025\030\017\036\026\037\021\052\011\116\012" +
    "\121\020\001\002\000\040\004\016\005\027\006\022\007" +
    "\014\010\010\012\013\013\015\016\024\027\025\030\017" +
    "\036\026\037\021\052\011\116\012\121\020\001\002\000" +
    "\040\004\016\005\027\006\022\007\014\010\010\012\013" +
    "\013\015\016\024\027\025\030\017\036\026\037\021\052" +
    "\011\116\012\121\020\001\002\000\040\004\016\005\027" +
    "\006\022\007\014\010\010\012\013\013\015\016\024\027" +
    "\025\030\017\036\026\037\021\052\011\116\012\121\020" +
    "\001\002\000\040\004\016\005\027\006\022\007\014\010" +
    "\010\012\013\013\015\016\024\027\025\030\017\036\026" +
    "\037\021\052\011\116\012\121\020\001\002\000\040\004" +
    "\016\005\027\006\022\007\014\010\010\012\013\013\015" +
    "\016\024\027\025\030\017\036\026\037\021\052\011\116" +
    "\012\121\020\001\002\000\040\004\016\005\027\006\022" +
    "\007\014\010\010\012\013\013\015\016\024\027\025\030" +
    "\017\036\026\037\021\052\011\116\012\121\020\001\002" +
    "\000\040\004\016\005\027\006\022\007\014\010\010\012" +
    "\013\013\015\016\024\027\025\030\017\036\026\037\021" +
    "\052\011\116\012\121\020\001\002\000\040\004\016\005" +
    "\027\006\022\007\014\010\010\012\013\013\015\016\024" +
    "\027\025\030\017\036\026\037\021\052\011\116\012\121" +
    "\020\001\002\000\040\004\016\005\027\006\022\007\014" +
    "\010\010\012\013\013\015\016\024\027\025\030\017\036" +
    "\026\037\021\052\011\116\012\121\020\001\002\000\040" +
    "\004\016\005\027\006\022\007\014\010\010\012\013\013" +
    "\015\016\024\027\025\030\017\036\026\037\021\052\011" +
    "\116\012\121\020\001\002\000\022\061\ufffa\062\ufffa\063" +
    "\ufffa\064\ufffa\065\ufffa\066\ufffa\070\ufffa\114\ufffa\001\002" +
    "\000\040\004\016\005\027\006\022\007\014\010\010\012" +
    "\013\013\015\016\024\027\025\030\017\036\026\037\021" +
    "\052\011\116\012\121\020\001\002\000\060\015\uff81\017" +
    "\uff81\021\uff81\022\uff81\023\uff81\025\uff81\026\uff81\027\044" +
    "\030\035\031\043\032\040\033\046\036\033\037\032\042" +
    "\041\043\037\044\036\045\031\046\050\047\047\050\uff81" +
    "\051\uff81\053\042\001\002\000\060\015\uff83\017\uff83\021" +
    "\uff83\022\uff83\023\uff83\025\uff83\026\uff83\027\044\030\035" +
    "\031\043\032\040\033\046\036\033\037\032\042\041\043" +
    "\037\044\036\045\031\046\uff83\047\047\050\uff83\051\uff83" +
    "\053\uff83\001\002\000\060\015\uff82\017\uff82\021\uff82\022" +
    "\uff82\023\uff82\025\uff82\026\uff82\027\044\030\035\031\043" +
    "\032\040\033\046\036\033\037\032\042\041\043\037\044" +
    "\036\045\031\046\uff82\047\uff82\050\uff82\051\uff82\053\uff82" +
    "\001\002\000\060\015\uff8e\017\uff8e\021\uff8e\022\uff8e\023" +
    "\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e" +
    "\033\uff8e\036\033\037\032\042\uff8e\043\uff8e\044\uff8e\045" +
    "\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\053\uff8e\001\002" +
    "\000\046\025\060\026\045\027\044\030\035\031\043\032" +
    "\040\033\046\036\033\037\032\042\041\043\037\044\036" +
    "\045\031\046\050\047\047\050\052\051\034\053\042\001" +
    "\002\000\040\004\016\005\027\006\022\007\014\010\010" +
    "\012\013\013\015\016\024\027\025\030\017\036\026\037" +
    "\021\052\011\116\012\121\020\001\002\000\060\015\uff7d" +
    "\017\uff7d\021\uff7d\022\uff7d\023\uff7d\025\uff7d\026\045\027" +
    "\044\030\035\031\043\032\040\033\046\036\033\037\032" +
    "\042\041\043\037\044\036\045\031\046\050\047\047\050" +
    "\052\051\034\053\042\001\002\000\060\015\uff92\017\uff92" +
    "\021\uff92\022\uff92\023\uff92\025\uff92\026\uff92\027\uff92\030" +
    "\uff92\031\043\032\040\033\046\036\033\037\032\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051" +
    "\uff92\053\uff92\001\002\000\060\015\uff90\017\uff90\021\uff90" +
    "\022\uff90\023\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\032\uff90\033\uff90\036\033\037\032\042\uff90\043\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\053" +
    "\uff90\001\002\000\060\015\uff7e\017\uff7e\021\uff7e\022\uff7e" +
    "\023\uff7e\025\uff7e\026\uff7e\027\044\030\035\031\043\032" +
    "\040\033\046\036\033\037\032\042\041\043\037\044\036" +
    "\045\031\046\050\047\047\050\uff7e\051\uff7e\053\uff7e\001" +
    "\002\000\060\015\uff87\017\uff87\021\uff87\022\uff87\023\uff87" +
    "\025\uff87\026\uff87\027\044\030\035\031\043\032\040\033" +
    "\046\036\033\037\032\042\uff87\043\uff87\044\uff87\045\uff87" +
    "\046\uff87\047\uff87\050\uff87\051\uff87\053\uff87\001\002\000" +
    "\060\015\uff8f\017\uff8f\021\uff8f\022\uff8f\023\uff8f\025\uff8f" +
    "\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\036" +
    "\033\037\032\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f" +
    "\047\uff8f\050\uff8f\051\uff8f\053\uff8f\001\002\000\060\015" +
    "\uff86\017\uff86\021\uff86\022\uff86\023\uff86\025\uff86\026\uff86" +
    "\027\044\030\035\031\043\032\040\033\046\036\033\037" +
    "\032\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86" +
    "\050\uff86\051\uff86\053\uff86\001\002\000\060\015\uff85\017" +
    "\uff85\021\uff85\022\uff85\023\uff85\025\uff85\026\uff85\027\044" +
    "\030\035\031\043\032\040\033\046\036\033\037\032\042" +
    "\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85" +
    "\051\uff85\053\uff85\001\002\000\060\015\uff91\017\uff91\021" +
    "\uff91\022\uff91\023\uff91\025\uff91\026\uff91\027\uff91\030\uff91" +
    "\031\043\032\040\033\046\036\033\037\032\042\uff91\043" +
    "\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91" +
    "\053\uff91\001\002\000\060\015\uff80\017\uff80\021\uff80\022" +
    "\uff80\023\uff80\025\uff80\026\uff80\027\044\030\035\031\043" +
    "\032\040\033\046\036\033\037\032\042\041\043\037\044" +
    "\036\045\031\046\050\047\047\050\052\051\uff80\053\042" +
    "\001\002\000\060\015\uff84\017\uff84\021\uff84\022\uff84\023" +
    "\uff84\025\uff84\026\uff84\027\044\030\035\031\043\032\040" +
    "\033\046\036\033\037\032\042\uff84\043\uff84\044\uff84\045" +
    "\uff84\046\uff84\047\uff84\050\uff84\051\uff84\053\uff84\001\002" +
    "\000\060\015\uff89\017\uff89\021\uff89\022\uff89\023\uff89\025" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89" +
    "\036\uff89\037\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046" +
    "\uff89\047\uff89\050\uff89\051\uff89\053\uff89\001\002\000\060" +
    "\015\uff8c\017\uff8c\021\uff8c\022\uff8c\023\uff8c\025\uff8c\026" +
    "\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\036\uff8c" +
    "\037\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047" +
    "\uff8c\050\uff8c\051\uff8c\053\uff8c\001\002\000\046\017\077" +
    "\026\045\027\044\030\035\031\043\032\040\033\046\036" +
    "\033\037\032\042\041\043\037\044\036\045\031\046\050" +
    "\047\047\050\052\051\034\053\042\001\002\000\060\015" +
    "\uff7c\017\uff7c\021\uff7c\022\uff7c\023\uff7c\025\uff7c\026\uff7c" +
    "\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\036\uff7c\037" +
    "\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c" +
    "\050\uff7c\051\uff7c\053\uff7c\001\002\000\004\010\102\001" +
    "\002\000\062\015\uffa1\017\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\033\uffa1\036\uffa1\037\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\053\uffa1\001" +
    "\002\000\064\015\uff9d\016\103\017\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\032\uff9d\033\uff9d\036\uff9d\037\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\053" +
    "\uff9d\001\002\000\046\004\016\005\027\006\022\007\014" +
    "\010\010\012\013\013\015\014\111\016\024\017\uffb7\027" +
    "\025\030\017\036\026\037\021\052\011\115\106\116\012" +
    "\121\020\001\002\000\054\015\uff9a\017\uff9a\022\uff9a\023" +
    "\uff9a\026\045\027\044\030\035\031\043\032\040\033\046" +
    "\036\033\037\032\042\041\043\037\044\036\045\031\046" +
    "\050\047\047\050\052\051\034\053\042\001\002\000\004" +
    "\017\142\001\002\000\016\010\127\071\125\072\121\073" +
    "\123\074\124\100\122\001\002\000\006\017\uffb6\023\117" +
    "\001\002\000\006\017\uffb4\023\uffb4\001\002\000\044\004" +
    "\016\005\027\006\022\007\014\010\010\012\013\013\015" +
    "\014\111\016\024\027\025\030\017\036\026\037\021\052" +
    "\011\115\106\116\012\121\020\001\002\000\006\015\115" +
    "\023\114\001\002\000\006\015\uff93\023\uff93\001\002\000" +
    "\044\004\016\005\027\006\022\007\014\010\010\012\013" +
    "\013\015\014\111\016\024\027\025\030\017\036\026\037" +
    "\021\052\011\115\106\116\012\121\020\001\002\000\012" +
    "\015\uff97\017\uff97\022\uff97\023\uff97\001\002\000\006\015" +
    "\uff94\023\uff94\001\002\000\044\004\016\005\027\006\022" +
    "\007\014\010\010\012\013\013\015\014\111\016\024\027" +
    "\025\030\017\036\026\037\021\052\011\115\106\116\012" +
    "\121\020\001\002\000\006\017\uffb5\023\uffb5\001\002\000" +
    "\006\010\uffda\020\uffda\001\002\000\006\010\uffd7\020\uffd7" +
    "\001\002\000\006\010\uffd9\020\uffd9\001\002\000\006\010" +
    "\uffd8\020\uffd8\001\002\000\006\010\uffdb\020\uffdb\001\002" +
    "\000\004\020\134\001\002\000\006\016\130\020\uffd6\001" +
    "\002\000\046\004\016\005\027\006\022\007\014\010\010" +
    "\012\013\013\015\014\111\016\024\017\uffb7\027\025\030" +
    "\017\036\026\037\021\052\011\115\106\116\012\121\020" +
    "\001\002\000\004\017\132\001\002\000\012\015\uff99\017" +
    "\uff99\022\uff99\023\uff99\001\002\000\014\015\uff98\017\uff98" +
    "\020\137\022\uff98\023\uff98\001\002\000\040\004\016\005" +
    "\027\006\022\007\014\010\010\012\013\013\015\016\024" +
    "\027\025\030\017\036\026\037\021\052\011\116\012\121" +
    "\020\001\002\000\046\021\136\026\045\027\044\030\035" +
    "\031\043\032\040\033\046\036\033\037\032\042\041\043" +
    "\037\044\036\045\031\046\050\047\047\050\052\051\034" +
    "\053\042\001\002\000\066\015\uff95\017\uff95\020\uff95\021" +
    "\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95" +
    "\030\uff95\031\uff95\032\uff95\033\uff95\036\uff95\037\uff95\042" +
    "\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95" +
    "\051\uff95\053\uff95\054\uff95\001\002\000\040\004\016\005" +
    "\027\006\022\007\014\010\010\012\013\013\015\016\024" +
    "\027\025\030\017\036\026\037\021\052\011\116\012\121" +
    "\020\001\002\000\046\021\141\026\045\027\044\030\035" +
    "\031\043\032\040\033\046\036\033\037\032\042\041\043" +
    "\037\044\036\045\031\046\050\047\047\050\052\051\034" +
    "\053\042\001\002\000\066\015\uff96\017\uff96\020\uff96\021" +
    "\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96" +
    "\030\uff96\031\uff96\032\uff96\033\uff96\036\uff96\037\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96" +
    "\051\uff96\053\uff96\054\uff96\001\002\000\062\015\uff9c\017" +
    "\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\036\uff9c\037" +
    "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c" +
    "\050\uff9c\051\uff9c\053\uff9c\001\002\000\060\015\uff88\017" +
    "\uff88\021\uff88\022\uff88\023\uff88\025\uff88\026\uff88\027\uff88" +
    "\030\uff88\031\uff88\032\uff88\033\uff88\036\uff88\037\uff88\042" +
    "\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88" +
    "\051\uff88\053\uff88\001\002\000\060\015\uff8d\017\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d" +
    "\031\uff8d\032\uff8d\033\uff8d\036\uff8d\037\uff8d\042\uff8d\043" +
    "\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d" +
    "\053\uff8d\001\002\000\040\004\016\005\027\006\022\007" +
    "\014\010\010\012\013\013\015\016\024\027\025\030\017" +
    "\036\026\037\021\052\011\116\012\121\020\001\002\000" +
    "\046\017\147\026\045\027\044\030\035\031\043\032\040" +
    "\033\046\036\033\037\032\042\041\043\037\044\036\045" +
    "\031\046\050\047\047\050\052\051\034\053\042\001\002" +
    "\000\060\015\uff70\017\uff70\021\uff70\022\uff70\023\uff70\025" +
    "\uff70\026\uff70\027\uff70\030\uff70\031\uff70\032\uff70\033\uff70" +
    "\036\uff70\037\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046" +
    "\uff70\047\uff70\050\uff70\051\uff70\053\uff70\001\002\000\060" +
    "\015\uff7f\017\uff7f\021\uff7f\022\uff7f\023\uff7f\025\uff7f\026" +
    "\uff7f\027\044\030\035\031\043\032\040\033\046\036\033" +
    "\037\032\042\041\043\037\044\036\045\031\046\050\047" +
    "\047\050\uff7f\051\uff7f\053\uff7f\001\002\000\046\004\016" +
    "\005\027\006\022\007\014\010\010\012\013\013\015\014" +
    "\111\016\024\017\uffb7\027\025\030\017\036\026\037\021" +
    "\052\011\115\106\116\012\121\020\001\002\000\064\015" +
    "\uff7b\017\uff7b\020\137\021\uff7b\022\uff7b\023\uff7b\024\uff9e" +
    "\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033" +
    "\uff7b\036\uff7b\037\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b" +
    "\046\uff7b\047\uff7b\050\uff7b\051\uff7b\053\uff7b\001\002\000" +
    "\004\024\154\001\002\000\004\010\102\001\002\000\062" +
    "\015\uffa0\017\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0" +
    "\036\uffa0\037\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046" +
    "\uffa0\047\uffa0\050\uffa0\051\uffa0\053\uffa0\001\002\000\004" +
    "\017\157\001\002\000\060\015\uff71\017\uff71\021\uff71\022" +
    "\uff71\023\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71" +
    "\032\uff71\033\uff71\036\uff71\037\uff71\042\uff71\043\uff71\044" +
    "\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71\053\uff71" +
    "\001\002\000\034\010\ufff5\061\ufff5\062\ufff5\063\ufff5\064" +
    "\ufff5\065\ufff5\066\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5" +
    "\074\ufff5\100\ufff5\001\002\000\034\010\ufff2\061\ufff2\062" +
    "\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\070\ufff2\071\ufff2" +
    "\072\ufff2\073\ufff2\074\ufff2\100\ufff2\001\002\000\034\010" +
    "\ufff8\061\160\062\165\063\164\064\161\065\167\066\170" +
    "\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\100\ufff8\001" +
    "\002\000\004\070\172\001\002\000\034\010\ufff3\061\ufff3" +
    "\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\070\ufff3\071" +
    "\ufff3\072\ufff3\073\ufff3\074\ufff3\100\ufff3\001\002\000\034" +
    "\010\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066" +
    "\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\100\ufff4" +
    "\001\002\000\004\002\000\001\002\000\034\010\ufff1\061" +
    "\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\070\ufff1" +
    "\071\ufff1\072\ufff1\073\ufff1\074\ufff1\100\ufff1\001\002\000" +
    "\034\010\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0" +
    "\066\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\100" +
    "\ufff0\001\002\000\034\010\ufff6\061\ufff6\062\ufff6\063\ufff6" +
    "\064\ufff6\065\ufff6\066\ufff6\070\ufff6\071\ufff6\072\ufff6\073" +
    "\ufff6\074\ufff6\100\ufff6\001\002\000\004\010\173\001\002" +
    "\000\006\014\175\067\174\001\002\000\004\010\u0141\001" +
    "\002\000\036\010\ufff9\015\uffef\061\160\062\165\063\164" +
    "\064\161\065\167\066\170\070\ufff9\071\ufff9\072\ufff9\073" +
    "\ufff9\074\ufff9\100\ufff9\001\002\000\036\010\ufff9\015\uffee" +
    "\061\160\062\165\063\164\064\161\065\167\066\170\070" +
    "\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\100\ufff9\001\002" +
    "\000\004\015\u013f\001\002\000\036\010\uffec\015\uffec\061" +
    "\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\070\uffec" +
    "\071\uffec\072\uffec\073\uffec\074\uffec\100\uffec\001\002\000" +
    "\020\010\204\070\172\071\125\072\121\073\123\074\124" +
    "\100\122\001\002\000\036\010\uffeb\015\uffeb\061\uffeb\062" +
    "\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\070\uffeb\071\uffeb" +
    "\072\uffeb\073\uffeb\074\uffeb\100\uffeb\001\002\000\004\010" +
    "\u0137\001\002\000\006\010\uffd6\016\205\001\002\000\024" +
    "\010\207\017\uffe1\023\uffe1\066\212\071\125\072\121\073" +
    "\123\074\124\100\122\001\002\000\006\017\uffde\023\uffde" +
    "\001\002\000\004\010\uffd6\001\002\000\006\017\uffe0\023" +
    "\uffe0\001\002\000\004\010\277\001\002\000\016\010\207" +
    "\071\125\072\121\073\123\074\124\100\122\001\002\000" +
    "\006\017\214\023\215\001\002\000\004\014\217\001\002" +
    "\000\020\010\207\066\212\071\125\072\121\073\123\074" +
    "\124\100\122\001\002\000\006\017\uffdf\023\uffdf\001\002" +
    "\000\062\010\244\015\uffd5\036\235\037\233\071\125\072" +
    "\121\073\123\074\124\075\223\076\232\077\221\100\122" +
    "\101\242\102\240\104\245\105\256\106\241\107\225\110" +
    "\252\111\224\116\230\117\237\120\254\121\227\001\002" +
    "\000\004\022\u0132\001\002\000\004\016\u012f\001\002\000" +
    "\004\010\277\001\002\000\004\016\u0129\001\002\000\004" +
    "\016\u0119\001\002\000\004\014\u0111\001\002\000\066\010" +
    "\uffbf\015\uffbf\036\uffbf\037\uffbf\071\uffbf\072\uffbf\073\uffbf" +
    "\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\102" +
    "\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111\uffbf" +
    "\112\uffbf\113\uffbf\116\uffbf\117\uffbf\120\uffbf\121\uffbf\001" +
    "\002\000\004\016\u010d\001\002\000\004\016\u0109\001\002" +
    "\000\066\010\uffc0\015\uffc0\036\uffc0\037\uffc0\071\uffc0\072" +
    "\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0" +
    "\101\uffc0\102\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110" +
    "\uffc0\111\uffc0\112\uffc0\113\uffc0\116\uffc0\117\uffc0\120\uffc0" +
    "\121\uffc0\001\002\000\004\016\u0105\001\002\000\004\010" +
    "\u0104\001\002\000\070\010\uffb2\015\uffb2\036\uffb2\037\uffb2" +
    "\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\077" +
    "\uffb2\100\uffb2\101\uffb2\102\uffb2\103\371\104\uffb2\105\uffb2" +
    "\106\uffb2\107\uffb2\110\uffb2\111\uffb2\112\uffb2\113\uffb2\116" +
    "\uffb2\117\uffb2\120\uffb2\121\uffb2\001\002\000\004\010\370" +
    "\001\002\000\066\010\uffc2\015\uffc2\036\uffc2\037\uffc2\071" +
    "\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2" +
    "\100\uffc2\101\uffc2\102\uffc2\104\uffc2\105\uffc2\106\uffc2\107" +
    "\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2\116\uffc2\117\uffc2" +
    "\120\uffc2\121\uffc2\001\002\000\004\016\362\001\002\000" +
    "\004\016\354\001\002\000\004\016\346\001\002\000\046" +
    "\004\016\005\027\006\022\007\014\010\010\012\013\013" +
    "\015\014\111\016\024\022\344\027\025\030\017\036\026" +
    "\037\021\052\011\115\106\116\012\121\020\001\002\000" +
    "\066\010\uffbe\015\uffbe\036\uffbe\037\uffbe\071\uffbe\072\uffbe" +
    "\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101" +
    "\uffbe\102\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe" +
    "\111\uffbe\112\uffbe\113\uffbe\116\uffbe\117\uffbe\120\uffbe\121" +
    "\uffbe\001\002\000\020\010\uffd6\016\331\020\134\024\uff9f" +
    "\036\315\037\317\054\333\001\002\000\004\022\330\001" +
    "\002\000\066\010\244\015\uffd4\036\235\037\233\071\125" +
    "\072\121\073\123\074\124\075\223\076\232\077\221\100" +
    "\122\101\242\102\240\104\245\105\256\106\241\107\225" +
    "\110\252\111\224\112\uffd4\113\uffd4\116\230\117\237\120" +
    "\254\121\227\001\002\000\004\022\326\001\002\000\066" +
    "\010\uffc1\015\uffc1\036\uffc1\037\uffc1\071\uffc1\072\uffc1\073" +
    "\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1" +
    "\102\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110\uffc1\111" +
    "\uffc1\112\uffc1\113\uffc1\116\uffc1\117\uffc1\120\uffc1\121\uffc1" +
    "\001\002\000\004\015\325\001\002\000\004\016\267\001" +
    "\002\000\066\010\uffd2\015\uffd2\036\uffd2\037\uffd2\071\uffd2" +
    "\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100" +
    "\uffd2\101\uffd2\102\uffd2\104\uffd2\105\uffd2\106\uffd2\107\uffd2" +
    "\110\uffd2\111\uffd2\112\uffd2\113\uffd2\116\uffd2\117\uffd2\120" +
    "\uffd2\121\uffd2\001\002\000\004\016\261\001\002\000\006" +
    "\022\260\024\100\001\002\000\004\022\257\001\002\000" +
    "\066\010\uffc8\015\uffc8\036\uffc8\037\uffc8\071\uffc8\072\uffc8" +
    "\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101" +
    "\uffc8\102\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8" +
    "\111\uffc8\112\uffc8\113\uffc8\116\uffc8\117\uffc8\120\uffc8\121" +
    "\uffc8\001\002\000\066\010\uffbd\015\uffbd\036\uffbd\037\uffbd" +
    "\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077" +
    "\uffbd\100\uffbd\101\uffbd\102\uffbd\104\uffbd\105\uffbd\106\uffbd" +
    "\107\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd\116\uffbd\117" +
    "\uffbd\120\uffbd\121\uffbd\001\002\000\040\004\016\005\027" +
    "\006\022\007\014\010\010\012\013\013\015\016\024\027" +
    "\025\030\017\036\026\037\021\052\011\116\012\121\020" +
    "\001\002\000\046\023\263\026\045\027\044\030\035\031" +
    "\043\032\040\033\046\036\033\037\032\042\041\043\037" +
    "\044\036\045\031\046\050\047\047\050\052\051\034\053" +
    "\042\001\002\000\040\004\016\005\027\006\022\007\014" +
    "\010\010\012\013\013\015\016\024\027\025\030\017\036" +
    "\026\037\021\052\011\116\012\121\020\001\002\000\046" +
    "\017\265\026\045\027\044\030\035\031\043\032\040\033" +
    "\046\036\033\037\032\042\041\043\037\044\036\045\031" +
    "\046\050\047\047\050\052\051\034\053\042\001\002\000" +
    "\004\022\266\001\002\000\066\010\uffcc\015\uffcc\036\uffcc" +
    "\037\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076" +
    "\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\104\uffcc\105\uffcc" +
    "\106\uffcc\107\uffcc\110\uffcc\111\uffcc\112\uffcc\113\uffcc\116" +
    "\uffcc\117\uffcc\120\uffcc\121\uffcc\001\002\000\016\010\272" +
    "\071\125\072\121\073\123\074\124\100\122\001\002\000" +
    "\004\022\307\001\002\000\004\010\277\001\002\000\006" +
    "\010\uffd6\054\273\001\002\000\044\004\016\005\027\006" +
    "\022\007\014\010\010\012\013\013\015\014\111\016\024" +
    "\027\025\030\017\036\026\037\021\052\011\115\106\116" +
    "\012\121\020\001\002\000\004\022\uffab\001\002\000\006" +
    "\022\uffe6\023\uffe6\001\002\000\012\020\304\022\uffe4\023" +
    "\uffe4\054\303\001\002\000\014\017\uffe2\020\uffe2\022\uffe2" +
    "\023\uffe2\054\uffe2\001\002\000\006\022\uffac\023\301\001" +
    "\002\000\004\010\277\001\002\000\006\022\uffe7\023\uffe7" +
    "\001\002\000\044\004\016\005\027\006\022\007\014\010" +
    "\010\012\013\013\015\014\111\016\024\027\025\030\017" +
    "\036\026\037\021\052\011\115\106\116\012\121\020\001" +
    "\002\000\004\021\305\001\002\000\014\017\uffe3\020\uffe3" +
    "\022\uffe3\023\uffe3\054\uffe3\001\002\000\006\022\uffe5\023" +
    "\uffe5\001\002\000\040\004\016\005\027\006\022\007\014" +
    "\010\010\012\013\013\015\016\024\027\025\030\017\036" +
    "\026\037\021\052\011\116\012\121\020\001\002\000\046" +
    "\022\311\026\045\027\044\030\035\031\043\032\040\033" +
    "\046\036\033\037\032\042\041\043\037\044\036\045\031" +
    "\046\050\047\047\050\052\051\034\053\042\001\002\000" +
    "\010\010\314\036\235\037\233\001\002\000\004\017\uffa9" +
    "\001\002\000\004\017\321\001\002\000\010\036\315\037" +
    "\317\054\316\001\002\000\006\017\uffbb\022\uffbb\001\002" +
    "\000\044\004\016\005\027\006\022\007\014\010\010\012" +
    "\013\013\015\014\111\016\024\027\025\030\017\036\026" +
    "\037\021\052\011\115\106\116\012\121\020\001\002\000" +
    "\006\017\uffba\022\uffba\001\002\000\004\017\uffaa\001\002" +
    "\000\004\014\322\001\002\000\062\010\244\015\uffd5\036" +
    "\235\037\233\071\125\072\121\073\123\074\124\075\223" +
    "\076\232\077\221\100\122\101\242\102\240\104\245\105" +
    "\256\106\241\107\225\110\252\111\224\116\230\117\237" +
    "\120\254\121\227\001\002\000\004\015\324\001\002\000" +
    "\066\010\uffad\015\uffad\036\uffad\037\uffad\071\uffad\072\uffad" +
    "\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad\101" +
    "\uffad\102\uffad\104\uffad\105\uffad\106\uffad\107\uffad\110\uffad" +
    "\111\uffad\112\uffad\113\uffad\116\uffad\117\uffad\120\uffad\121" +
    "\uffad\001\002\000\036\010\uffe8\015\uffe8\061\uffe8\062\uffe8" +
    "\063\uffe8\064\uffe8\065\uffe8\066\uffe8\070\uffe8\071\uffe8\072" +
    "\uffe8\073\uffe8\074\uffe8\100\uffe8\001\002\000\066\010\uffbc" +
    "\015\uffbc\036\uffbc\037\uffbc\071\uffbc\072\uffbc\073\uffbc\074" +
    "\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc" +
    "\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112" +
    "\uffbc\113\uffbc\116\uffbc\117\uffbc\120\uffbc\121\uffbc\001\002" +
    "\000\066\010\uffd3\015\uffd3\036\uffd3\037\uffd3\071\uffd3\072" +
    "\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3" +
    "\101\uffd3\102\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3\110" +
    "\uffd3\111\uffd3\112\uffd3\113\uffd3\116\uffd3\117\uffd3\120\uffd3" +
    "\121\uffd3\001\002\000\066\010\uffc9\015\uffc9\036\uffc9\037" +
    "\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9" +
    "\077\uffc9\100\uffc9\101\uffc9\102\uffc9\104\uffc9\105\uffc9\106" +
    "\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9\113\uffc9\116\uffc9" +
    "\117\uffc9\120\uffc9\121\uffc9\001\002\000\046\004\016\005" +
    "\027\006\022\007\014\010\010\012\013\013\015\014\111" +
    "\016\024\017\uffb7\027\025\030\017\036\026\037\021\052" +
    "\011\115\106\116\012\121\020\001\002\000\010\020\137" +
    "\024\uff9e\054\336\001\002\000\044\004\016\005\027\006" +
    "\022\007\014\010\010\012\013\013\015\014\111\016\024" +
    "\027\025\030\017\036\026\037\021\052\011\115\106\116" +
    "\012\121\020\001\002\000\004\022\335\001\002\000\066" +
    "\010\uffc6\015\uffc6\036\uffc6\037\uffc6\071\uffc6\072\uffc6\073" +
    "\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6" +
    "\102\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\111" +
    "\uffc6\112\uffc6\113\uffc6\116\uffc6\117\uffc6\120\uffc6\121\uffc6" +
    "\001\002\000\044\004\016\005\027\006\022\007\014\010" +
    "\010\012\013\013\015\014\111\016\024\027\025\030\017" +
    "\036\026\037\021\052\011\115\106\116\012\121\020\001" +
    "\002\000\004\022\uff9b\001\002\000\004\017\341\001\002" +
    "\000\004\022\342\001\002\000\066\010\uffc5\015\uffc5\036" +
    "\uffc5\037\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5" +
    "\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\104\uffc5\105" +
    "\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5" +
    "\116\uffc5\117\uffc5\120\uffc5\121\uffc5\001\002\000\004\022" +
    "\345\001\002\000\066\010\uffcb\015\uffcb\036\uffcb\037\uffcb" +
    "\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077" +
    "\uffcb\100\uffcb\101\uffcb\102\uffcb\104\uffcb\105\uffcb\106\uffcb" +
    "\107\uffcb\110\uffcb\111\uffcb\112\uffcb\113\uffcb\116\uffcb\117" +
    "\uffcb\120\uffcb\121\uffcb\001\002\000\066\010\uffca\015\uffca" +
    "\036\uffca\037\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075" +
    "\uffca\076\uffca\077\uffca\100\uffca\101\uffca\102\uffca\104\uffca" +
    "\105\uffca\106\uffca\107\uffca\110\uffca\111\uffca\112\uffca\113" +
    "\uffca\116\uffca\117\uffca\120\uffca\121\uffca\001\002\000\040" +
    "\004\016\005\027\006\022\007\014\010\010\012\013\013" +
    "\015\016\024\027\025\030\017\036\026\037\021\052\011" +
    "\116\012\121\020\001\002\000\046\017\350\026\045\027" +
    "\044\030\035\031\043\032\040\033\046\036\033\037\032" +
    "\042\041\043\037\044\036\045\031\046\050\047\047\050" +
    "\052\051\034\053\042\001\002\000\004\014\351\001\002" +
    "\000\062\010\244\015\uffd5\036\235\037\233\071\125\072" +
    "\121\073\123\074\124\075\223\076\232\077\221\100\122" +
    "\101\242\102\240\104\245\105\256\106\241\107\225\110" +
    "\252\111\224\116\230\117\237\120\254\121\227\001\002" +
    "\000\004\015\353\001\002\000\066\010\uffaf\015\uffaf\036" +
    "\uffaf\037\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf" +
    "\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\104\uffaf\105" +
    "\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112\uffaf\113\uffaf" +
    "\116\uffaf\117\uffaf\120\uffaf\121\uffaf\001\002\000\040\004" +
    "\016\005\027\006\022\007\014\010\010\012\013\013\015" +
    "\016\024\027\025\030\017\036\026\037\021\052\011\116" +
    "\012\121\020\001\002\000\046\017\356\026\045\027\044" +
    "\030\035\031\043\032\040\033\046\036\033\037\032\042" +
    "\041\043\037\044\036\045\031\046\050\047\047\050\052" +
    "\051\034\053\042\001\002\000\004\014\357\001\002\000" +
    "\062\010\244\015\uffd5\036\235\037\233\071\125\072\121" +
    "\073\123\074\124\075\223\076\232\077\221\100\122\101" +
    "\242\102\240\104\245\105\256\106\241\107\225\110\252" +
    "\111\224\116\230\117\237\120\254\121\227\001\002\000" +
    "\004\015\361\001\002\000\070\010\uffb0\015\uffb0\036\uffb0" +
    "\037\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076" +
    "\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0" +
    "\105\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0\113" +
    "\uffb0\116\uffb0\117\uffb0\120\uffb0\121\uffb0\001\002\000\040" +
    "\004\016\005\027\006\022\007\014\010\010\012\013\013" +
    "\015\016\024\027\025\030\017\036\026\037\021\052\011" +
    "\116\012\121\020\001\002\000\046\023\364\026\045\027" +
    "\044\030\035\031\043\032\040\033\046\036\033\037\032" +
    "\042\041\043\037\044\036\045\031\046\050\047\047\050" +
    "\052\051\034\053\042\001\002\000\040\004\016\005\027" +
    "\006\022\007\014\010\010\012\013\013\015\016\024\027" +
    "\025\030\017\036\026\037\021\052\011\116\012\121\020" +
    "\001\002\000\046\017\366\026\045\027\044\030\035\031" +
    "\043\032\040\033\046\036\033\037\032\042\041\043\037" +
    "\044\036\045\031\046\050\047\047\050\052\051\034\053" +
    "\042\001\002\000\004\022\367\001\002\000\066\010\uffcd" +
    "\015\uffcd\036\uffcd\037\uffcd\071\uffcd\072\uffcd\073\uffcd\074" +
    "\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd" +
    "\104\uffcd\105\uffcd\106\uffcd\107\uffcd\110\uffcd\111\uffcd\112" +
    "\uffcd\113\uffcd\116\uffcd\117\uffcd\120\uffcd\121\uffcd\001\002" +
    "\000\006\017\uffb9\022\uffb9\001\002\000\006\014\372\102" +
    "\373\001\002\000\062\010\244\015\uffd5\036\235\037\233" +
    "\071\125\072\121\073\123\074\124\075\223\076\232\077" +
    "\221\100\122\101\242\102\240\104\245\105\256\106\241" +
    "\107\225\110\252\111\224\116\230\117\237\120\254\121" +
    "\227\001\002\000\004\016\374\001\002\000\040\004\016" +
    "\005\027\006\022\007\014\010\010\012\013\013\015\016" +
    "\024\027\025\030\017\036\026\037\021\052\011\116\012" +
    "\121\020\001\002\000\046\017\376\026\045\027\044\030" +
    "\035\031\043\032\040\033\046\036\033\037\032\042\041" +
    "\043\037\044\036\045\031\046\050\047\047\050\052\051" +
    "\034\053\042\001\002\000\004\014\377\001\002\000\062" +
    "\010\244\015\uffd5\036\235\037\233\071\125\072\121\073" +
    "\123\074\124\075\223\076\232\077\221\100\122\101\242" +
    "\102\240\104\245\105\256\106\241\107\225\110\252\111" +
    "\224\116\230\117\237\120\254\121\227\001\002\000\004" +
    "\015\u0101\001\002\000\070\010\uffb1\015\uffb1\036\uffb1\037" +
    "\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1" +
    "\077\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105" +
    "\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1\112\uffb1\113\uffb1" +
    "\116\uffb1\117\uffb1\120\uffb1\121\uffb1\001\002\000\004\015" +
    "\u0103\001\002\000\066\010\uffb3\015\uffb3\036\uffb3\037\uffb3" +
    "\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077" +
    "\uffb3\100\uffb3\101\uffb3\102\uffb3\104\uffb3\105\uffb3\106\uffb3" +
    "\107\uffb3\110\uffb3\111\uffb3\112\uffb3\113\uffb3\116\uffb3\117" +
    "\uffb3\120\uffb3\121\uffb3\001\002\000\006\017\uffb8\022\uffb8" +
    "\001\002\000\040\004\016\005\027\006\022\007\014\010" +
    "\010\012\013\013\015\016\024\027\025\030\017\036\026" +
    "\037\021\052\011\116\012\121\020\001\002\000\046\017" +
    "\u0107\026\045\027\044\030\035\031\043\032\040\033\046" +
    "\036\033\037\032\042\041\043\037\044\036\045\031\046" +
    "\050\047\047\050\052\051\034\053\042\001\002\000\004" +
    "\022\u0108\001\002\000\066\010\uffd0\015\uffd0\036\uffd0\037" +
    "\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0" +
    "\077\uffd0\100\uffd0\101\uffd0\102\uffd0\104\uffd0\105\uffd0\106" +
    "\uffd0\107\uffd0\110\uffd0\111\uffd0\112\uffd0\113\uffd0\116\uffd0" +
    "\117\uffd0\120\uffd0\121\uffd0\001\002\000\040\004\016\005" +
    "\027\006\022\007\014\010\010\012\013\013\015\016\024" +
    "\027\025\030\017\036\026\037\021\052\011\116\012\121" +
    "\020\001\002\000\046\017\u010b\026\045\027\044\030\035" +
    "\031\043\032\040\033\046\036\033\037\032\042\041\043" +
    "\037\044\036\045\031\046\050\047\047\050\052\051\034" +
    "\053\042\001\002\000\004\022\u010c\001\002\000\066\010" +
    "\uffce\015\uffce\036\uffce\037\uffce\071\uffce\072\uffce\073\uffce" +
    "\074\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce\102" +
    "\uffce\104\uffce\105\uffce\106\uffce\107\uffce\110\uffce\111\uffce" +
    "\112\uffce\113\uffce\116\uffce\117\uffce\120\uffce\121\uffce\001" +
    "\002\000\046\004\016\005\027\006\022\007\014\010\010" +
    "\012\013\013\015\014\111\016\024\017\uffb7\027\025\030" +
    "\017\036\026\037\021\052\011\115\106\116\012\121\020" +
    "\001\002\000\004\017\u010f\001\002\000\004\022\u0110\001" +
    "\002\000\066\010\uffc4\015\uffc4\036\uffc4\037\uffc4\071\uffc4" +
    "\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100" +
    "\uffc4\101\uffc4\102\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4" +
    "\110\uffc4\111\uffc4\112\uffc4\113\uffc4\116\uffc4\117\uffc4\120" +
    "\uffc4\121\uffc4\001\002\000\062\010\244\015\uffd5\036\235" +
    "\037\233\071\125\072\121\073\123\074\124\075\223\076" +
    "\232\077\221\100\122\101\242\102\240\104\245\105\256" +
    "\106\241\107\225\110\252\111\224\116\230\117\237\120" +
    "\254\121\227\001\002\000\004\015\u0113\001\002\000\004" +
    "\106\u0114\001\002\000\004\016\u0115\001\002\000\040\004" +
    "\016\005\027\006\022\007\014\010\010\012\013\013\015" +
    "\016\024\027\025\030\017\036\026\037\021\052\011\116" +
    "\012\121\020\001\002\000\046\017\u0117\026\045\027\044" +
    "\030\035\031\043\032\040\033\046\036\033\037\032\042" +
    "\041\043\037\044\036\045\031\046\050\047\047\050\052" +
    "\051\034\053\042\001\002\000\004\022\u0118\001\002\000" +
    "\066\010\uffae\015\uffae\036\uffae\037\uffae\071\uffae\072\uffae" +
    "\073\uffae\074\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101" +
    "\uffae\102\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae" +
    "\111\uffae\112\uffae\113\uffae\116\uffae\117\uffae\120\uffae\121" +
    "\uffae\001\002\000\040\004\016\005\027\006\022\007\014" +
    "\010\010\012\013\013\015\016\024\027\025\030\017\036" +
    "\026\037\021\052\011\116\012\121\020\001\002\000\046" +
    "\017\u011b\026\045\027\044\030\035\031\043\032\040\033" +
    "\046\036\033\037\032\042\041\043\037\044\036\045\031" +
    "\046\050\047\047\050\052\051\034\053\042\001\002\000" +
    "\004\014\u011c\001\002\000\010\015\uffa7\112\u011d\113\u011e" +
    "\001\002\000\040\004\016\005\027\006\022\007\014\010" +
    "\010\012\013\013\015\016\024\027\025\030\017\036\026" +
    "\037\021\052\011\116\012\121\020\001\002\000\004\025" +
    "\u0124\001\002\000\004\015\u0123\001\002\000\010\015\uffa6" +
    "\112\u011d\113\u011e\001\002\000\010\015\uffa4\112\uffa4\113" +
    "\uffa4\001\002\000\010\015\uffa5\112\uffa5\113\uffa5\001\002" +
    "\000\066\010\uffa8\015\uffa8\036\uffa8\037\uffa8\071\uffa8\072" +
    "\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8" +
    "\101\uffa8\102\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\110" +
    "\uffa8\111\uffa8\112\uffa8\113\uffa8\116\uffa8\117\uffa8\120\uffa8" +
    "\121\uffa8\001\002\000\066\010\244\015\uffd5\036\235\037" +
    "\233\071\125\072\121\073\123\074\124\075\223\076\232" +
    "\077\221\100\122\101\242\102\240\104\245\105\256\106" +
    "\241\107\225\110\252\111\224\112\uffd5\113\uffd5\116\230" +
    "\117\237\120\254\121\227\001\002\000\010\015\uffa2\112" +
    "\uffa2\113\uffa2\001\002\000\046\025\u0127\026\045\027\044" +
    "\030\035\031\043\032\040\033\046\036\033\037\032\042" +
    "\041\043\037\044\036\045\031\046\050\047\047\050\052" +
    "\051\034\053\042\001\002\000\066\010\244\015\uffd5\036" +
    "\235\037\233\071\125\072\121\073\123\074\124\075\223" +
    "\076\232\077\221\100\122\101\242\102\240\104\245\105" +
    "\256\106\241\107\225\110\252\111\224\112\uffd5\113\uffd5" +
    "\116\230\117\237\120\254\121\227\001\002\000\010\015" +
    "\uffa3\112\uffa3\113\uffa3\001\002\000\040\004\016\005\027" +
    "\006\022\007\014\010\010\012\013\013\015\016\024\027" +
    "\025\030\017\036\026\037\021\052\011\116\012\121\020" +
    "\001\002\000\046\017\u012b\026\045\027\044\030\035\031" +
    "\043\032\040\033\046\036\033\037\032\042\041\043\037" +
    "\044\036\045\031\046\050\047\047\050\052\051\034\053" +
    "\042\001\002\000\004\022\u012c\001\002\000\066\010\uffd1" +
    "\015\uffd1\036\uffd1\037\uffd1\071\uffd1\072\uffd1\073\uffd1\074" +
    "\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1" +
    "\104\uffd1\105\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1\112" +
    "\uffd1\113\uffd1\116\uffd1\117\uffd1\120\uffd1\121\uffd1\001\002" +
    "\000\006\022\u012e\023\301\001\002\000\066\010\uffc7\015" +
    "\uffc7\036\uffc7\037\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\104" +
    "\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\112\uffc7" +
    "\113\uffc7\116\uffc7\117\uffc7\120\uffc7\121\uffc7\001\002\000" +
    "\004\017\u0130\001\002\000\004\022\u0131\001\002\000\066" +
    "\010\uffcf\015\uffcf\036\uffcf\037\uffcf\071\uffcf\072\uffcf\073" +
    "\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf" +
    "\102\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf\111" +
    "\uffcf\112\uffcf\113\uffcf\116\uffcf\117\uffcf\120\uffcf\121\uffcf" +
    "\001\002\000\066\010\uffc3\015\uffc3\036\uffc3\037\uffc3\071" +
    "\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3" +
    "\100\uffc3\101\uffc3\102\uffc3\104\uffc3\105\uffc3\106\uffc3\107" +
    "\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\116\uffc3\117\uffc3" +
    "\120\uffc3\121\uffc3\001\002\000\004\010\277\001\002\000" +
    "\010\017\uffdd\020\304\023\uffdd\001\002\000\010\017\uffdc" +
    "\020\304\023\uffdc\001\002\000\006\022\u013e\023\301\001" +
    "\002\000\014\016\u0138\020\uffe2\022\uffe2\023\uffe2\054\uffe2" +
    "\001\002\000\024\010\207\017\uffe1\023\uffe1\066\212\071" +
    "\125\072\121\073\123\074\124\100\122\001\002\000\006" +
    "\017\u013a\023\215\001\002\000\004\014\u013b\001\002\000" +
    "\062\010\244\015\uffd5\036\235\037\233\071\125\072\121" +
    "\073\123\074\124\075\223\076\232\077\221\100\122\101" +
    "\242\102\240\104\245\105\256\106\241\107\225\110\252" +
    "\111\224\116\230\117\237\120\254\121\227\001\002\000" +
    "\004\015\u013d\001\002\000\036\010\uffe9\015\uffe9\061\uffe9" +
    "\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\070\uffe9\071" +
    "\uffe9\072\uffe9\073\uffe9\074\uffe9\100\uffe9\001\002\000\036" +
    "\010\uffea\015\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065" +
    "\uffea\066\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea" +
    "\100\uffea\001\002\000\040\002\uffff\010\uffff\015\uffff\061" +
    "\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff\070\uffff" +
    "\071\uffff\072\uffff\073\uffff\074\uffff\100\uffff\001\002\000" +
    "\036\010\uffed\015\uffed\061\uffed\062\uffed\063\uffed\064\uffed" +
    "\065\uffed\066\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074" +
    "\uffed\100\uffed\001\002\000\004\014\u0142\001\002\000\036" +
    "\010\ufff9\015\uffef\061\160\062\165\063\164\064\161\065" +
    "\167\066\170\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9" +
    "\100\ufff9\001\002\000\004\015\u0144\001\002\000\040\002" +
    "\ufffe\010\ufffe\015\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe" +
    "\065\ufffe\066\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe\074" +
    "\ufffe\100\ufffe\001\002\000\034\010\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\064\ufff7\065\ufff7\066\ufff7\070\ufff7\071\ufff7\072" +
    "\ufff7\073\ufff7\074\ufff7\100\ufff7\001\002\000\004\002\001" +
    "\001\002\000\040\004\016\005\027\006\022\007\014\010" +
    "\010\012\013\013\015\016\024\027\025\030\017\036\026" +
    "\037\021\052\011\116\012\121\020\001\002\000\046\022" +
    "\u0149\026\045\027\044\030\035\031\043\032\040\033\046" +
    "\036\033\037\032\042\041\043\037\044\036\045\031\046" +
    "\050\047\047\050\052\051\034\053\042\001\002\000\022" +
    "\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\070" +
    "\ufffb\114\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\010\002\004\003\005\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\165\006\161" +
    "\007\170\010\162\001\001\000\006\045\022\053\027\001" +
    "\001\000\006\046\152\050\151\001\001\000\006\045\022" +
    "\053\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\045\022\053\143\001\001\000\002\001\001\000\006\045" +
    "\022\053\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\022\053\075\001\001\000\006\045\022\053" +
    "\074\001\001\000\006\045\022\053\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\045\022\053\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\022" +
    "\053\071\001\001\000\006\045\022\053\070\001\001\000" +
    "\006\045\022\053\067\001\001\000\006\045\022\053\066" +
    "\001\001\000\006\045\022\053\065\001\001\000\006\045" +
    "\022\053\064\001\001\000\006\045\022\053\063\001\001" +
    "\000\006\045\022\053\062\001\001\000\006\045\022\053" +
    "\061\001\001\000\006\045\022\053\056\001\001\000\006" +
    "\045\022\053\055\001\001\000\006\045\022\053\054\001" +
    "\001\000\006\045\022\053\053\001\001\000\002\001\001" +
    "\000\006\045\022\053\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\045\022\053\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\107\030\104\031" +
    "\106\045\022\053\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\112\045\022\051\111\053\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\115\045\022\053\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\117\045\022\053\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\132\001\001\000\002\001\001\000\014\020\107\030\130" +
    "\031\106\045\022\053\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\045\022\053\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\045" +
    "\022\053\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\022\053\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\107\030\155\031" +
    "\106\045\022\053\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\u0144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\201" +
    "\006\161\007\170\010\200\011\176\012\175\013\177\001" +
    "\001\000\014\005\201\006\161\007\170\010\200\013\u013f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\202\001\001\000\002\001\001\000\010\014\u0135\015\274" +
    "\016\275\001\001\000\002\001\001\000\012\017\210\024" +
    "\212\025\207\026\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\u0134\001\001\000" +
    "\004\017\u0132\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\210\026\215\001\001\000\002\001\001\000" +
    "\034\017\221\021\250\022\245\023\252\027\217\032\235" +
    "\033\233\034\247\035\230\036\225\041\242\045\254\052" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\u012c\015\274\016\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\342\045\022\053\103\001\001" +
    "\000\002\001\001\000\006\046\152\050\331\001\001\000" +
    "\002\001\001\000\030\017\221\023\326\027\217\032\235" +
    "\033\233\034\247\035\230\036\225\041\242\045\254\052" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\045\022\053\261\001\001\000" +
    "\002\001\001\000\006\045\022\053\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\270\037\267\001\001\000\002\001\001\000\010\014\277" +
    "\015\274\016\275\001\001\000\002\001\001\000\010\020" +
    "\273\045\022\053\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\301\016\275\001\001\000\002\001\001" +
    "\000\010\020\305\045\022\053\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\022" +
    "\053\307\001\001\000\002\001\001\000\006\027\311\040" +
    "\312\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\317\045\022\053" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\017\221\021\322\022\245\023\252\027" +
    "\217\032\235\033\233\034\247\035\230\036\225\041\242" +
    "\045\254\052\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\107\030\337\031\106\045" +
    "\022\053\103\001\001\000\002\001\001\000\010\020\333" +
    "\045\022\053\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\336\045\022\053\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\022\053\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\017\221\021\351\022\245\023\252" +
    "\027\217\032\235\033\233\034\247\035\230\036\225\041" +
    "\242\045\254\052\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\045\022\053\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\017\221\021\357\022\245" +
    "\023\252\027\217\032\235\033\233\034\247\035\230\036" +
    "\225\041\242\045\254\052\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\045\022\053\362\001\001\000" +
    "\002\001\001\000\006\045\022\053\364\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\017\221\021\u0101\022\245" +
    "\023\252\027\217\032\235\033\233\034\247\035\230\036" +
    "\225\041\242\045\254\052\246\001\001\000\002\001\001" +
    "\000\006\045\022\053\374\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\017\221\021\377\022\245\023\252" +
    "\027\217\032\235\033\233\034\247\035\230\036\225\041" +
    "\242\045\254\052\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\022\053\u0105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\045\022\053" +
    "\u0109\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\020\107\030\u010d\031\106\045\022\053" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\017\221\021\u0111\022\245\023\252\027" +
    "\217\032\235\033\233\034\247\035\230\036\225\041\242" +
    "\045\254\052\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\022\053\u0115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\022\053\u0119\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\042\u011e\043\u011f\044\u0120\001\001\000" +
    "\006\045\022\053\u0125\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\u0121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\017\221\021\u0124" +
    "\022\245\023\252\027\217\032\235\033\233\034\247\035" +
    "\230\036\225\041\242\045\254\052\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\017\221\021\u0127\022" +
    "\245\023\252\027\217\032\235\033\233\034\247\035\230" +
    "\036\225\041\242\045\254\052\246\001\001\000\002\001" +
    "\001\000\006\045\022\053\u0129\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\u0133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\210\024\u0138\025\207\026\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\017\221" +
    "\021\u013b\022\245\023\252\027\217\032\235\033\233\034" +
    "\247\035\230\036\225\041\242\045\254\052\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\201\006\161\007\170\010\200\011\u0142\012\175\013" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\045\022\053\u0147\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private Ast ast;
	
	public Ast getAST(){
		return ast;
	}
	
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + s.left +" Columna "+ s.right + ". Identificador " +s.value + " no reconocido." );
		//AnalizadorError tmp = new AnalizadorError();
		//tmp.setColumna(s.right+1);
		//tmp.setLinea(s.left+1);
		//tmp.setValor(s.value+"");
		//tmp.setError("Sintáctico");
        
		//error.add(tmp);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico Fatal en la Linea " + s.left + " Columna "+ s.right +". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {




  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORTS CLASE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Import> a = (ArrayList<Import>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Clase b = (Clase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
            b.setImports(a);
            parser.ast = new Ast(b);
            System.out.println("COLINE OK"); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASE ::= MOD class_ id llaveIzquierda CUERPO_CLASE llaveDerecha 
            {
              Clase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		ArrayList<Modificador> a = (ArrayList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<NodoAst> c = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Clase(a, b, c, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASE ::= MOD class_ id extends_ id llaveIzquierda CUERPO_CLASE llaveDerecha 
            {
              Clase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		ArrayList<Modificador> a = (ArrayList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<NodoAst> d = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Clase(a, b, c, d, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= 
            {
              ArrayList<Import> RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= IMPORTSL 
            {
              ArrayList<Import> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Import> a = (ArrayList<Import>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTSL ::= IMPORTSL import_ E puntoycoma 
            {
              ArrayList<Import> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<Import> a = (ArrayList<Import>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; RESULT.add(new Import(b, xleft, xright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTSL",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTSL ::= import_ E puntoycoma 
            {
              ArrayList<Import> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(new Import(a, xleft, xright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTSL",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MOD ::= 
            {
              ArrayList<Modificador> RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOD",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MOD ::= MODIFICADORES 
            {
              ArrayList<Modificador> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Modificador> a = (ArrayList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOD",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MODIFICADORES ::= MODIFICADORES MODIFICADOR 
            {
              ArrayList<Modificador> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Modificador> a = (ArrayList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Modificador b = (Modificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MODIFICADORES ::= MODIFICADOR 
            {
              ArrayList<Modificador> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Modificador a = (Modificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MODIFICADOR ::= public_ 
            {
              Modificador RESULT =null;
		 RESULT = Modificador.PUBLIC; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MODIFICADOR ::= protected_ 
            {
              Modificador RESULT =null;
		 RESULT = Modificador.PROTECTED; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MODIFICADOR ::= private_ 
            {
              Modificador RESULT =null;
		 RESULT = Modificador.PRIVATE; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MODIFICADOR ::= abstract_ 
            {
              Modificador RESULT =null;
		 RESULT = Modificador.ABSTRACT; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MODIFICADOR ::= static_ 
            {
              Modificador RESULT =null;
		 RESULT = Modificador.STATIC; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MODIFICADOR ::= final_ 
            {
              Modificador RESULT =null;
		 RESULT = Modificador.FINAL; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_CLASE ::= 
            {
              ArrayList<NodoAst> RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_CLASE ::= CUERPO_CLASE_LISTA 
            {
              ArrayList<NodoAst> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<NodoAst> a = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_CLASE_LISTA ::= CUERPO_CLASE_LISTA CUERPO_CLASE_DEC 
            {
              ArrayList<NodoAst> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<NodoAst> a = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_CLASE_LISTA ::= CUERPO_CLASE_DEC 
            {
              ArrayList<NodoAst> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAst a = (NodoAst)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_CLASE_DEC ::= CLASE 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Clase a = (Clase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_DEC",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_CLASE_DEC ::= MOD TIPO DECLARACION_VARIABLES puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<Modificador> a = (ArrayList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Asignacion> c = (ArrayList<Asignacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(a, b, c, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_DEC",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_CLASE_DEC ::= MOD TIPO id parIzquierda PARAMETROS_DEC parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		ArrayList<Modificador> a = (ArrayList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		ArrayList<Simbolo> d = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Bloque e = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new MetodoDec(a, b, c, d, e, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_DEC",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_CLASE_DEC ::= MOD id parIzquierda PARAMETROS_DEC parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		ArrayList<Modificador> a = (ArrayList<Modificador>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		ArrayList<Simbolo> c = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Bloque d = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Constructor(a, b, c, d, bleft, bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CLASE_DEC",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_VARIABLES ::= DECLARACION_VARIABLES coma DECLARACION_VARIABLE 
            {
              ArrayList<Asignacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Asignacion> a = (ArrayList<Asignacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Asignacion b = (Asignacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_VARIABLES ::= DECLARACION_VARIABLE 
            {
              ArrayList<Asignacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_VARIABLE ::= DECLARACION_VARIABLE_ID igual VALOR 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Identificador a = (Identificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_VARIABLE ::= DECLARACION_VARIABLE_ID 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Identificador a = (Identificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_VARIABLE_ID ::= DECLARACION_VARIABLE_ID corcheteIzquierda corcheteDerecha 
            {
              Identificador RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Identificador a = (Identificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = a; RESULT.addDim(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ID",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_VARIABLE_ID ::= id 
            {
              Identificador RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Identificador(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ID",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETROS_DEC ::= 
            {
              ArrayList<Simbolo> RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETROS_DEC ::= PARAMETROS_DEC_LISTA 
            {
              ArrayList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Simbolo> a = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETROS_DEC_LISTA ::= PARAMETROS_DEC coma PARAMETRO_DEC 
            {
              ArrayList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Simbolo> a = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC_LISTA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMETROS_DEC_LISTA ::= PARAMETRO_DEC 
            {
              ArrayList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_DEC_LISTA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETRO_DEC ::= final_ TIPO DECLARACION_VARIABLE_ID 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Identificador c = (Identificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Simbolo(b, c.getId(), c.getDim()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO_DEC",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETRO_DEC ::= TIPO DECLARACION_VARIABLE_ID 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Identificador b = (Identificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Simbolo(a, b.getId(), b.getDim()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO_DEC",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= int_ 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.type.INT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= double_ 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.type.DOUBLE); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= char_ 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.type.CHAR); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= boolean_ 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.type.BOOLEAN); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= void_ 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.type.VOID); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= id 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            if(a.equals("String")){ RESULT = new Tipo(Tipo.type.STRING); } 
            else { RESULT = new Tipo(Tipo.type.OBJECT, a);} 
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUES ::= 
            {
              Bloque RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUES ::= BLOQUES_L 
            {
              Bloque RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<NodoAst> a = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Bloque(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUES_L ::= BLOQUES_L BLOQUE 
            {
              ArrayList<NodoAst> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<NodoAst> a = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES_L",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUES_L ::= BLOQUE 
            {
              ArrayList<NodoAst> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAst a = (NodoAst)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES_L",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE ::= print_ parIzquierda E parDerecha puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Print(b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUE ::= println_ parIzquierda E parDerecha puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Println(b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE ::= printTabla_ parIzquierda parDerecha puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 RESULT = new PrintTabla(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUE ::= read_file_ parIzquierda E parDerecha puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new ReadFile(b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOQUE ::= write_file_ parIzquierda E coma E parDerecha puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new WriteFile(b, c, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUE ::= graph_ parIzquierda E coma E parDerecha puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Graph(b, c, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUE ::= return_ puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Return(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOQUE ::= return_ VALOR puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Return(b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE ::= break_ puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Break(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOQUE ::= continue_ puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUE ::= TIPO DECLARACION_VARIABLES puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Asignacion> b = (ArrayList<Asignacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(a, b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOQUE ::= id igual VALOR puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Asignacion(new Identificador(a, aleft, aright), b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUE ::= id parIzquierda PARAMETROS parDerecha puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new LlamadaMetodo(a, b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOQUE ::= this_ parIzquierda PARAMETROS parDerecha puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new ConstructorInv("this", b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOQUE ::= UNARIO puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQUE ::= IF 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		If a = (If)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BLOQUE ::= WHILE 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		While a = (While)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BLOQUE ::= DO_WHILE 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		DoWhile a = (DoWhile)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BLOQUE ::= FOR 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		For a = (For)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BLOQUE ::= SWITCH 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Switch a = (Switch)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BLOQUE ::= ACCESO_OBJETO puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AccesoObjeto a = (AccesoObjeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BLOQUE ::= ASIGNA_ARREGLO puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AsignacionArreglo a = (AsignacionArreglo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // UNARIO ::= id masmas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PostFijo(new Identificador(a, aleft, aright), Operacion.Operador.AUMENTO, xleft+1, xright+1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // UNARIO ::= id menosmenos 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PostFijo(new Identificador(a, aleft, aright), Operacion.Operador.DECREMENTO, xleft+1, xright+1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // UNARIO ::= masmas id 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PreFijo(new Identificador(a, aleft, aright), Operacion.Operador.AUMENTO, xleft+1, xright+1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // UNARIO ::= menosmenos id 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PreFijo(new Identificador(a, aleft, aright), Operacion.Operador.DECREMENTO, xleft+1, xright+1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAMETROS ::= 
            {
              ArrayList<Expresion> RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMETROS ::= PARAMETRO 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAMETRO ::= PARAMETRO coma VALOR 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARAMETRO ::= VALOR 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IF ::= IF_LISTA else_ llaveIzquierda BLOQUES llaveDerecha 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		ArrayList<SubIf> a = (ArrayList<SubIf>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Bloque c = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 a.add(new SubIf(c, bleft, bright)); RESULT = new If(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IF ::= IF_LISTA 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<SubIf> a = (ArrayList<SubIf>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new If(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IF_LISTA ::= IF_LISTA else_ if_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              ArrayList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		ArrayList<SubIf> a = (ArrayList<SubIf>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Bloque d = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; RESULT.add(new SubIf(c, d, bleft, bright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF_LISTA ::= if_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              ArrayList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Bloque c = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(new SubIf(b, c, aleft, aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LISTA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // WHILE ::= while_ parIzquierda E parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              While RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new While(a, b, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DO_WHILE ::= do_ llaveIzquierda BLOQUES llaveDerecha while_ parIzquierda E parDerecha puntoycoma 
            {
              DoWhile RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Bloque a = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new DoWhile(a, b, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FOR ::= for_ parIzquierda FOR_INIT puntoycoma E puntoycoma FOR_UPDATE parDerecha llaveIzquierda BLOQUES llaveDerecha 
            {
              For RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		NodoAst c = (NodoAst)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Bloque d = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new For(a, b, c, d, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FOR_INIT ::= TIPO DECLARACION_VARIABLES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Asignacion> b = (ArrayList<Asignacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(a, b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_INIT",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FOR_INIT ::= id igual VALOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(new Identificador(a, aleft, aright), b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_INIT",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FOR_UPDATE ::= id igual VALOR 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(new Identificador(a, aleft, aright), b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR_UPDATE ::= UNARIO 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SWITCH ::= switch_ parIzquierda E parDerecha llaveIzquierda CASES llaveDerecha 
            {
              Switch RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Case> b = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Switch(a, b, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CASES ::= 
            {
              ArrayList<Case> RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CASES ::= CASESL 
            {
              ArrayList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Case> a = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CASESL ::= CASESL CASE 
            {
              ArrayList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Case> a = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASESL",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CASESL ::= CASE 
            {
              ArrayList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASESL",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CASE ::= case_ E dospuntos BLOQUES 
            {
              Case RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Case(a, b, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CASE ::= default_ dospuntos BLOQUES 
            {
              Case RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Bloque a = (Bloque)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Case(a, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ACCESO_OBJETO ::= ACCESO_OBJETO punto ACCESO 
            {
              AccesoObjeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AccesoObjeto a = (AccesoObjeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.getAccesos().add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_OBJETO",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ACCESO_OBJETO ::= id DIM punto ACCESO 
            {
              AccesoObjeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AccesoObjeto(a, b, aleft, aright); RESULT.getAccesos().add(c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_OBJETO",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DIM ::= 
            {
              ArrayList<Expresion> RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIM",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DIM ::= DIMENSION 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIM",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ACCESO ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Identificador(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ACCESO ::= id parIzquierda PARAMETROS parDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new LlamadaFuncion(new LlamadaMetodo(a, b, aleft, aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ASIGNA_ARREGLO ::= id DIMENSION igual VALOR 
            {
              AsignacionArreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AsignacionArreglo(a, b, c, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA_ARREGLO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALOR ::= E 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALOR ::= new_ id parIzquierda PARAMETROS parDerecha 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Instancia(a, b, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALOR ::= new_ TIPO DIMENSION 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(a, b, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALOR ::= llaveIzquierda ARREGLO llaveDerecha 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Literal(a, xleft, xright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DIMENSION ::= DIMENSION corcheteIzquierda E corcheteDerecha 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DIMENSION ::= corcheteIzquierda E corcheteDerecha 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ARREGLO ::= ARREGLO coma VALOR 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ARREGLO ::= VALOR 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, b, Operacion.Operador.SUMA, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, b, Operacion.Operador.RESTA, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= E asterisco E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, b, Operacion.Operador.MULTIPLICACION, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E diagonal E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, b, Operacion.Operador.DIVISION, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= E modulo E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, b, Operacion.Operador.MODULO, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= menos E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, new Literal(new Tipo(Tipo.type.INT), -1, 0,0), Operacion.Operador.MULTIPLICACION, xleft+1, xright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= mas E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, new Literal(new Tipo(Tipo.type.INT), 1, 0,0), Operacion.Operador.MULTIPLICACION, xleft+1, xright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= E masmas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PostFijo(a, Operacion.Operador.AUMENTO, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= E menosmenos 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PostFijo(a, Operacion.Operador.DECREMENTO, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= masmas E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PreFijo(a, Operacion.Operador.AUMENTO, xleft+1, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= menosmenos E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PreFijo(a, Operacion.Operador.DECREMENTO, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= E mayorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacional(a, b, Operacion.Operador.MAYORQUE, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= E menorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacional(a, b, Operacion.Operador.MENORQUE, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= E mayorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacional(a, b, Operacion.Operador.MAYORIGUAL, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= E menorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacional(a, b, Operacion.Operador.MENORIGUAL, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacional(a, b, Operacion.Operador.IGUAL, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= E diferente E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacional(a, b, Operacion.Operador.DIFERENTE, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E ::= E and E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logica(a, b, Operacion.Operador.AND, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // E ::= E or E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logica(a, b, Operacion.Operador.OR, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // E ::= not E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logica(b, Operacion.Operador.NOT, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // E ::= E xor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logica(a, b, Operacion.Operador.XOR, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // E ::= E interrogacion E dospuntos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Ternario(a, b, c, xleft, xright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // E ::= parIzquierda E parDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // E ::= id DIMENSION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AccesoArreglo(a, b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // E ::= ACCESO_OBJETO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AccesoObjeto a = (AccesoObjeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Acceso(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // E ::= this_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new This(aleft, aright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // E ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.type.INT), new Integer(a), aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // E ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.type.DOUBLE), new Double(a), aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // E ::= tstring 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.type.STRING), a, aleft, aright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // E ::= tchar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.type.CHAR), a.charAt(0), aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // E ::= true_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.type.BOOLEAN), new Boolean(true), aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // E ::= false_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.type.BOOLEAN), new Boolean(false), aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // E ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Identificador(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // E ::= id parIzquierda PARAMETROS parDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new LlamadaFuncion(new LlamadaMetodo(a, b, aleft, aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // E ::= read_file_ parIzquierda E parDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ReadFile(b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
